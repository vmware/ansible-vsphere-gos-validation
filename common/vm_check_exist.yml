# Copyright 2021-2024 VMware, Inc.
# SPDX-License-Identifier: BSD-2-Clause
---
# Check a specific VM exists or not
# Return:
#   vm_exists: true if the vm exists.
#
- name: "Initialize variable for VM existence"
  ansible.builtin.set_fact:
    existing_vm_info: ""
    vm_exists: false

# If there is a VM deleted while executing this task, the task may fail.
# Here addes retries to get all VMs info successfully
- name: "Get all registerd VMs and templates on {{ vsphere_host_name }}"
  community.vmware.vmware_vm_info:
    hostname: "{{ vsphere_host_name }}"
    username: "{{ vsphere_host_user }}"
    password: "{{ vsphere_host_user_password }}"
    validate_certs: "{{ validate_certs | default(false) }}"
    folder: "{{ vm_folder }}"
    vm_type: "all"
  register: all_vm_facts
  retries: 10
  delay: 5
  until:
    - all_vm_facts.failed is defined
    - not all_vm_facts.failed

- name: "Check whether VM exists or not"
  when:
    - all_vm_facts is defined
    - all_vm_facts.virtual_machines is defined
    - all_vm_facts.virtual_machines
  block:
    - name: "Set fact of existing VM basic information"
      ansible.builtin.set_fact:
        existing_vm_info: "{{ all_vm_facts.virtual_machines | selectattr('guest_name', 'equalto', vm_name) }}"

    - name: "A VM, template or vApp with name '{{ vm_name }}' exists"
      ansible.builtin.debug: var=existing_vm_info
      when: enable_debug and existing_vm_info

    - name: "Set fact of VM existence"
      ansible.builtin.set_fact:
        vm_exists: true
      when: existing_vm_info | length > 0

- name: "Print the fact that VM exists or not"
  ansible.builtin.debug: var=vm_exists
