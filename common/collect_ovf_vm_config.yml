# Copyright 2022-2024 VMware, Inc.
# SPDX-License-Identifier: BSD-2-Clause
---
# This task collects hardware configurations of VM deployed from
# an OVF or OVA template, and save the hardware config info to
# a json file in specifed directory.
# Parameters:
#   ovf_vm_hardware_config_path: The existing directory path
#     on local machine to save the json file.
#
- name: "Initialize VM hardware configurations info variables"
  ansible.builtin.set_fact:
    ovf_vm_hardware_config: {}
    ovf_vm_disk_info: []
    ovf_vm_network_info: []
    ovf_vm_cdrom_info: []
    ovf_vm_usb_info: []
    ovf_vm_video_card_info: []
    ovf_vm_vmtools_info: {}
    ovf_vm_guest_os: ""
    ovf_vm_guest_build: ""
    ovf_vm_guest_bitness: ""
    ovf_vm_hardware_config_file: 'ovf_deploy_vm_info.json'

- name: "Get all the VM hardwares info"
  include_tasks: vm_get_config.yml

- name: "Collect VM hardware configs"
  ansible.builtin.set_fact:
    ovf_vm_hardware_config: >-
      {{
        ovf_vm_hardware_config |
        combine({'Guest OS ID': vm_config.config.guestId | default(''),
                 'Guest OS Version': vm_config.config.guestFullName | default(''),
                 'Hardware Version': vm_config.config.version | default(''),
                 'CPU Number': vm_config.config.hardware.numCPU | default(''),
                 'CPU Cores per Socket': vm_config.config.hardware.numCoresPerSocket | default(''),
                 'CPU Hot Add Enabled': vm_config.config.cpuHotAddEnabled | default(''),
                 'CPU I/O MMU': vm_config.config.flags.vvtdEnabled | default(''),
                 'Memory Size in MB': vm_config.config.hardware.memoryMB | int | default(''),
                 'Memory Hot Add Enabled': vm_config.config.memoryHotAddEnabled | default(''),
                 'Firmware': vm_config.config.firmware | default(''),
                 'Secure Boot': vm_config.config.bootOptions.efiSecureBootEnabled | default(''),
                 'VBS Enabled': vm_config.config.flags.vbsEnabled | default(''),
                 'CPU Nested HV Enabled': vm_config.config.nestedHVEnabled | default(''),
                 'Virtual TPM': (vm_config.config.hardware.device |
                          selectattr('_vimtype', 'equalto', 'vim.vm.device.VirtualTPM') |
                          length > 0)
                 })
      }}

- name: "Get VM extra configs"
  ansible.builtin.set_fact:
    vm_extra_config: "{{ vm_config.config.extraConfig | items2dict }}"

- name: "Collect VM extra configs"
  ansible.builtin.set_fact:
    ovf_vm_hardware_config: >-
      {{
        ovf_vm_hardware_config |
        combine({'Virtual HPET': vm_extra_config['hpet0.present'] | bool | default(''),
                 'Hardware Version Product Compatibility': vm_extra_config['virtualhw.productcompatibility'] | default('')})
      }}

- name: "Set fact of disks info"
  ansible.builtin.set_fact:
    ovf_vm_disk_info: >-
      {{
        ovf_vm_disk_info +
        [{'Label': item.deviceInfo.label | default(''),
          'Disk Size in GB': item.capacityInKB | int / 1024 / 1024 | default(''),
          'Controller': (vm_config.config.hardware.device |
                         selectattr('key', 'equalto', item.controllerKey))[0].deviceInfo.summary,
          'Thin Provisioned': item.backing.thinProvisioned | default('')}]
       }}
  with_items: "{{ vm_config.config.hardware.device |
                  selectattr('_vimtype', 'equalto', 'vim.vm.device.VirtualDisk') }}"

- name: "Set fact of CDROM info"
  ansible.builtin.set_fact:
    ovf_vm_cdrom_info: >-
      {{
        ovf_vm_cdrom_info +
        [{'Label': item.deviceInfo.label | default(''),
          'Controller': (vm_config.config.hardware.device |
                         selectattr('key', 'equalto', item.controllerKey))[0].deviceInfo.summary }]
      }}
  with_items: "{{ vm_config.config.hardware.device |
                  selectattr('_vimtype', 'equalto', 'vim.vm.device.VirtualCdrom') }}"

- name: "Set fact of USB info"
  ansible.builtin.set_fact:
    ovf_vm_usb_info: "{{ ovf_vm_usb_info + [item.deviceInfo.label.strip() | default('')] }}"
  with_items: "{{ vm_config.config.hardware.device |
                  selectattr('_vimtype', 'in', ['vim.vm.device.VirtualUSBController',
                                                'vim.vm.device.VirtualUSBXHCIController']) }}"


- name: "Set fact of network adapters info"
  ansible.builtin.set_fact:
    ovf_vm_network_info: >-
      {{
        ovf_vm_network_info +
        [{'Label': item.deviceInfo.label | default(''),
          'Type': item._vimtype.split('.')[-1][7:] | upper }]
      }}
  with_items: "{{ vm_config.config.hardware.device |
                  selectattr('_vimtype', 'in', ['vim.vm.device.VirtualVmxnet3',
                                                'vim.vm.device.VirtualE1000e',
                                                'vim.vm.device.VirtualE1000']) }}"

- name: "Collect devices info"
  ansible.builtin.set_fact:
    ovf_vm_hardware_config: >-
      {{
        ovf_vm_hardware_config |
        combine({'Disks': ovf_vm_disk_info,
                 'CDROMs': ovf_vm_cdrom_info,
                 'USB Controllers': ovf_vm_usb_info,
                 'Network Adapters': ovf_vm_network_info
                 })
      }}

- name: "Set fact of video card info"
  ansible.builtin.set_fact:
    ovf_vm_video_card_info: >-
      {{
        vm_config.config.hardware.device |
        selectattr('_vimtype', 'equalto', 'vim.vm.device.VirtualVideoCard')
      }}

- name: "Collect video card info"
  ansible.builtin.set_fact:
    ovf_vm_hardware_config: >-
      {{
        ovf_vm_hardware_config |
        combine({'Video Card': {
                   'Auto-detect Settings': ovf_vm_video_card_info[0].useAutoDetect | default(''),
                   'Video RAM Size in MB': (ovf_vm_video_card_info[0].videoRamSizeInKB | int) / 1024 | default(''),
                   'Number of Displays': ovf_vm_video_card_info[0].numDisplays | default(''),
                   'Enable 3D Support': ovf_vm_video_card_info[0].enable3DSupport | default(''),
                   '3D Memory Size in MB': (ovf_vm_video_card_info[0].graphicsMemorySizeInKB | int) / 1024 | default(''),
                   '3D Renderer': ovf_vm_video_card_info[0].use3dRenderer | default('') }
                })
      }}
  when: ovf_vm_video_card_info | length > 0

- name: "Get VMware Tools info"
  ansible.builtin.set_fact:
    ovf_vm_vmtools_info: >-
      {{
        ovf_vm_vmtools_info |
        combine({'Config Tools Version': vm_config.config.tools.toolsVersion | default(''),
                 'Install Type': vm_config.config.tools.toolsInstallType | default(''),
                 'Upgrade Policy': vm_config.config.tools.toolsUpgradePolicy | default(''),
                 'Sync Time with Host': vm_config.config.tools.syncTimeWithHost | default('')})
      }}

- name: "Power on VM"
  include_tasks: vm_set_power_state.yml
  vars:
    vm_power_state_set: 'powered-on'

- name: "Wait for VMware Tools running"
  include_tasks: vm_wait_vmtools_status.yml
  vars:
    vm_wait_vmtools_running: true
    vm_wait_vmtools_timeout: 600

- name: "Get VM's guest info"
  include_tasks: vm_get_guest_info.yml

- name: "Get Guest Tools version"
  ansible.builtin.set_fact:
    ovf_vm_vmtools_info: >-
      {{
        ovf_vm_vmtools_info |
        combine({'Guest Tools Version': guestinfo_vmtools_info })
      }}
  when: guestinfo_vmtools_info

- name: "Get VM's guest OS distribution"
  block:
    - name: "Convert guest OS detailed data to dictionary"
      ansible.builtin.set_fact:
        guest_detailed_data_dict: "{{ guestinfo_detailed_data |
                                      regex_replace(' (\\w+=)', '\n\\1') |
                                      replace('=', ': ') | from_yaml }}"

    - name: "Set fact of guest OS bitness and build or kernel version"
      ansible.builtin.set_fact:
        ovf_vm_guest_os: "{{ guest_detailed_data_dict.prettyName | default('') }}"
        ovf_vm_guest_build: "{{ guest_detailed_data_dict.kernelVersion | default('') }}"
        ovf_vm_guest_bitness: "{{ guest_detailed_data_dict.bitness | default('') }}"

    - name: "Set fact of Linux guest OS distribution"
      block:
        - name: "Update the fact of guest OS distribution for VMware Photon OS"
          ansible.builtin.set_fact:
            ovf_vm_guest_os: "{{ guest_detailed_data_dict.distroName ~ ' ' ~
                                  guest_detailed_data_dict.distroVersion | default('') }}"
          when:
            - guest_detailed_data_dict.distroName is defined
            - guest_detailed_data_dict.distroName == 'VMware Photon OS'

        - name: "Collect Linux kernel version"
          ansible.builtin.set_fact:
            ovf_vm_hardware_config: >-
              {{
                ovf_vm_hardware_config |
                combine({'Kernel Version': ovf_vm_guest_build})
              }}
      when:
        - guest_detailed_data_dict.familyName is defined
        - guest_detailed_data_dict.familyName =='Linux'
  when: guestinfo_detailed_data

- name: "Collect guest OS distribution and VMware tools info"
  ansible.builtin.set_fact:
    ovf_vm_hardware_config: >-
      {{
        ovf_vm_hardware_config |
        combine({'Guest OS Distribution': ovf_vm_guest_os,
                 'VMware Tools': ovf_vm_vmtools_info})
      }}

- name: "Display the VM hardware configuration deployed from OVF or OVA"
  ansible.builtin.debug: var=ovf_vm_hardware_config

# Save the VM hardware info to json file
- name: "Set fact of json file name for VM hardware configuration info"
  ansible.builtin.set_fact:
    ovf_vm_hardware_config_file: "{{ ('-').join(ovf_vm_guest_os.split(',')[0].split(' ')) }}-{{ ovf_vm_guest_build.replace('.', '-') }}-{{ ovf_vm_guest_bitness }}bit-template.json"
  when:
    - ovf_vm_guest_os is search('Windows')
    - ovf_vm_guest_build
    - ovf_vm_guest_bitness

# Save the VM hardware info to json file
- name: "Set fact of json file name for VM hardware configuration info"
  ansible.builtin.set_fact:
    ovf_vm_hardware_config_file: "{{ ovf_vm_guest_os | regex_replace(' \\(.*\\)', '') | replace(' ', '-') }}-{{ ovf_vm_guest_bitness }}bit-template.json"
  when:
    - ovf_vm_guest_os
    - ovf_vm_guest_os is not search('Windows')
    - ovf_vm_guest_bitness

- name: "Dump VM hardware configuration info to json file"
  ansible.builtin.copy:
    dest: "{{ ovf_vm_hardware_config_path }}/{{ ovf_vm_hardware_config_file }}"
    content: "{{ [ovf_vm_hardware_config] | to_nice_json }}"

- name: "Check ddb.toolsVersion of open-vm-tools in OVA is expected"
  ansible.builtin.assert:
    that:
      - ovf_vm_vmtools_info['Config Tools Version'] | string | length > 0 or vm_extra_config['guestinfo.vmtools.versionNumber'] | length > 0
      - ovf_vm_vmtools_info['Config Tools Version'] | string in ['2147483647', vm_extra_config['guestinfo.vmtools.versionNumber']]
    fail_msg: "The ddb.toolsVersion in OVA template is {{ ovf_vm_vmtools_info['Config Tools Version'] }}, not as expected '2147483647' or {{ vm_extra_config['guestinfo.vmtools.versionNumber'] }}."
    success_msg: "The ddb.toolsVersion in OVA template is {{ ovf_vm_vmtools_info['Config Tools Version'] }}, which is as expected."
