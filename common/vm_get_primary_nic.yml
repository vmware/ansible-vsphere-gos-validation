# Copyright 2021-2022 VMware, Inc.
# SPDX-License-Identifier: BSD-2-Clause
---
# Get a primary IPv4 address for SSH connection
# Parameters:
#   vm_guest_mac_ipv4: a dictinoary of valid MAC-IPv4 addresses mappings found in guest
# Return:
#   vm_primary_mac: the mac address of first network interface which is connectable
#   vm_primary_ip: the ipv4 address of first network interface which is connectable
#
- name: "Initialize VM primary IP for VM '{{ vm_name }}'"
  set_fact:
    vm_primary_ip: ""

- name: "Assert VM has valid IPv4 address for VM '{{ vm_name }}'"
  assert:
    that:
      - vm_guest_mac_ipv4 | length >= 1
    fail_msg: "Not found valid IPv4 address for VM '{{ vm_name }}'"

- name: Display the VM MAC and IP address dict
  debug: var=vm_guest_mac_ipv4

- block:
    - name: "Get IP of VM '{{ vm_name }}' primary NIC with MAC address {{ vm_primary_mac }}"
      set_fact:
        vm_primary_ip: "{{ vm_guest_mac_ipv4[vm_primary_mac] }}"
  when: vm_primary_mac is defined and vm_primary_mac in vm_guest_mac_ipv4.keys()

- block:
    - name: "Set the only network interface as VM primary NIC of '{{ vm_name }}'"
      set_fact:
        vm_primary_mac: "{{ (vm_guest_mac_ipv4.keys() | list)[0] }}"
        vm_primary_ip: "{{ (vm_guest_mac_ipv4.values() | list)[0] }}"
      when: vm_guest_mac_ipv4 | length == 1

    - name: "VM '{{ vm_name }}' has more than one IPv4 addresses"
      block:
        # Loop each IP and ping, find all reachable nics
        - name: "Initialize VM '{{ vm_name }}' reachable network interfaces"
          set_fact:
            vm_reachable_nics: {}

        - name: "Try to ping each IP and find the reachable network interfaces"
          command: ping -c 5 "{{ item.value }}"
          register: all_ping_results
          ignore_errors: true
          with_dict: "{{ vm_guest_mac_ipv4 }}"

        - name: "Get all reachable IP addresses for '{{ vm_name }}'"
          set_fact:
            vm_reachable_nics: "{{ vm_reachable_nics | combine({ping_result.item.key:ping_result.item.value}) }}"
          when: ping_result.rc == 0
          with_items: "{{ all_ping_results.results }}"
          loop_control:
            loop_var: ping_result

        - name: "Set the only reachable network interface as VM '{{ vm_name }}' primary NIC"
          set_fact:
            vm_primary_mac: "{{ (vm_reachable_nics.keys() | list)[0] }}"
            vm_primary_ip: "{{ (vm_reachable_nics.values() | list)[0] }}"
          when: vm_reachable_nics | length == 1

        # When VM all nics are not reachable or more than 1 nics are reachable
        - block:
            # If all nics are not reachable, test all of them
            - name: "By default, test all network interfaces of VM '{{ vm_name }}'"
              set_fact:
                test_vm_nics: "{{ vm_guest_mac_ipv4 }}"

            # If more than 1 reachable nics are found, test these reachable nics
            - name: "Only test reachable network interfaces of VM '{{ vm_name }}'"
              set_fact:
                test_vm_nics: "{{ vm_reachable_nics }}"
              when: vm_reachable_nics | length > 1

            - name: Display the reachable VM network interfaces
              debug: var=test_vm_nics

            - name: "Initialize IP testing variable for VM '{{ vm_name }}'"
              set_fact:
                test_vm_nic_result: {}

            - name: "Test SSH connection and find a primary network interface for VM '{{ vm_name }}'"
              include_tasks: vm_test_nic.yml
              vars:
                vm_wait_connection_timeout: 300
                skip_if_primary_ip_found: True
              with_dict: "{{ test_vm_nics }}"
              loop_control:
                loop_var: test_vm_nic
          when: vm_reachable_nics | length != 1

      when: vm_guest_mac_ipv4 | length > 1
  when: >
     (vm_primary_mac is undefined) or
     (not vm_primary_mac) or
     (vm_primary_mac not in vm_guest_mac_ipv4.keys())

- name: "Assert VM has primary connectable IP"
  assert:
    that:
      - vm_primary_ip
    fail_msg: "Not found a connectable IP from {{ vm_guest_mac_ipv4.values() }}"
    success_msg: "Found VM primary network interface: MAC address is {{ vm_primary_mac }}, IP address is {{ vm_primary_ip }}"
