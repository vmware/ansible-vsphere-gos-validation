# Copyright 2021-2024 VMware, Inc.
# SPDX-License-Identifier: BSD-2-Clause
---
# Get new disk controller bus number and new disk unit number
# Parameters:
#   existing_vhba_type: the disk controller type
#   disk_controller_facts_data: 'disk_controller_facts.disk_controller_data'
#     got from 'vm_get_disk_controller_facts.yml' task.
# Return:
#   existing_vhba_bus_number: bus number of existing disk controller with specified type
#   new_disk_unit_number: new disk unit number
#   existing_vbha_found: if disk controller with specified type exists
#   new_disk_unit_number_got: whether get new disk unit number or not
#
- name: Check required parameter
  ansible.builtin.assert:
    that:
      - existing_vhba_type is defined and existing_vhba_type
      - disk_controller_facts_data is defined and disk_controller_facts_data
    fail_msg: "'existing_vhba_type' and 'disk_controller_facts_data' are required parameters."

- name: "Set fact of vhba type and name mapping dict"
  ansible.builtin.set_fact:
    vhba_type_name_map:
      paravirtual: 'VMware paravirtual SCSI'
      lsilogic: 'LSI Logic'
      lsilogicsas: 'LSI Logic SAS'
      nvme: 'NVME controller'
      sata: 'AHCI'
- ansible.builtin.debug:
    msg: "Specified vhba type '{{ existing_vhba_type }}' corresponding name: {{ vhba_type_name_map[existing_vhba_type] }}"

- name: Initialize the fact of not SCSI controller
  ansible.builtin.set_fact:
    is_scsi_vhba: false
- name: "Set fact of SCSI disk max unit number 15"
  ansible.builtin.set_fact:
    is_scsi_vhba: true
    valid_max_unit_number: 15
  when: existing_vhba_type in ['paravirtual', 'lsilogic', 'lsilogicsas']

- name: "Set fact of SATA disk max unit number 29"
  ansible.builtin.set_fact:
    valid_max_unit_number: 29
  when: existing_vhba_type == "sata"

- name: "Set fact of NVMe disk max unit number 14"
  ansible.builtin.set_fact:
    valid_max_unit_number: 14
  when: existing_vhba_type == "nvme"

- name: Initialize the fact of new disk node info on existing controller
  ansible.builtin.set_fact:
    existing_vhba_bus_number: ''
    new_disk_unit_number: ''
    existing_vbha_found: false
    new_disk_unit_number_got: false
    existing_device_key: []
    disk_full_existing_vhba: false

- name: "Loop to get exisitng '{{ existing_vhba_type }}' controller bus number"
  ansible.builtin.set_fact:
    existing_vhba_bus_number: "{{ item.key }}"
    existing_device_key: "{{ item.value['controller_disks_devicekey'] }}"
    existing_vbha_found: "{{ true if (vhba_type_name_map[existing_vhba_type] == item.value['controller_summary'] or (' '.join([vhba_type_name_map[existing_vhba_type], item.key]) == item.value['controller_summary'])) else false }}"
  with_dict: "{{ disk_controller_facts_data['scsi'] if is_scsi_vhba else disk_controller_facts_data[existing_vhba_type] }}"
  when:
    - not existing_vbha_found

- name: Set fact of disks attached to controller are full
  ansible.builtin.set_fact:
    disk_full_existing_vhba: true
  when: >
    (existing_device_key|length == 15 and is_scsi_vhba) or
    (existing_device_key|length == 15 and existing_vhba_type == 'nvme') or
    (existing_device_key|length == 30 and existing_vhba_type == 'sata')

# Calculate the new disk unit number
- block:
    - ansible.builtin.debug:
        msg: "Existing disks device key list: {{ existing_device_key }}"
    - name: Sanitize the device key list of existing disk
      ansible.builtin.set_fact:
        existing_device_key: "{% for item in existing_device_key %}{{ item|int % 1000 }} {% endfor %}"
    - name: Set fact of the new disk unit number
      ansible.builtin.set_fact:
        new_disk_unit_number: "{{ item }}"
        new_disk_unit_number_got: "{{ true if (item + (valid_max_unit_number + 1) * existing_vhba_bus_number|int)|string not in existing_device_key.split() else false }}"
      loop: "{{ range(0, (valid_max_unit_number + 1))|list }}"
      when:
        - not new_disk_unit_number_got
  when:
    - existing_vbha_found
    - not disk_full_existing_vhba

- ansible.builtin.debug:
    msg:
      - "Specified vhba type '{{ existing_vhba_type }}' found: {{ existing_vbha_found }}"
      - "Found vhba bus number: {{ existing_vhba_bus_number }}"
      - "Got new disk unit number: {{ new_disk_unit_number_got }}"
      - "New disk unit number: {{ new_disk_unit_number }}"
      - "Attached disks are full on vhba: {{ disk_full_existing_vhba }}"
