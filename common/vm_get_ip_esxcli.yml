# Copyright 2021-2022 VMware, Inc.
# SPDX-License-Identifier: BSD-2-Clause
---
# Get VM IP address on ESXi host by esxcli command
# Paramters:
#   vm_world_id: VM world ID got from task 'vm_get_world_id.yml'.
#   vm_get_ip_timeout: the timeout in seconds to get VM IP address.
#     default value is 300.
# Return:
#   vm_guest_ip: VM guest IPv4 address
#
- name: "Check VM world ID of '{{ vm_name }}' is not empty"
  assert:
    that:
      - vm_world_id is defined
      - vm_world_id
    fail_msg: "Can not get VM IP address by esxcli command if VM world ID is not defined or empty."

- name: "Initialize the fact for finding VM primary network adapter"
  set_fact:
    find_primary_nic: False

- block:
    # Wait for network adapters ready after VM power-on/reset
    - include_tasks: vm_wait_network_connected.yml

    - name: "Initialize the connected network adapter number for VM '{{ vm_name }}'"
      set_fact:
        vm_connected_nic_number: 0

    - include_tasks: vm_get_network_facts.yml

    - name: "Get connected network adapter number form VM '{{ vm_name }}'"
      set_fact:
        vm_connected_nic_number: "{{ vm_network_adapters | dict2items | selectattr('value.connected', 'equalto', true) | length }}"

    - name: "VM '{{ vm_name }}' has {{ vm_connected_nic_number }} network adapter(s) connected"
      assert:
        that:
          - vm_connected_nic_number | int >= 1
        fail_msg: "Not found connected network adapter on VM '{{ vm_name }}'"

    - name: "VM '{{ vm_name }}' has more than one network adapter connected. Need to find the primary NIC."
      set_fact:
        find_primary_nic: True
      when: vm_connected_nic_number | int > 1
  when: (router_vm_name is undefined) or (vm_name != router_vm_name)

# Deployed router VM can only get 1 valid IP even though it has 2 network adapteres
- block:
    - name: "Wait for getting VM '{{ vm_name }}' IP address on ESXi '{{ esxi_hostname }}'"
      shell: esxcli network vm port list -w '{{ vm_world_id }}' | awk '/IP Address/ {print $3}' | sed '/0.0.0.0/d' | sed '/^169.254./d'
      delegate_to: "{{ esxi_hostname }}"
      register: get_vm_ip_esxcli
      until: get_vm_ip_esxcli.stdout
      retries: "{{ ((vm_get_ip_timeout | default(300) | int) / 5) | int }}"
      delay: 5
      failed_when: False
      changed_when: False

    - name: "Set fact of VM guest IP with primary IP"
      set_fact:
        vm_guest_ip: "{% for ip in get_vm_ip_esxcli.stdout_lines %}{% if ip %}{{ ip.strip('\"') }}{% endif %}{% endfor %}"
  when: not find_primary_nic

# Wait for target VM's all IP obtained
- block:
    - name: "Initialize VM's primary MAC address for VM '{{ vm_name }}'"
      set_fact:
        vm_primary_mac: ""
      when: vm_primary_mac is undefined

    - name: "Initialize esxcli command for VM '{{ vm_name }}'"
      set_fact:
        esxcli_cmd: "esxcli network vm port list -w '{{ vm_world_id }}' | awk '/MAC Address|IP Address/ {key=$3; getline; print key \",\" $3;}'"

    # If vm_primary_mac has been found, we can only wait for the IP of the primary mac
    - name: "Set esxcli command with filter of MAC address {{ vm_primary_mac }} for VM '{{ vm_name }}'"
      set_fact:
        esxcli_cmd: "esxcli network vm port list -w '{{ vm_world_id }}' | awk '/MAC Address|IP Address/ {key=$3; getline; print key \",\" $3;}' | grep '{{ vm_primary_mac }}'"
      when:
        - vm_primary_mac is defined
        - vm_primary_mac

    - name: "Wait for getting VM '{{ vm_name }}' IP address on ESXi '{{ esxi_hostname }}'"
      shell: "{{ esxcli_cmd }}"
      delegate_to: "{{ esxi_hostname }}"
      register: get_vm_ip_esxcli
      until: "get_vm_ip_esxcli.stdout and '0.0.0.0' not in get_vm_ip_esxcli.stdout and ',169.254.' not in get_vm_ip_esxcli.stdout"
      retries: "{{ ((vm_get_ip_timeout | default(300) | int) / 5) | int }}"
      delay: 5
      failed_when: False
      changed_when: False

    - name: "Set fact of the VM IP info from esxcli command"
      set_fact:
        vm_ip_esxcli: "{{ get_vm_ip_esxcli.stdout_lines }}"

    - name: "Print VM IP address got from esxcli command"
      debug: var=vm_ip_esxcli

    - name: "Initialize the fact of VM network interfaces for VM '{{ vm_name }}'"
      set_fact:
        vm_guest_mac_ipv4: {}

    - name: "Set the fact of valid MAC address and IP address for VM '{{ vm_name }}'"
      set_fact:
        vm_guest_mac_ipv4: "{{ vm_guest_mac_ipv4 |combine({item.split(',')[0]:item.split(',')[1]}) }}"
      when: item.split(',') | length == 2 and item.split(',')[1] != '0.0.0.0'
      with_items: "{{ vm_ip_esxcli }}"

    - include_tasks: vm_get_primary_nic.yml

    - name: "Set fact of VM guest IP with primary IP for VM '{{ vm_name }}'"
      set_fact:
        vm_guest_ip: "{{ vm_primary_ip }}"
  when: find_primary_nic is defined and find_primary_nic

- debug:
    msg: "Get VM '{{ vm_name }}' IP address using esxcli command: {{ vm_guest_ip }}"
