# Copyright 2021-2024 VMware, Inc.
# SPDX-License-Identifier: BSD-2-Clause
---
# Create a new VM with specified hardware configuration
# Parameters:
#   vm_name (required): the name of the new VM.
#   guest_id (required): the guest ID of new created VM.
#   datastore (required): the name of datastore where new VM created.
#   vm_power_state (optional): the power state of VM after creation, valid values are
#     'poweredon', 'powered-on', 'poweredoff', 'powered-off', default value is 'poweredoff'.
#   memory_mb (optional): the VM memory size in MB, default value is 4096.
#   cpu_number (optional): the VM CPU number, default value is 2.
#   num_cpu_cores_per_socket (optional): VM CPU cores per socket number, default is 1.
#   firmware (optional): VM firmware type, valid values are 'efi', 'bios',
#     default value is 'efi'.
#   hardware_version (optional): the hardware version of VM, if not specified will create
#     VM with the latest hardware version ESXi supported.
#   vm_cdroms (optional): VM CDROM list, this parameter is optional, but if you want to install
#     guest OS after VM created, please configure the OS installation ISO files.
#   boot_disk_controller (optional): valid values are 'buslogic', 'lsilogic', 'lsilogicsas',
#     'paravirtual', 'sata' and 'nvme', default value is 'paravirtual'.
#   boot_disk_size_gb (optional): the boot disk size in GB, default value is 32.
#   vm_disk_type (optional): the boot disk type, valid values are 'thin', 'thick',
#     'eagerzeroedthick', default value is 'thin'.
#   network_adapter_type (optional): the network adapter type, valid values are 'e1000',
#     'e1000e', 'vmxnet3', default value is 'vmxnet3'.
#   vm_network_name (optional): the name of network to connect, default is 'VM Network',
#     and type of of IP assignment is set to 'dhcp'.
#
# VM with IDE boot disk can not be created directly. To create a VM with IDE boot disk,
# here needs to create a VM with PVSCSI boot disk firstly and then remove the PVSCSI
# disk and controller, then add an IDE disk to the VM as boot disk
- name: "Initialize the fact of VM's boot disk controller type"
  ansible.builtin.set_fact:
    vm_boot_disk_controller: >-
      {%- if boot_disk_controller | default('paravirtual') in ['paravirtual', 'ide'] -%}paravirtual
      {%- else -%}{{ boot_disk_controller }}{%- endif -%}

- name: "Create a new VM '{{ vm_name }}' on server '{{ vsphere_host_name }}'"
  community.vmware.vmware_guest:
    hostname: "{{ vsphere_host_name }}"
    username: "{{ vsphere_host_user }}"
    password: "{{ vsphere_host_user_password }}"
    validate_certs: "{{ validate_certs | default(false) }}"
    datacenter: "{{ vsphere_host_datacenter }}"
    esxi_hostname: "{{ esxi_hostname if vsphere_host_name != esxi_hostname else omit }}"
    folder: "{{ vm_folder }}"
    name: "{{ vm_name }}"
    guest_id: "{{ guest_id }}"
    state: "poweredoff"
    hardware:
      memory_mb: "{{ memory_mb | default(4096) }}"
      num_cpus: "{{ cpu_number | default(2) }}"
      num_cpu_cores_per_socket: "{{ cpu_cores_per_socket | default(1) }}"
      version: "{{ hardware_version | default(omit) }}"
      boot_firmware: "{{ firmware | default('efi') }}"
    disk:
      - size_gb: "{{ boot_disk_size_gb | default(40) }}"
        type: thin
        datastore: "{{ datastore }}"
        controller_type: "{{ vm_boot_disk_controller }}"
        controller_number: 0
        unit_number: 0
    cdrom: "{{ vm_cdroms | default(omit) }}"
    networks:
      - device_type: "{{ network_adapter_type | default('vmxnet3') }}"
        name: "{{ vm_network_name | default('VM Network') }}"
        type: "dhcp"
  register: vm_create_result

- name: "Display the result of new VM creation"
  ansible.builtin.debug: var=vm_create_result
  when: enable_debug is defined and enable_debug

- name: "Change VM's boot disk to IDE disk"
  when:
    - boot_disk_controller is defined
    - boot_disk_controller == "ide"
  block:
    - name: "Update VM's boot disk controller to {{ boot_disk_controller }}"
      ansible.builtin.set_fact:
        vm_boot_disk_controller: "{{ boot_disk_controller }}"

    - name: "Remove pre-added PVSCSI boot disk from VM"
      include_tasks: vm_hot_add_remove_disk.yml
      vars:
        disk_operation: "absent"
        disk_controller_type: "paravirtual"
        ctrl_number: 0
        unit_number: 0

    - name: "Remove pre-added PVSCSI controller from VM"
      include_tasks: vm_hot_add_remove_disk_ctrl.yml
      vars:
        disk_controller_ops: "absent"
        disk_controller_type: "paravirtual"
        disk_controller_number: 0

    - name: "Add IDE boot disk to VM"
      community.vmware.vmware_guest_disk:
        hostname: "{{ vsphere_host_name }}"
        username: "{{ vsphere_host_user }}"
        password: "{{ vsphere_host_user_password }}"
        validate_certs: "{{ validate_certs | default(false) }}"
        datacenter: "{{ vsphere_host_datacenter }}"
        folder: "{{ vm_folder }}"
        name: "{{ vm_name }}"
        disk:
          - size_gb: "{{ boot_disk_size_gb | default(40) }}"
            type: "thin"
            datastore: "{{ datastore }}"
            controller_type: "{{ vm_boot_disk_controller }}"
            controller_number: 0
            unit_number: 0
      register: add_ide_disk_result

    - name: "Print the result of adding IDE boot disk"
      ansible.builtin.debug: var=add_ide_disk_result
      when: enable_debug
