# Copyright 2021-2024 VMware, Inc.
# SPDX-License-Identifier: BSD-2-Clause
---
# Setup testing environment
- name: env_setup
  hosts: localhost
  gather_facts: false
  tasks:
    - name: "Get ansible info"
      include_tasks: get_ansible_info.yml

    - name: "Set default variables"
      include_tasks: set_default_variables.yml

    - name: "Create this test run log files path"
      include_tasks: create_local_log_path.yml

    - name: "Check and initialize variables for VM settings"
      include_tasks: check_testing_vars.yml

    - name: "Set hostname of Ansible module connecting"
      include_tasks: ../common/set_vmware_module_hostname.yml

    - name: "Check VM existence"
      include_tasks: ../common/vm_check_exist.yml

    - name: "Check VM '{{ vm_name }}' does not exist"
      ansible.builtin.assert:
        that:
          - not vm_exists
        fail_msg: "Cann't deploy VM as a VM with same name '{{ vm_name }}' already exists. Please provide a new vm_name."
      when: new_vm

    - name: "Check VM '{{ vm_name }}' exists"
      ansible.builtin.assert:
        that:
          - vm_exists
        fail_msg: "VM '{{ vm_name }}' doesn't exist. Please set new_vm to True to deploy the VM or provide an existing VM name."
      when: not new_vm

    - name: "Get vCenter Server version and build"
      include_tasks: ../common/vcenter_get_version_build.yml
      when: vcenter_is_defined

    - name: "Get ESXi version and build"
      include_tasks: ../common/esxi_get_version_build.yml

    - name: "ESXi version {{ esxi_version }} is not supported"
      ansible.builtin.fail:
        msg: "This project only supports guest OS validation on ESXi 6.5 or later"
      when: esxi_version == 'N/A' or esxi_version is version('6.5.0', '<')

    - name: "Get ESXi server model info"
      include_tasks: ../common/esxi_get_model.yml

    - name: "Set ESXi server default shell to /bin/sh on {{ esxi_version }}"
      ansible.builtin.set_fact:
        esxi_shell: "/bin/sh"
      when: esxi_version is version('8.0.0', '<')

    # Refer to https://knowledge.broadcom.com/external/article?legacyId=87386
    - name: "Set ESXi server default shell to /bin/supershell on {{ esxi_version }}"
      ansible.builtin.set_fact:
        esxi_shell: "/bin/supershell"
      when: esxi_version is version('8.0.0', '>=')

    - name: "Cleanup snapshots and get VM related information for existing VM"
      when: vm_exists is defined and vm_exists
      block:
        - name: "Not cleanup old snapshot by default"
          ansible.builtin.set_fact:
            cleanup_old_snapshots: false
          when: cleanup_old_snapshots is undefined

        - name: "Revert and cleanup existing snapshots on existing VM if required"
          include_tasks: ../common/vm_cleanup_snapshot.yml
          when: cleanup_old_snapshots | bool

        - name: "Get existing VM info"
          include_tasks: ../common/vm_get_vm_info.yml

        - name: "Get VM's power state"
          include_tasks: ../common/vm_get_power_state.yml

        - name: "Power on VM"
          include_tasks: ../common/vm_set_power_state.yml
          vars:
            vm_power_state_set: "powered-on"
          when: vm_power_state_get == "poweredOff"

        - name: "Wait for VM primary network adapter has MAC address"
          include_tasks: ../common/vm_wait_primary_nic_mac.yml

    - name: "Set fact of the VM datastore path"
      ansible.builtin.set_fact:
        vm_datastore_path: "/vmfs/volumes/{{ datastore }}"

    - name: "Display the datatore path of VM files"
      ansible.builtin.debug: var=vm_datastore_path

    - name: "Add vSphere hosts into memory inventory"
      include_tasks: ../common/add_vsphere_hosts_in_inventory.yml

    - name: "Enable guest IP hack on ESXi host to get VM IP address when there is no VMware tools installed or VMware tools is not up"
      include_tasks: ../common/esxi_enable_guest_ip_hack.yml

    - name: "Test Tesseract OCR engine is installed or not for extracting text from screenshot"
      ansible.builtin.shell: "tesseract --version"
      ignore_errors: true
      register: tesseract_version_result

    - name: "Set fact of Tesseract OCR is installed or not"
      ansible.builtin.set_fact:
        tesseract_is_installed: "{{ tesseract_version_result.rc is defined and tesseract_version_result.rc == 0 }}"

    - name: "Warning about installing Tesseract OCR engine"
      ansible.builtin.debug:
        msg: >-
          Tesseract OCR engine is required for extracting text from VM screenshot at test failure. Please install
          Tesseract OCR for full functionality by referring to https://github.com/tesseract-ocr/tesseract?tab=readme-ov-file#installing-tesseract.
      when: not tesseract_is_installed
