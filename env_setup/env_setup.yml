# Copyright 2021 VMware, Inc.
# SPDX-License-Identifier: BSD-2-Clause
---
# Setup testing environment
- name: env_setup
  hosts: localhost
  vars_files:
    - "{{ testing_vars_file | default('../vars/test.yml') }}"
  tasks:
    - name: "Set the timestamp of this test run"
      set_fact:
        testrun_timestamp: "{{ lookup('pipe', 'date +%Y-%m-%d-%H-%M-%S') }}"

    # Initialize variables
    - name: "Set default base snapshot name of VM"
      set_fact:
        base_snapshot_name: "BaseSnapshot"
      when: base_snapshot_name is undefined or not base_snapshot_name
    - name: "Enable debug log by default"
      set_fact:
        enable_debug: True
      when: enable_debug is undefined
    - name: "Set not exit testing when fail by default"
      set_fact:
        exit_testing_when_fail: False
      when: exit_testing_when_fail is undefined

    - name: "Set the fact of using proxy at localhost or not"
      set_fact:
        use_localhost_proxy: "{{ True if http_proxy_localhost is defined and http_proxy_localhost else False }}"

    # Create this test run log files path
    - include_tasks: create_local_log_path.yml

    # Check and initialize variables for VM settings
    - include_tasks: check_testing_vars.yml

    # Set hostname of Ansible module connecting
    - include_tasks: ../common/set_vmware_module_hostname.yml

    # Check VM existence
    - include_tasks: ../common/vm_check_exist.yml
    - name: "Check VM '{{ vm_name }}' does not exist"
      assert:
        that:
          - not vm_exists
        fail_msg: "Cann't deploy VM as a VM with same name '{{ vm_name }}' already exists. Please provide a new vm_name."
      when: new_vm is defined and new_vm | bool

    - name: "Check VM '{{ vm_name }}' exists"
      assert:
        that:
          - vm_exists
        fail_msg: "VM '{{ vm_name }}' doesn't exist. Please set new_vm to True to deploy the VM or provide an existing VM name."
      when: new_vm is undefined or not new_vm | bool
    
    # Set VM datastore path directly when creating a new VM
    - name: Set fact of the VM files parent path
      set_fact:
        vm_datastore_path: "/vmfs/volumes/{{ datastore }}"
      when: new_vm is defined and new_vm | bool
    # Get VM datatore path when testing on existing VM
    - block:
        - include_tasks: ../common/vm_get_guest_facts.yml
        - name: Set fact of the VM files parent path
          set_fact:
            vm_datastore_path: "/vmfs/volumes/{{ vm_guest_facts.instance.hw_datastores[0] }}"
      when: vm_exists is defined and vm_exists

    - name: Display the datatore path of VM files
      debug: var=vm_datastore_path

    # Get vCenter and ESXi version info
    - include_tasks: ../common/vcenter_get_version_build.yml
      when: vcenter_is_defined is defined and vcenter_is_defined
    - include_tasks: ../common/esxi_get_version_build.yml

    # Add esxi host into memory inventory
    - include_tasks: ../common/add_host_in_memory_inventory.yml
      vars:
        add_host_in_memory_inventory_ip: "{{ esxi_hostname }}"
        add_host_in_memory_inventory_gp: "esxi"
        add_host_in_memory_inventory_user: "{{ esxi_username }}"
        add_host_in_memory_inventory_pwd: "{{ esxi_password }}"
        add_host_in_memory_inventory_python: "/bin/python"
        add_host_in_memory_inventory_ssh_pipeline: "{{ esxi_ssh_pipeline_enable | default(False) }}"
        add_host_in_memory_inventory_remote_tmp: "{{ vm_datastore_path }}"

    # Enable guest IP hack on ESXi host to get VM IP address when
    # there is no VMware tools installed or VMware tools is not up
    - include_tasks: ../common/esxi_enable_guest_ip_hack.yml

    # Existing VM
    - block:
        - name: "Not cleanup old snapshot by default"
          set_fact:
            cleanup_old_snapshots: False
          when: cleanup_old_snapshots is undefined
        
        # Cleanup existing snapshots of existing VM if required
        - include_tasks: ../common/vm_cleanup_snapshot.yml
          when: cleanup_old_snapshots | bool

        # Check VM settings
        - include_tasks: check_vm_settings.yml
      when: (new_vm is undefined) or (not new_vm | bool)

    # Check testcase list to see if router VM is required
    - include_tasks: prepare_vm_network_for_testcase.yml
