# Copyright 2021-2024 VMware, Inc.
# SPDX-License-Identifier: BSD-2-Clause
---
- name: deploy_vm
  hosts: localhost
  gather_facts: false
  collections:
    - community.general
  tasks:
    - name: "Set current test case index, name and log folder"
      include_tasks: ../../common/set_current_testcase_facts.yml
      vars:
        create_test_log_folder: "{{ new_vm is defined and new_vm | bool }}"

    - name: "Skip test case"
      include_tasks: ../../common/skip_test_case.yml
      vars:
        skip_msg: "Skip test case due to new_vm is set to '{{ new_vm | default(false) }}'"
        skip_reason: "Skipped"
      when: new_vm is undefined or (not new_vm | bool)

    - name: "Test case block"
      block:
        # Change vm_username to root if it is not. And add a new user after VM deployment
        - name: "Set user account for new VM"
          include_tasks: set_new_vm_user_account.yml

        - name: "Get SSH public key from localhost"
          include_tasks: ../utils/get_local_ssh_public_key.yml

        - name: "Create temp folder for generating unattend install ISO file"
          include_tasks: ../../common/create_temp_file_dir.yml
          vars:
            tmp_dir: "{{ local_cache }}"
            tmp_state: "directory"
            tmp_prefix: "unattend_iso_"

        - name: "Initialize fact of unattend install cache folder"
          ansible.builtin.set_fact:
            unattend_iso_cache: "{{ tmp_path }}"

        - name: "Deploy VM by creating a new VM and install OS from ISO image on it"
          include_tasks: deploy_vm_from_iso.yml
          when: (vm_deploy_method is undefined) or (vm_deploy_method == "iso")

        # OVA deployment is applicable for OS releases which have OVA deliverables, e.g.
        # VMware Photon OS, Ubuntu cloud image, Flatcar, or Amazon Linux, etc
        - name: "Deploy VM from an OVA template"
          include_tasks: deploy_vm_from_ova.yml
          when: (vm_deploy_method is defined) and (vm_deploy_method == "ova")

        - name: "Take a screenshot when VM deployment succeeds"
          include_tasks: ../../common/vm_take_screenshot.yml
          vars:
            vm_screenshot_local_dir: "{{ current_test_log_folder }}"
            vm_screenshot_local_name: "screenshot_at_deploy_success.png"
            vm_screen_active: true

        - name: "Print VM guest IP address"
          ansible.builtin.debug: var=vm_guest_ip
          when: vm_guest_ip is defined and vm_guest_ip
      rescue:
        - name: "Display ESXi and CPU model information at deployment failure"
          ansible.builtin.debug:
            msg: >-
              VM deployment failed on server {{ esxi_model_info }} with
              ESXi version {{ esxi_version }} build {{ esxi_build }} installed.
              The server's CPU model is {{ esxi_cpu_model_info }}
              {{ ' (code name ' ~ esxi_cpu_code_name ~ ')' if esxi_cpu_code_name }}
          tags:
            - fail_message

        - name: "Known issue - Linux guest OS hung"
          ansible.builtin.debug:
            msg: >-
              Linux guest OS could be hung on ESXi {{ esxi_version }} server
              based on Intel {{ esxi_cpu_code_name }} CPU. Refer to KB articles
              https://knowledge.broadcom.com/external/article?legacyId=92361 and
              https://knowledge.broadcom.com/external/article?legacyId=91250.
          tags:
            - known_issue
          when:
            - esxi_version in ['7.0.0', '7.0.1']
            - esxi_cpu_code_name in ['Skylake', 'Ice Lake', 'Cascade Lake']

        - name: "Collect serial port log at test failure"
          include_tasks: collect_serial_port_log.yml
          vars:
            detect_errors: true

        - name: "Test case failure"
          include_tasks: ../../common/test_rescue.yml
          vars:
            extract_screenshot_text: true
            exit_testing_when_fail: true
      always:
        - name: "Collect VM deployment logs"
          include_tasks: collect_vm_logs.yml

        - name: "Clean up local cache"
          when:
            - unattend_iso_cache is defined
            - unattend_iso_cache
          block:
            # Remove original OS ISO image downloaded from ESXi datastore
            - name: "Remove source ISO image from local cache"
              include_tasks: ../../common/delete_local_file.yml
              vars:
                local_path: "{{ src_iso_file_path }}"
              when:
                - src_iso_file_path is defined
                - src_iso_file_path

            - name: "Remove ISO files from local cache folder {{ unattend_iso_cache }}"
              include_tasks: ../../common/delete_local_file.yml
              vars:
                local_path: "{{ unattend_iso_cache }}/{{ item }}"
              with_items: "{{ transferred_unattend_iso_list }}"
              when:
                - transferred_unattend_iso_list is defined
                - transferred_unattend_iso_list

            - name: "Copy unattend install config files in cache folder to test log folder"
              ansible.builtin.copy:
                src: "{{ unattend_iso_cache }}/"
                dest: "{{ current_test_log_folder }}/"

            - name: "Remove local cache folder {{ unattend_iso_cache }}"
              include_tasks: ../../common/delete_local_file.yml
              vars:
                local_path: "{{ unattend_iso_cache }}"

        - name: "Unmount NFS share folder and remove mount folder"
          when:
            - nfs_mount_dir is defined
            - nfs_mount_dir
          block:
            - name: "Umount NFS share points"
              include_tasks: ../../common/local_unmount.yml
              vars:
                mount_path: "{{ nfs_mount_dir }}"
                local_unmount_ignore_errors: true
              when:
                - nfs_mounted is defined
                - nfs_mounted | bool

            - name: "Remove the mount folder"
              include_tasks: ../../common/delete_local_file.yml
              vars:
                local_path: "{{ nfs_mount_dir }}"
                del_local_file_ignore_errors: true
