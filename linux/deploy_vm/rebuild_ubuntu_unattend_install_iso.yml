# Copyright 2023-2024 VMware, Inc.
# SPDX-License-Identifier: BSD-2-Clause
---
# Rebuild Ubuntu ISO image with unattended install file
# Parameters:
#   rebuilt_unattend_iso_path: Local path to the rebuilt ISO image with unattend install config file
#   src_iso_file_path: Local path to the source ISO image file
#   src_iso_dir_path: Local path to the directory containing the source ISO image file.
#
- name: "Extract boot config file boot/grub/grub.cfg and md5sum.txt from ISO"
  community.general.iso_extract:
    image: "{{ src_iso_file_path }}"
    dest: "{{ src_iso_dir_path }}"
    files:
      - "boot/grub/grub.cfg"
      - "md5sum.txt"

- name: "Try to extract BIOS boot config file isolinux/txt.cfg from ISO"
  community.general.iso_extract:
    image: "{{ src_iso_file_path }}"
    dest: "{{ src_iso_dir_path }}"
    files:
      - "isolinux/txt.cfg"
  ignore_errors: true
  register: extract_bios_cfg

- name: "Get Release file path from md5sum.txt"
  ansible.builtin.shell: "grep -e '/dists/[^/]*/Release$' '{{ src_iso_dir_path }}/md5sum.txt' | awk '{print $NF}' | sed 's#^\\./##'"
  register: release_file_path_result
  ignore_errors: true

- name: "Check Release file path"
  ansible.builtin.assert:
    that:
      - release_file_path_result.stdout_lines is defined
      - release_file_path_result.stdout_lines | length > 0
    fail_msg: "Not found Release file path in md5sum.txt from the ISO image"

- name: "Extract Release file from ISO"
  community.general.iso_extract:
    image: "{{ src_iso_file_path }}"
    dest: "{{ src_iso_dir_path }}"
    files:
      - "{{ release_file_path_result.stdout_lines[0] }}"

- name: "Get architectures from Release file"
  ansible.builtin.shell: "grep '^Architecture' {{ src_iso_dir_path }}/Release | awk -F ':' '{print $NF}' | sed 's/^ *//'"
  register: ubuntu_arch_result
  ignore_errors: true

- name: "Check architectures in Release file"
  ansible.builtin.assert:
    that:
      - ubuntu_arch_result.stdout is defined
      - ubuntu_arch_result.stdout
    fail_msg: "Not found architectures in file {{ release_file_path_result.stdout }} from the ISO image"

- name: "Set fact of grub parameters"
  ansible.builtin.set_fact:
    ubuntu_grub_opts: "{{ (ubuntu_arch_result.stdout == 'arm64') | ternary('', 'console=ttyS0,115200n8') }}"

- name: "Set fact of BIOS boot config file isolinux.cfg exists or not"
  ansible.builtin.set_fact:
    ubuntu_bios_cfg_exist: "{{ extract_bios_cfg.failed is defined and not extract_bios_cfg.failed }}"

- name: "Set timeout to 5 seconds at boot menu in boot/grub/grub.cfg"
  ansible.builtin.replace:
    path: "{{ unattend_iso_cache }}/grub.cfg"
    regexp: 'set timeout=.*'
    replace: "set timeout=5"

- name: "Rebuild ISO for Ubuntu desktop using Ubiquity installer"
  when: unattend_installer == "Ubuntu-Ubiquity"
  block:
    # casper command options can be found at https://manpages.ubuntu.com/manpages/jammy/man7/casper.7.html
    - name: "Set fact of boot command options for Ubiquity installer"
      ansible.builtin.set_fact:
        ubiquity_boot_options: >-
          boot=casper fsck.mode=skip debug-ubiquity automatic-ubiquity
          quiet splash noprompt --- console=ttyS0,115200n8

    - name: "Add menu entry for autoinstall in boot/grub/grub.cfg"
      ansible.builtin.blockinfile:
        path: "{{ src_iso_dir_path }}/grub.cfg"
        insertafter: "set timeout=.*"
        block: |
          set default="autoinstall"
          menuentry "Automated installation" --id autoinstall {
            set gfxpayload=keep
            linux /casper/vmlinuz file=/cdrom/preseed/ubuntu.seed {{ ubiquity_boot_options }}
            initrd /casper/initrd
          }

    - name: "Add menu entry for autoinstall in isolinux/txt.cfg"
      ansible.builtin.replace:
        path: "{{ src_iso_dir_path }}/txt.cfg"
        regexp: 'default live'
        replace: |
          default live-install
          label live-install
            menu label ^Automated Install Ubuntu
            kernel /casper/vmlinuz
            append file=/cdrom/preseed/ubuntu.seed initrd=/casper/initrd {{ ubiquity_boot_options }}
      when: ubuntu_bios_cfg_exist | bool

    - name: "Set facts of files to be updated or added into Ubuntu ISO"
      ansible.builtin.set_fact:
        update_iso_files:
          - src_file: "{{ src_iso_dir_path }}/grub.cfg"
            dest_file: "/boot/grub/grub.cfg"
          - src_file: "{{ src_iso_dir_path }}/md5sum.txt"
            dest_file: "/md5sum.txt"
          - src_file: "{{ new_unattend_install_conf }}"
            dest_file: "/preseed/ubuntu.seed"
          - src_file: "{{ src_iso_dir_path }}/{{ pre_install_script_file }}"
            dest_file: "/preseed/{{ pre_install_script_file }}"
          - src_file: "{{ src_iso_dir_path }}/{{ post_install_script_file }}"
            dest_file: "/preseed/{{ post_install_script_file }}"

- name: "Rebuild ISO for Ubuntu desktop or live server using Subiquity installer"
  when: unattend_installer == "Ubuntu-Subiquity"
  block:
    - name: "Update boot command options in boot/grub/grub.cfg"
      ansible.builtin.replace:
        path: "{{ unattend_iso_cache }}/grub.cfg"
        regexp: '(.*vmlinuz )(.*)'
        replace: "\\1autoinstall \\2 {{ ubuntu_grub_opts }} "

    - name: "Update boot command options in isolinux/txt.cfg"
      ansible.builtin.replace:
        path: "{{ unattend_iso_cache }}/txt.cfg"
        regexp: '(.*initrd )(.*)'
        replace: "\\1autoinstall \\2 {{ ubuntu_grub_opts }} "
      when: ubuntu_bios_cfg_exist | bool

    - name: "Set facts of files to be updated or added into Ubuntu ISO"
      ansible.builtin.set_fact:
        update_iso_files:
          - src_file: "{{ src_iso_dir_path }}/grub.cfg"
            dest_file: "/boot/grub/grub.cfg"
          - src_file: "{{ src_iso_dir_path }}/md5sum.txt"
            dest_file: "/md5sum.txt"

- name: "Update md5sum checksum for boot/grub/grub.cfg"
  ansible.builtin.shell: |
    md5=`md5sum grub.cfg | awk '{print $1}'`
    sed -i "/.\/boot\/grub\/grub.cfg/ s/^[^ ]*/$md5/" md5sum.txt
  args:
    chdir: "{{ src_iso_dir_path }}"

- name: "Add isolinux/txt.cfg to update ISO file list and updates its md5sum"
  when: ubuntu_bios_cfg_exist | bool
  block:
    - name: "Set facts of boot config files to be updated in ISO"
      ansible.builtin.set_fact:
        update_iso_files: >-
          {{ update_iso_files +
            [{'src_file': src_iso_dir_path ~ '/txt.cfg',
              'dest_file': '/isolinux/txt.cfg'}]
          }}

    - name: "Update md5sum checksum for isolinux/txt.cfg"
      ansible.builtin.shell: |
        md5=`md5sum txt.cfg | awk '{print $1}'`
        sed -i "/.\/isolinux\/txt.cfg/ s/^[^ ]*/$md5/" md5sum.txt
      args:
        chdir: "{{ src_iso_dir_path }}"

- name: "Rebuild ISO for Ubuntu Desktop with Ubiquity installer"
  community.general.iso_customize:
    src_iso: "{{ src_iso_file_path }}"
    dest_iso: "{{ rebuilt_unattend_iso_path }}"
    add_files: "{{ update_iso_files }}"
