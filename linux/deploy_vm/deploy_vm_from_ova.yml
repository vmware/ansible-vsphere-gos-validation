# Copyright 2021 VMware, Inc.
# SPDX-License-Identifier: BSD-2-Clause
---
# Initialize deploy_casename with guest_id
- name: "Set fact of deploy VM test case name"
  set_fact:
    deploy_casename: "deploy_ova"

- block:
    # OVA file on local machine
    - name: "Get OVA path and file name"
      set_fact:
        vm_ova_path: "{{ ova_path | realpath }}"
        vm_ova_name: "{{ ova_path | basename }}"
      when: ova_nfs_server_path is undefined or not ova_nfs_server_path

    # OVA file on NFS server
    - include_tasks: mount_nfs_storage_local.yml
      when: ova_nfs_server_path is defined and ova_nfs_server_path

    # Check OVA file exists
    - name: "Check for {{ vm_ova_path }} existence"
      stat:
        path: "{{ vm_ova_path }}"
      register: vm_ova_stat
      failed_when: not vm_ova_stat.stat.exists

    # Deploy a new VM from OVA
    - include_tasks: ../../common/ovf_deploy.yml
      vars:
        ovf_path: "{{ vm_ova_path }}"
        ovf_vm_name: "{{ vm_name }}"
        deploy_datastore: "{{ datastore }}"
    - name: "Set fact of the ova deploy result"
      set_fact:
        ova_is_deployed: "{% if ovf_deploy is defined and ovf_deploy.changed %}True{% else %}False{% endif %}"
    - name: "Assert OVA is deployed successfully"
      assert:
        that:
          - ova_is_deployed | bool
        fail_msg: "Failed to deploy VM '{{ vm_name }}' from {{ vm_ova_path }}"

    # Take a snapshot after OVA deploy
    # Reconfiguration must be performed at VM first time boot
    - name: "Set fact of the base snapshot name"
      set_fact:
        base_snapshot_for_reconfig: "FreshDeployedFromOVA"
    - include_tasks: ../../common/vm_take_snapshot.yml
      vars:
        snapshot_name: "{{ base_snapshot_for_reconfig }}"

    # Get OVA deployed VM info
    - include_tasks: ../../common/vm_get_vm_info.yml

    - name: "Set fact of guest OS type for VM '{{ vm_name }}'"
      set_fact:
        ova_guest_os_type: |-
          {%- if 'ubuntu' in vm_guest_id -%}ubuntu
          {%- elif 'amazonlinux' in vm_guest_id -%}amazonlinux
          {%- elif 'vmwarePhoton' in vm_guest_id -%}photon
          {%- else -%}unknown{%- endif -%}

    # Upgrade VM hardware version
    # Note:
    # Known issue on Ubuntu cloud image OVA deployed VM, after upgrade hardware version,
    # VM will hang during booting, tracked in this issue:
    # https://bugs.launchpad.net/cloud-images/+bug/1898871
    - include_tasks: upgrade_ova_vm_hwv.yml
      when:
        - hardware_version is defined and hardware_version
        - hardware_version == "latest" or (vm_hardware_version_num | int < hardware_version | int)

    # Power on VM and try to get OS type from guest info or vmx detailed data
    - block:
        - include_tasks: ../../common/vm_set_power_state.yml
          vars:
            vm_power_state_set: 'powered-on'
        - name: "Set current power state"
          set_fact:
            current_power_state: "{{ vm_power_state_get }}"
        - include_tasks: ../../common/vm_get_guest_info.yml

        # Try to get OS type from guest info
        - include_tasks: get_os_type_from_guestinfo.yml
      when: ova_guest_os_type == 'unknown'

    # Revert to snapshot "FreshDeployedFromOVA" or "AfterUpgradeHwv" to
    # proceed the following tasks so that VM's reconfiguration can be
    # performed at the first time boot.
    - include_tasks: ../../common/vm_revert_snapshot.yml
      vars:
        snapshot_name: "{{ base_snapshot_for_reconfig }}"
      when:
        - current_power_state is defined
        - current_power_state == "poweredOn"

    # Configure username/password, ssh public key, sshd, etc in guest
    # Reconfig Amazon Linux VM
    - include_tasks: amazonlinux/reconfigure_amazonlinux_vm.yml
      when: ova_guest_os_type == 'amazonlinux'

    # Reconfig Photon OS VM
    - include_tasks: photon/reconfigure_photon_vm.yml
      when: ova_guest_os_type == 'photon'

    # Reconfig Flatcar VM
    - include_tasks: flatcar/reconfigure_flatcar_vm.yml
      when: ova_guest_os_type == 'flatcar'

    # Reconfig Ubuntu VM
    - include_tasks: ubuntu/reconfigure_ubuntu_ova_vm.yml
      when: ova_guest_os_type == 'ubuntu'

    # Warning about other OS OVAs which are not supported
    - debug:
        msg: "WARN: OVA guest OS type is not supported in this project. The following tests might fail."
      when: ova_guest_os_type == 'unknown'

    - include_tasks: ../../common/print_test_result.yml
      vars:
        test_result: "Passed"
        test_name: "{{ deploy_casename }}"

    # Test clean up
    - block:
        # Umount NFS share points
        - include_tasks: ../../common/nfs_unmount.yml
          vars:
            nfs_mount_path: "{{ tmp_nfs_mount_dir }}"

        # Remove temporary folders
        - name: "Remove temporary directory {{ tmp_nfs_mount_dir }}"
          include_tasks: ../../common/delete_local_file.yml
          vars:
            local_path: "{{ tmp_nfs_mount_dir }}"
      when: tmp_nfs_mount_dir is defined and tmp_nfs_mount_dir
  rescue:
    - block:
        # Umount NFS share points
        - include_tasks: ../../common/nfs_unmount.yml
          vars:
            nfs_mount_path: "{{ tmp_nfs_mount_dir }}"
          when: ova_nfs_mounted is defined and ova_nfs_mounted | bool

        # Remove temporary folders
        - name: "Remove temporary directory {{ tmp_nfs_mount_dir }}"
          include_tasks: ../../common/delete_local_file.yml
          vars:
            local_path: "{{ tmp_nfs_mount_dir }}"
      when: tmp_nfs_mount_dir is defined and tmp_nfs_mount_dir

    - name: "Do not take snapshot if OVA deployment failed"
      set_fact:
        take_fail_snapshot: False
      when: (ova_is_deployed is undefined) or (not ova_is_deployed | bool)

    - name: "Set rescue step flags"
      set_fact:
        revert_to_base: False
        exit_testing_when_fail: True

    - include_tasks: ../setup/test_rescue.yml
      vars:
        test_name: "{{ deploy_casename }}"
