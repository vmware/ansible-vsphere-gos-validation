# Copyright 2021-2023 VMware, Inc.
# SPDX-License-Identifier: BSD-2-Clause
---
# Deploy a new VM from OVA image
#
- name: "Update test case name for deploying VM from OVA image"
  ansible.builtin.set_fact:
    current_testcase_name: "deploy_vm_ova"

- name: "Test case block"
  block:
    # OVA file on local machine
    - name: "Get OVA path and file name"
      ansible.builtin.set_fact:
        vm_ova_path: "{{ ova_path | realpath }}"
        vm_ova_name: "{{ ova_path | basename }}"
      when: ova_nfs_server_path is undefined or not ova_nfs_server_path

    # OVA file on NFS server
    - name: "Get OVA path and file name after mounting NFS storage at local"
      block:
        - include_tasks: ../../common/mount_nfs_storage_local.yml
          vars:
            nfs_server_path: "{{ ova_nfs_server_path }}"
        - name: "Get OVA path and file name"
          ansible.builtin.set_fact:
            vm_ova_path: "{{ nfs_mount_dir }}/{{ ova_path }}"
            vm_ova_name: "{{ ova_path | basename }}"
      when: ova_nfs_server_path is defined and ova_nfs_server_path
    # Check OVA file exists
    - name: "Check for {{ vm_ova_path }} existence"
      ansible.builtin.stat:
        path: "{{ vm_ova_path }}"
      register: vm_ova_stat
      failed_when: not vm_ova_stat.stat.exists

    - name: "Deploy a new VM from OVA"
      include_tasks: ../../common/ovf_deploy.yml
      vars:
        ovf_path: "{{ vm_ova_path }}"
        ovf_vm_name: "{{ vm_name }}"
        deploy_datastore: "{{ datastore }}"

    - name: "Set fact of vm_exists to True"
      ansible.builtin.set_fact:
        vm_exists: true

    # Take a snapshot after OVA deploy
    # Reconfiguration must be performed at VM first time boot
    - name: "Set fact of the base snapshot name"
      ansible.builtin.set_fact:
        base_snapshot_for_reconfig: "FreshDeployedFromOVA"

    - name: "Take snapshot after OVA deployment"
      include_tasks: ../../common/vm_take_snapshot.yml
      vars:
        snapshot_name: "{{ base_snapshot_for_reconfig }}"

    - name: "Power on VM"
      include_tasks: ../../common/vm_set_power_state.yml
      vars:
        vm_power_state_set: 'powered-on'

    - name: "Collect OVA configs"
      include_tasks: "../../common/collect_ovf_vm_config.yml"
      vars:
        ovf_vm_hardware_config_path: "{{ current_test_log_folder }}"

    - name: "Try to get OS type from guest info"
      include_tasks: get_ova_guest_os_type.yml

    # Revert to snapshot "FreshDeployedFromOVA" to
    # proceed the following tasks so that VM's reconfiguration can be
    # performed at the first time boot.
    - name: "Revert to snapshot '{{ base_snapshot_for_reconfig }}' for VM reconfig"
      include_tasks: ../../common/vm_revert_snapshot.yml
      vars:
        snapshot_name: "{{ base_snapshot_for_reconfig }}"

    # Upgrade VM hardware version
    # Note:
    # Known issue on Ubuntu cloud image OVA deployed VM, after upgrade hardware version,
    # VM will hang during booting, tracked in this issue:
    # https://bugs.launchpad.net/cloud-images/+bug/1898871
    - name: "Upgrade VM's hardware version to {{ hardware_version }}"
      include_tasks: upgrade_ova_vm_hwv.yml
      when:
        - hardware_version is defined
        - (hardware_version == "latest" or
           (vm_hardware_version_num | int < hardware_version | int))

    - name: "Reconfigure VM with cloud-init"
      include_tasks: reconfigure_vm_with_cloudinit.yml
      when: ova_guest_os_type in ['photon', 'ubuntu', 'amazon']

    - name: "Reconfigure Flatcar VM with Ignition"
      include_tasks: flatcar/reconfigure_flatcar_vm.yml
      when: ova_guest_os_type == 'flatcar'

    - name: "Warning about unknown guest OS type"
      ansible.builtin.debug:
        msg: >-
          WARNING: The guest OS type of the OVA doesn't match known guest OS type for
          reconfiguration. Please add it if needed or the following tests might fail.
      when: ova_guest_os_type == 'unknown'
  rescue:
    - name: "Test case failure"
      include_tasks: ../../common/test_rescue.yml
      vars:
        exit_testing_when_fail: true
  always:
    - name: "Unmount NFS share folder and remove mount folder"
      block:
        - name: "Umount NFS share points"
          include_tasks: ../../common/local_unmount.yml
          vars:
            mount_path: "{{ nfs_mount_dir }}"
            local_unmount_ignore_errors: true
          when: nfs_mounted is defined and nfs_mounted | bool

        - name: "Remove the mount folder"
          include_tasks: ../../common/delete_local_file.yml
          vars:
            local_path: "{{ nfs_mount_dir }}"
            del_local_file_ignore_errors: true
      when: nfs_mount_dir is defined and nfs_mount_dir

    - name: "Collect VM deployment logs"
      include_tasks: collect_vm_logs.yml
