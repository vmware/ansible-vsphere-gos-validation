# Copyright 2021 VMware, Inc.
# SPDX-License-Identifier: BSD-2-Clause
---
# Initialize deploy_casename with guest_id
- name: "Set fact of deploy VM test case name"
  set_fact:
    deploy_casename: "deploy_ova"

- block:
    - name: "Set OVA deploy datastore"
      set_fact:
        vm_datastore: "{{ datastore }}"

    # OVA is at localhost
    - name: "Get OVA path and file name"
      set_fact:
        vm_ova_path: "{{ ova_path | realpath }}"
        vm_ova_name: "{{ ova_path | basename }}"
      when: ova_nfs_server_path is undefined or not ova_nfs_server_path

    # OVA is on NFS server
    - block:
        # Get the NFS server and volume from OVA path
        - set_fact:
            ova_nfs_server: "{{ ova_nfs_server_path.split(':')[0] }}"
            ova_nfs_volume: "{{ ova_nfs_server_path.split(':')[1] }}"

        - name: "Create a temporary directory to mount NFS storage"
          include_tasks: ../../common/create_temp_file_dir.yml
          vars:
            tmp_state: "directory"
            tmp_prefix: "nfs_"

        - name: "Set fact of the temp dir"
          set_fact:
            tmp_nfs_mount_dir: "{{ tmp_path }}"

        # Mount OS Image folder
        - include_tasks: ../../common/nfs_mount.yml
          vars:
            nfs_server: "{{ ova_nfs_server }}"
            nfs_share_folder: "{{ ova_nfs_volume }}"
            nfs_mount_path: "{{ tmp_nfs_mount_dir }}"

        - name: "Set fact of the NFS mount result"
          set_fact:
            ova_nfs_mounted: "{% if nfs_mount_result is defined and nfs_mount_result.changed %}True{% else %}False{% endif %}"

        - name: "Get OVA path and file name"
          set_fact:
            vm_ova_path: "{{ tmp_nfs_mount_dir }}/{{ ova_path }}"
            vm_ova_name: "{{ ova_nfs_server_path | basename }}"
      when: ova_nfs_server_path is defined and ova_nfs_server_path

    # Check OVF/OVA exists
    - name: "Check for {{ vm_ova_path }} existence"
      stat:
        path: "{{ vm_ova_path }}"
      register: vm_ova_stat
      failed_when: not vm_ova_stat.stat.exists

    # Deploy OVA
    - include_tasks: ../../common/ovf_deploy.yml
      vars:
        ovf_path: "{{ vm_ova_path }}"
        ovf_vm_name: "{{ vm_name }}"
        datastore: "{{ vm_datastore }}"

    - name: "Set fact of the ova deploy result"
      set_fact:
        ova_is_deployed: "{% if ovf_deploy is defined and ovf_deploy.changed %}True{% else %}False{% endif %}"

    - name: "Assert OVA is deployed successfully"
      assert:
        that:
          - ova_is_deployed | bool
        fail_msg: "Failed to deploy VM '{{ vm_name }}' from {{ vm_ova_path }}"

    # Take a snapshot before making any changes
    - include_tasks: ../../common/vm_take_snapshot.yml
      vars:
        snapshot_name: "FreshDeployedFromOVA"

    # Reconfiguration must be performed at VM first time boot
    - name: "Set fact of the base snapshot name"
      set_fact:
        base_snapshot_for_reconfig: "FreshDeployedFromOVA"

    # Get OVA hardawre version and guest id
    - include_tasks: ../../common/vm_get_config.yml
      vars:
        property_list: ['config.guestId', 'config.version']

    - name: "Get OVA hardware version and guest id"
      set_fact:
        ova_hw_guest_id: "{{ vm_config.config.guestId }}"
        ova_hw_version: "{{ vm_config.config.version }}"
        vm_hw_version: "{{ vm_config.config.version.split('-')[1] }}"

    - name: "Set fact of guest OS type for VM '{{ vm_name }}'"
      set_fact:
        ova_guest_os_type: |-
          {%- if 'ubuntu' in ova_hw_guest_id -%}ubuntu
          {%- elif 'amazonlinux' in ova_hw_guest_id -%}amazonlinux
          {%- elif 'vmwarePhoton' in ova_hw_guest_id -%}photon
          {%- else -%}unknown{%- endif -%}

    # Upgrade VM's hardware version
    # Ubuntu OVA deploying will block if we upgrade hardware
    - block:
        - include_tasks: ../../common/vm_upgrade_hardware_version.yml
          vars:
            hw_version: "{{ hardware_version }}"

        - name: "Set fact of the VM hardware version"
          set_fact:
            vm_hw_version: "{{ vm_upgrade_hw_result.instance.hw_version.split('-')[1] }}"

        - include_tasks: ../../common/vm_take_snapshot.yml
          vars:
            snapshot_name: "AfterUpgradeHwv"

        - name: "Set fact of the base snapshot name"
          set_fact:
            base_snapshot_for_reconfig: "AfterUpgradeHwv"
      when:
        - hardware_version is defined and hardware_version
        - hardware_version == "latest" or ((ova_hw_version.split('-')[1] | int) < (hardware_version | int))

    # Power on VM and try to get OVA OS type from guest info
    - block:
        - include_tasks: ../../common/vm_set_power_state.yml
          vars:
            vm_power_state_set: 'powered-on'

        - name: "Set current power state"
          set_fact:
            current_power_state: "{{ vm_power_state_get }}"

        - include_tasks: ../../common/vm_wait_guest_fullname.yml

        # Try to get the OS type from guest id
        - name: "Get guest OS type for VM '{{ vm_name }}' based on guest id"
          set_fact:
            ova_guest_os_type: |-
              {%- if 'ubuntu' in vm_guest_facts.instance.hw_guest_id -%}ubuntu
              {%- elif 'amazonlinux' in vm_guest_facts.instance.hw_guest_id -%}amazonlinux
              {%- elif 'vmwarePhoton' in vm_guest_facts.instance.hw_guest_id -%}photon
              {%- else -%}unknown{%- endif -%}
          when:
            - ova_guest_os_type == 'unknown'
            - vm_guest_facts.instance is defined
            - vm_guest_facts.instance.hw_guest_id is defined

        # Try to get the OS type from guest full name
        - name: "Get guest OS type for VM '{{ vm_name }}' based on guest full name"
          set_fact:
            ova_guest_os_type: |-
              {%- if 'ubuntu' in vm_guest_facts.instance.hw_guest_full_name | lower -%}ubuntu
              {%- elif 'amazon linux' in vm_guest_facts.instance.hw_guest_full_name | lower -%}amazonlinux
              {%- elif 'vmware photon' in vm_guest_facts.instance.hw_guest_full_name | lower -%}photon
              {%- elif 'flatcar' in vm_guest_facts.instance.hw_guest_full_name | lower -%}flatcar
              {%- else -%}unknown{%- endif -%}
          when:
            - ova_guest_os_type == 'unknown'
            - vm_guest_facts.instance is defined
            - vm_guest_facts.instance.hw_guest_full_name is defined

        # If ova_guest_os_type is still not determined by guest id,
        # retrieve guest OS detailed data from vmx file
        # guestOS.detailed.data or guestInfo.detailed.data is supported by VMTools >= 11.0.0
        - block:
            - include_tasks: ../../common/vm_get_extra_config.yml

            # The field was changed from guestOS.detailed.data to guestInfo.detailed.data
            - name: "Get guest OS detailed data field name"
              set_fact:
                gos_detailed_data_name: |-
                  {%- if 'guestOS.detailed.data' in vm_extra_config -%}guestOS.detailed.data
                  {%- elif 'guestInfo.detailed.data' in vm_extra_config -%}guestInfo.detailed.data
                  {%- else -%}{%- endif -%}

            - name: "Get guest OS type for VM '{{ vm_name }}' based on guest OS detailed data"
              set_fact:
                ova_guest_os_type: |-
                  {%- if 'Ubuntu' in vm_extra_config[gos_detailed_data_name] -%}ubuntu
                  {%- elif 'Amazon Linux' in vm_extra_config[gos_detailed_data_name] -%}amazonlinux
                  {%- elif 'VMware Photon OS' in vm_extra_config[gos_detailed_data_name] -%}photon
                  {%- elif 'Flatcar' in vm_extra_config[gos_detailed_data_name] -%}flatcar
                  {%- else -%}unknown{%- endif -%}
              when:
                - gos_detailed_data_name
                - vm_extra_config[gos_detailed_data_name]
          when:
            - vm_guest_facts.instance.guest_tools_version | int >= 11264
            - ova_guest_os_type == 'unknown'
      when: ova_guest_os_type == 'unknown'

    # Revert to snapshot "FreshDeployedFromOVA" or "AfterUpgradeHwv" to
    # proceed the following tasks so that VM's reconfiguration can be
    # performed at the first time boot.
    - include_tasks: ../../common/vm_revert_snapshot.yml
      vars:
        snapshot_name: "{{ base_snapshot_for_reconfig }}"
      when:
        - current_power_state is defined
        - current_power_state == "poweredOn"

    # Configure username/password, ssh public key, sshd, etc in guest
    # Reconfig Amazon Linux VM
    - include_tasks: amazonlinux/reconfigure_amazonlinux_vm.yml
      when: ova_guest_os_type == 'amazonlinux'

    # Reconfig Photon OS VM
    - include_tasks: photon/reconfigure_photon_vm.yml
      when: ova_guest_os_type == 'photon'

    # Reconfig Flatcar VM
    - include_tasks: flatcar/reconfigure_flatcar_vm.yml
      when: ova_guest_os_type == 'flatcar'

    # Reconfig Ubuntu VM
    - include_tasks: ubuntu/reconfigure_ubuntu_ova_vm.yml
      when: ova_guest_os_type == 'ubuntu'

    # Warning about other OS OVAs which are not supported
    - debug:
        msg: "WARN: OVA guest OS type is not supported in this project. The following tests might fail."
      when: ova_guest_os_type == 'unknown'

    - include_tasks: ../../common/print_test_result.yml
      vars:
        test_result: "Passed"
        test_name: "{{ deploy_casename }}"

    # Test clean up
    - block:
        # Umount NFS share points
        - include_tasks: ../../common/nfs_unmount.yml
          vars:
            nfs_mount_path: "{{ tmp_nfs_mount_dir }}"

        # Remove temporary folders
        - name: "Remove temporary directory {{ tmp_nfs_mount_dir }}"
          include_tasks: ../../common/delete_local_file.yml
          vars:
            local_path: "{{ tmp_nfs_mount_dir }}"
      when: tmp_nfs_mount_dir is defined and tmp_nfs_mount_dir
  rescue:
    - block:
        # Umount NFS share points
        - include_tasks: ../../common/nfs_unmount.yml
          vars:
            nfs_mount_path: "{{ tmp_nfs_mount_dir }}"
          when: ova_nfs_mounted is defined and ova_nfs_mounted | bool

        # Remove temporary folders
        - name: "Remove temporary directory {{ tmp_nfs_mount_dir }}"
          include_tasks: ../../common/delete_local_file.yml
          vars:
            local_path: "{{ tmp_nfs_mount_dir }}"
      when: tmp_nfs_mount_dir is defined and tmp_nfs_mount_dir

    - name: "Do not take snapshot if OVA deployment failed"
      set_fact:
        take_fail_snapshot: False
      when: (ova_is_deployed is undefined) or (not ova_is_deployed | bool)

    - name: "Set rescue step flags"
      set_fact:
        revert_to_base: False
        exit_testing_when_fail: True

    - include_tasks: ../utils/test_rescue.yml
      vars:
        test_name: "{{ deploy_casename }}"
