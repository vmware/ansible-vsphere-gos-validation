# Copyright 2021-2023 VMware, Inc.
# SPDX-License-Identifier: BSD-2-Clause
---
# Deploy a new VM from OVA image
#
- name: "Update test case name for deploying VM from OVA image"
  ansible.builtin.set_fact:
    current_testcase_name: "deploy_vm_ova"

# OVA file on local machine
- name: "Get OVA path and file name"
  ansible.builtin.set_fact:
    vm_ova_path: "{{ ova_path | realpath }}"
    vm_ova_name: "{{ ova_path | basename }}"
  when: ova_nfs_server_path is undefined or not ova_nfs_server_path

# OVA file on NFS server
- name: "Get OVA path and file name after mounting NFS storage at local"
  when: ova_nfs_server_path is defined and ova_nfs_server_path
  block:
    - name: "Mount NFS storage at local"
      include_tasks: ../../common/mount_nfs_storage_local.yml
      vars:
        nfs_server_path: "{{ ova_nfs_server_path }}"
    - name: "Get OVA path and file name"
      ansible.builtin.set_fact:
        vm_ova_path: "{{ nfs_mount_dir }}/{{ ova_path }}"
        vm_ova_name: "{{ ova_path | basename }}"
# Check OVA file exists
- name: "Check for {{ vm_ova_path }} existence"
  ansible.builtin.stat:
    path: "{{ vm_ova_path }}"
  register: vm_ova_stat
  failed_when: not vm_ova_stat.stat.exists

- name: "Deploy a new VM from OVA"
  include_tasks: ../../common/ovf_deploy.yml
  vars:
    ovf_path: "{{ vm_ova_path }}"
    ovf_vm_name: "{{ vm_name }}"
    deploy_datastore: "{{ datastore }}"

- name: "Set fact of vm_exists to True"
  ansible.builtin.set_fact:
    vm_exists: true

# Take a snapshot after OVA deploy
# Reconfiguration must be performed at VM first time boot
- name: "Set fact of the base snapshot name"
  ansible.builtin.set_fact:
    base_snapshot_for_reconfig: "FreshDeployedFromOVA"

- name: "Take snapshot after OVA deployment"
  include_tasks: ../../common/vm_take_snapshot.yml
  vars:
    snapshot_name: "{{ base_snapshot_for_reconfig }}"

- name: "Collect OVA configs"
  include_tasks: "../../common/collect_ovf_vm_config.yml"
  vars:
    ovf_vm_hardware_config_path: "{{ current_test_log_folder }}"

- name: "Get VM info"
  include_tasks: ../../common/vm_get_vm_info.yml

- name: "Try to get OS type from guest info"
  include_tasks: get_ova_guest_os_type.yml

# Revert to snapshot "FreshDeployedFromOVA" to
# proceed the following tasks so that VM's reconfiguration can be
# performed at the first time boot.
- name: "Revert to snapshot '{{ base_snapshot_for_reconfig }}' for VM reconfig"
  include_tasks: ../../common/vm_revert_snapshot.yml
  vars:
    snapshot_name: "{{ base_snapshot_for_reconfig }}"

# Upgrade VM hardware version
# Note:
# Known issue on Ubuntu cloud image OVA deployed VM, after upgrade hardware version,
# VM will hang during booting, tracked in this issue:
# https://bugs.launchpad.net/cloud-images/+bug/1898871
- name: "Upgrade VM's hardware version to {{ hardware_version }}"
  include_tasks: upgrade_ova_vm_hwv.yml
  when:
    - hardware_version is defined
    - (hardware_version == "latest" or
       (vm_hardware_version_num | int < hardware_version | int))

# Add serial port for collecting messages
- name: "Add a serial port for VM"
  include_tasks: ../../common/vm_add_serial_port.yml

- name: "Reconfigure VM with cloud-init"
  include_tasks: reconfigure_vm_with_cloudinit.yml
  when: ova_guest_os_type in ['photon', 'ubuntu', 'amazon']

- name: "Reconfigure VM with Ignition"
  include_tasks: reconfigure_vm_with_ignition.yml
  when: ova_guest_os_type in ['flatcar', 'rhcos']

- name: "Warning about unknown guest OS type"
  ansible.builtin.debug:
    msg: >-
      WARNING: The guest OS type of the OVA doesn't match known guest OS type for
      reconfiguration. Please add it if needed or the following tests might fail.
  when: ova_guest_os_type == 'unknown'

- name: "Shutdown guest OS"
  include_tasks: ../utils/shutdown.yml

- name: "Collect serial port log before removing serial port"
  include_tasks: collect_serial_port_log.yml

- name: "Remove serial port from VM"
  include_tasks: ../../common/vm_remove_serial_port.yml

# The workaround "Remove CDROM" for issue: https://bugs.launchpad.net/cloud-init/+bug/1992509
- name: "Remove existing CDROMs"
  include_tasks: ../../common/vm_configure_cdrom.yml
  vars:
    cdrom_type: client
    cdrom_controller_type: "{{ vm_cdrom.controller_label.split()[0] | lower }}"
    cdrom_controller_num: "{{ vm_cdrom.bus_num }}"
    cdrom_unit_num: "{{ vm_cdrom.unit_num }}"
    cdrom_state: absent
  with_items: "{{ vm_existing_cdrom_list }}"
  loop_control:
    loop_var: vm_cdrom
  when:
    - guest_os_ansible_distribution == "Ubuntu"
    - vm_existing_cdrom_list is defined
    - vm_existing_cdrom_list | length > 0

- name: "Power on VM"
  include_tasks: ../../common/vm_set_power_state.yml
  vars:
    vm_power_state_set: 'powered-on'

- name: "Wait for VM's guest full name is displayed in guest info"
  include_tasks: ../../common/vm_wait_guest_fullname.yml

- name: "Update VM's guest IP after reset"
  include_tasks: ../../common/update_inventory.yml
  vars:
    update_inventory_timeout: 300
