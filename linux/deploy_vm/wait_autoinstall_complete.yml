# Copyright 2025 VMware, Inc.
# SPDX-License-Identifier: BSD-2-Clause
---
# Wait for autoinstall is completed successfully
#
# Check Secure Boot is successful
- name: "Check 'Image APPROVED' in vmware.log when VM secure boot is enabled"
  include_tasks: ../../common/vm_wait_log_msg.yml
  vars:
    vm_wait_log_name: "vmware.log"
    vm_wait_log_msg: "SECUREBOOT: Image APPROVED"
    vm_wait_log_retries: 10
    vm_wait_log_hide_output: false
  when:
    - firmware == 'efi'
    - secureboot_enabled

# Check autoinstall start message
- name: "Wait for autoinstall start message"
  when:
    - unattend_installer
    - autoinstall_start_msg
  block:
    # FreeBSD autoinstall start message is printed in the post-install script,
    # and Ubuntu-Subiquity installer prints start message after cloud-init loading,
    # they appears much later than other OS
    - name: "Set fact of retries for waiting autoinstall start message"
      ansible.builtin.set_fact:
        retries_wait_start_msg: >-
          {%- if unattend_installer == 'FreeBSD' -%}300
          {%- elif unattend_installer == 'Ubuntu-Subiquity' -%}150
          {%- else -%}20
          {%- endif -%}

    - name: "Wait autoinstall start message appear in serial port file"
      include_tasks: ../../common/vm_wait_log_msg.yml
      vars:
        vm_wait_log_name: "{{ vm_serial_file_name }}"
        vm_wait_log_msg: "{{ autoinstall_start_msg }}"
        vm_wait_log_retries: "{{ retries_wait_start_msg }}"
        vm_wait_log_delay: 10

# Detect IPv4 address as early as we can
- name: "Wait for guest OS obtained IPv4 address"
  when:
    - unattend_installer
    - autoinstall_ipv4_msg
  block:
    # The IPv4 address message is printed after start message for 'Ubuntu-Subiquity', 'FreeBSD' and 'Agama',
    # so they need less timeout. The other OS installer prints it in the post-install script, and
    # they need longer timeout.
    - name: "Set facts of retries for waiting IPv4 message"
      ansible.builtin.set_fact:
        retries_wait_ipv4_msg: "{{ 10 if unattend_installer in ['Ubuntu-Subiquity', 'FreeBSD', 'Agama'] else 150 }}"

    - name: "Wait for IPv4 address message appear in serial port file"
      include_tasks: ../../common/vm_wait_log_msg.yml
      vars:
        vm_wait_log_name: "{{ vm_serial_file_name }}"
        vm_wait_log_msg: "{{ autoinstall_ipv4_msg }}[^\\r\\n]*"
        vm_wait_log_retries: "{{ retries_wait_ipv4_msg }}"
        vm_wait_log_delay: 10

    - name: "Get guest OS IPv4 address from serial port log"
      ansible.builtin.set_fact:
        autoinstall_ipv4_addr: >-
          {{
            vm_wait_log_msg_list |
            map('replace', autoinstall_ipv4_msg, '') |
            map('trim') |
            ansible.utils.ipaddr('address')
          }}

    - name: "Check VM obtains IPv4 address"
      ansible.builtin.assert:
        that:
          - autoinstall_ipv4_addr
          - autoinstall_ipv4_addr | length > 0
          - autoinstall_ipv4_addr[0] is ansible.utils.ipv4
        fail_msg: "Autoinstall failed due to no IPv4 address obtained."
        success_msg: "VM obtained IPv4 address during autoinstall: {{ autoinstall_ipv4_addr | first | default('') }}"

# For SLES/SLED/openSUSE, OS installation with BIOS firmware, send key to boot
# screen to start new installation instead of booting from local
- name: "Select boot menu for SUSE"
  include_tasks: ../../common/vm_guest_send_key.yml
  vars:
    keys_send:
      - DOWNARROW
      - ENTER
  when:
    - unattend_installer in ['SLE', 'openSUSE']
    - firmware == "bios"

# For RHEL, Fedora or RHEL-like OS, send key to boot screen to skip
# disk check and start installation directly.
- name: "Select boot menu for RHEL or Fedora family OS"
  include_tasks: ../../common/vm_guest_send_key.yml
  vars:
    keys_send:
      - UPARROW
      - ENTER
  when:
    - unattend_installer in ['RHEL', 'CentOS', 'Fedora', 'BCLinux', 'BCLinux-for-Euler', 'FusionOS']

# For UnionTech OS, send key to boot screen
- name: "Select boot menu for UnionTech OS"
  include_tasks: ../../common/vm_guest_send_key.yml
  vars:
    keys_send:
      - ENTER
  when: unattend_installer == 'UOS'

# Wait autoinstall complete message
- name: "Wait autoinstall complete message appear in serial port output file"
  include_tasks: ../../common/vm_wait_log_msg.yml
  vars:
    vm_wait_log_name: "{{ vm_serial_file_name }}"
    vm_wait_log_msg: "{{ autoinstall_complete_msg }}"
    vm_wait_log_retries: "{{ 50 if unattend_installer == 'FreeBSD' else 150 }}"
    vm_wait_log_delay: 30
