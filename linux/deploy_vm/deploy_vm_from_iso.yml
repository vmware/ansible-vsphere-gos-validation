# Copyright 2021-2024 VMware, Inc.
# SPDX-License-Identifier: BSD-2-Clause
---
# Deploy a new VM and install guest OS automatically from an ISO image
#
# Initialize undefined variables
- name: "Initialize variables for new VM settings"
  ansible.builtin.set_fact:
    boot_disk_controller: "{{ boot_disk_controller if (boot_disk_controller is defined and boot_disk_controller) else 'paravirtual' }}"
    firmware: "{{ firmware if (firmware is defined and firmware) else 'efi' }}"
    network_adapter_type: "{{ network_adapter_type if (network_adapter_type is defined and network_adapter_type) else 'vmxnet3' }}"
    vm_video_memory_mb: ""
    autoinstall_complete_msg: "Autoinstall is completed."
    unattend_installer: ""

- name: "Set CPU number to {{ cpu_cores_per_socket }}"
  ansible.builtin.set_fact:
    cpu_number: "{{ cpu_cores_per_socket }}"
  when:
    - cpu_number is undefined or not cpu_number
    - cpu_cores_per_socket is defined and cpu_cores_per_socket

# Installing FreeBSD 32bit on lsilogic/lsilogicsas/nvme disk will
# fail when memory size >= 4 GB
- name: "Set the fact of memory size for the new VM"
  ansible.builtin.set_fact:
    vm_memory_mb: |-
      {%- if guest_id is match('freebsd\\d+Guest') and
       boot_disk_controller in ['lsilogic', 'lsilogicsas', 'nvme'] -%}
      {{ [3072, memory_mb | default(4096) | int ] | min }}
      {%- else -%}
      {{ memory_mb | default(4096) | int  }}
      {%- endif -%}

- name: "Update test case name for deploying VM from ISO image"
  ansible.builtin.set_fact:
    current_testcase_name: "deploy_vm_{{ firmware }}_{{ boot_disk_controller }}_{{ network_adapter_type }}"

- name: "Get OS installation ISO file list"
  include_tasks: ../../common/get_iso_file_list.yml

- name: "Prepare for Ubuntu installation"
  when: guest_id is match('ubuntu.*')
  block:
    - name: "Check upgrade_kernel_version when upgrade_kernel_version is defined"
      when: upgrade_kernel_version is defined and upgrade_kernel_version
      block:
        - name: "Set the base url for kernel version check"
          ansible.builtin.set_fact:
            mainline_kernel_url: "https://kernel.ubuntu.com/mainline"
        - name: "Check the kernel version exists"
          include_tasks: ubuntu/get_mainline_kernel.yml
    - name: "Prepare for Ubuntu installation"
      include_tasks: ubuntu/prepare_ubuntu_iso_install.yml

- name: "Set default unattend install conf file"
  when: unattend_install_conf is undefined or not unattend_install_conf
  block:
    - name: "Set default unattend install conf file for VMware Photon OS"
      ansible.builtin.set_fact:
        unattend_install_conf: "Photon/ks.cfg"
      when: guest_id == 'vmwarePhoton64Guest'

    - name: "Set default unattend install conf file for Debian"
      ansible.builtin.set_fact:
        unattend_install_conf: "Debian/10/preseed.cfg"
      when: guest_id is match("debian1\\d+")

- name: "Display warning message about undefined unattend_install_conf"
  ansible.builtin.debug:
    msg: "unattend_install_conf is not defined or set to a file path, will not generate unattend ISO file"
  when: unattend_install_conf is undefined or not unattend_install_conf

- name: "Generate unattend install ISO file"
  include_tasks: create_unattend_install_iso.yml
  when: unattend_install_conf is defined and unattend_install_conf

- name: "Compose VM CDROMs to mount OS install ISO files"
  include_tasks: ../../common/compose_vm_cdroms.yml

- name: "Create a new VM with boot disk of controller type {{ boot_disk_controller }}"
  include_tasks: ../../common/vm_create.yml
  vars:
    memory_mb: "{{ vm_memory_mb }}"

- name: "Get VM info"
  include_tasks: ../../common/vm_get_vm_info.yml

- name: "Set fact of vm_exists to True"
  ansible.builtin.set_fact:
    vm_exists: true

- name: "Add a serial port to monitor autoinstall process"
  include_tasks: ../../common/vm_add_serial_port.yml

- name: "Set fact of VM video memory size in MB for {{ unattend_installer }}"
  ansible.builtin.set_fact:
    vm_video_memory_mb: 8
  when:
    - unattend_installer in ['RHEL', 'SLE', 'Ubuntu-Ubiquity', 'Ubuntu-Subiquity']
    - unattend_install_conf | lower is not search('minimal|server_without_gui|ubuntu/server')

- name: "Set video memory size"
  when: vm_video_memory_mb
  block:
    - name: "Get VM's video card info"
      include_tasks: ../../common/vm_get_video_card.yml

    - name: "Get VM default video memory size"
      ansible.builtin.set_fact:
        vm_default_video_memory_mb: "{{ (vm_video_card_facts.instance.video_memory | int) / 1024 }}"

    - name: "Increase VM's video card memory to 8 MB in case desktop can't be loaded"
      include_tasks: ../../common/vm_set_video_card.yml
      vars:
        video_memory_mb: "{{ vm_video_memory_mb }}"
      when: vm_default_video_memory_mb | int < vm_video_memory_mb | int

- name: "Config VM with UEFI firmware"
  when: firmware | lower == 'efi'
  block:
    - name: "Enable secure boot on VM"
      include_tasks: ../../common/vm_set_boot_options.yml
      vars:
        secure_boot_enabled_set: true
      when:
        - secureboot_enabled is defined
        - secureboot_enabled | bool

    - name: "Handle virtual TPM device"
      when:
        - virtual_tpm is defined
        - virtual_tpm | bool
      block:
        - name: "Add key provider on vCenter server"
          include_tasks: ../../common/vcenter_add_key_provider.yml
          vars:
            vc_cert_path: "{{ current_test_log_folder }}"
          when: key_provider_type is defined and key_provider_type

        - name: "Add virtual TPM device to VM" 
          include_tasks: ../../common/vm_add_remove_vtpm.yml
          vars:
            vtpm_operation: 'present'

- name: "Power on VM"
  include_tasks: ../../common/vm_set_power_state.yml
  vars:
    vm_power_state_set: 'powered-on'

- name: "Sleep 5 seconds to wait boot screen display"
  ansible.builtin.pause:
    seconds: 5

- name: "Check 'Image APPROVED' in vmware.log when VM secure boot is enabled"
  include_tasks: ../../common/vm_wait_log_msg.yml
  vars:
    vm_wait_log_name: "vmware.log"
    vm_wait_log_msg: "SECUREBOOT: Image APPROVED"
    vm_wait_log_retries: 10
    vm_wait_log_ignore_errors: false
    vm_wait_log_hide_output: false
  when:
    - firmware | lower == 'efi'
    - secureboot_enabled is defined and secureboot_enabled

- name: "Wait autoinstall start message appear in serial port file"
  include_tasks: ../../common/vm_wait_log_msg.yml
  vars:
    vm_wait_log_name: "{{ vm_serial_file_name }}"
    vm_wait_log_msg: "{{ autoinstall_start_msg }}"
    vm_wait_log_delay: 10
    vm_wait_log_retries: 10
  when:
    - unattend_installer
    - unattend_installer != 'Ubuntu-Subiquity'
    - autoinstall_start_msg is defined
    - autoinstall_start_msg

- name: "Install Ubuntu OS"
  include_tasks: ubuntu/ubuntu_install_os.yml
  when: guest_id is match('ubuntu.*')

# For SLES, OS installation with BIOS firmware, send key to boot
# screen to start new installation instead of booting from local
- name: "Select boot menu for SLES/SLED"
  include_tasks: ../../common/vm_guest_send_key.yml
  vars:
    keys_send:
      - DOWNARROW
      - ENTER
  when:
    - unattend_installer in ['SLE', 'openSUSE']
    - firmware | lower == "bios"

# For RHEL, Fedora or RHEL-like OS, send key to boot screen to skip
# disk check and start installation directly.
- name: "Select boot menu for RHEL or Fedora family OS"
  include_tasks: ../../common/vm_guest_send_key.yml
  vars:
    keys_send:
      - UPARROW
      - ENTER
  when:
    - unattend_installer in ['RHEL', 'CentOS', 'Fedora', 'BCLinux', 'BCLinux-for-Euler', 'FusionOS']

# For UnionTech OS, send key to boot screen
- name: "Select boot menu for UnionTech OS"
  include_tasks: ../../common/vm_guest_send_key.yml
  vars:
    keys_send:
      - ENTER
  when: unattend_installer == 'UOS'

- name: "Wait autoinstall complete message appear in serial port output file"
  include_tasks: ../../common/vm_wait_log_msg.yml
  vars:
    vm_wait_log_name: "{{ vm_serial_file_name }}"
    vm_wait_log_msg: "{{ autoinstall_complete_msg }}"
    vm_wait_log_delay: 30
    vm_wait_log_retries: 120

# For only ESXi managed VM, its MAC address is generated after power on
# not at VM creation
- name: "Get VM's primary network adapter MAC address"
  include_tasks: ../../common/vm_wait_primary_nic_mac.yml

# VMware Photon OS kickstart file can't add shutdown action,
# so here needs to shutdown it separately
- name: "Shutdown VMware Photon OS VM after auto install completes"
  when: unattend_installer == 'Photon'
  block:
    - name: "Wait for guest full name on VMware Photon OS VM"
      include_tasks: ../../common/vm_wait_guest_fullname.yml
      vars:
        vm_get_fullname_timeout: 600

    - name: "Get guest IP address"
      include_tasks: ../../common/update_inventory.yml
      vars:
        update_inventory_timeout: 300

    - name: "Shutdown guest OS to remove serial port"
      include_tasks: ../utils/shutdown.yml

- name: "Wait for VM being powered off"
  include_tasks: ../../common/vm_wait_power_state.yml
  vars:
    expected_power_status: 'poweredOff'
    wait_power_state_timeout: 900

- name: "Delete unattend install ISO from ESXi datastore"
  include_tasks: delete_unattend_install_iso.yml
  when:
    - transferred_unattend_iso_list is defined
    - transferred_unattend_iso_list

- name: "Change the boot disk to be first boot device in boot order"
  include_tasks: ../../common/vm_set_boot_options.yml
  vars:
    boot_order_list: ['disk']
  when: unattend_installer is match('Ubuntu.*')

- name: "Collect serial port log before removing serial port"
  include_tasks: collect_serial_port_log.yml

- name: "Remove serial port"
  include_tasks: ../../common/vm_remove_serial_port.yml

- name: "OS auto install is completed. Power on VM now"
  include_tasks: ../../common/vm_set_power_state.yml
  vars:
    vm_power_state_set: 'powered-on'

- name: "Wait for guest full name is collected"
  include_tasks: ../../common/vm_wait_guest_fullname.yml
  vars:
    vm_get_fullname_timeout: 600
  when:
    - unattend_install_conf is defined
    - unattend_install_conf | lower is not match('.*(minimal|server_without_gui|bclinux-for-euler|fusionos|kylin/server/10).*')

- name: "Get VM guest IPv4 address and add to in-memory inventory"
  include_tasks: ../../common/update_inventory.yml
  vars:
    update_inventory_timeout: 600

- name: "Get Linux system info"
  include_tasks: ../utils/get_linux_system_info.yml

- name: "Wait for guest OS service is ready"
  when:
    - guest_os_with_gui is defined
    - (guest_os_family in ["RedHat", "Suse"] or
       guest_os_ansible_distribution in ["Ubuntu", "Debian"])
  block:
    # For SLE, RHEL8/CentOS8/OracleLinux8 with desktop: display-manager
    # service running at the end of installation to wait user login.
    # Otherwise, systemd-logind service running at the end of installaiton
    # to wait user login
    - name: "Set fact of service name for waiting at first time of OS boot"
      ansible.builtin.set_fact:
        wait_service_name: |-
          {%- if guest_os_with_gui -%}display-manager
          {%- else -%}systemd-logind
          {%- endif -%}

    - name: "Wait for service {{ wait_service_name }} is running"
      include_tasks: ../utils/wait_for_service_status.yml
      vars:
        service_name: "{{ wait_service_name }}"
        wait_service_status: "running"

- name: "Upgrade kernel for {{ guest_os_ansible_distribution }} {{ guest_os_ansible_distribution_ver }}"
  include_tasks: upgrade_vm_kernel.yml
  when: >
    ((upgrade_kernel_version is defined and upgrade_kernel_version and 
    guest_os_ansible_distribution == "Ubuntu") or
    (guest_os_ansible_distribution == "OracleLinux" and
    guest_os_ansible_distribution_ver == "9.0" and
    "'uek' in guest_os_ansible_kernel"))
