# Copyright 2021-2024 VMware, Inc.
# SPDX-License-Identifier: BSD-2-Clause
---
# Description:
#   This test case is used for check VM secure boot can be enabled
# and disabled successfully when VM firmware is UEFI and VM hardware
# version >= 13.
# Note: This test case will not check if target guest OS supports
# secure boot before enable it, please refer to VMware KB article for
# secure boot support matrix.
#
- name: secureboot_enable_disable
  hosts: localhost
  gather_facts: false
  tasks:
    - name: "Test case block"
      block:
        - name: "Skip test case '{{ ansible_play_name }}' for {{ vm_firmware }} VM"
          include_tasks: ../../common/skip_test_case.yml
          vars:
            skip_msg: "Secure boot is not applicable for VM with {{ vm_firmware }} firmware"
            skip_reason: "Not Applicable"
          when: vm_firmware | lower != "efi"

        - name: "Skip test case for hardware version lower than 13"
          include_tasks: ../../common/skip_test_case.yml
          vars:
            skip_msg: >-
              Skip test case {{ ansible_play_name }} because secure boot is not supported
              on VM with hardware version {{ vm_hardware_version_num }}.
            skip_reason: "Not Supported"
          when: vm_hardware_version_num | int < 13

        - name: "Test setup"
          include_tasks: ../setup/test_setup.yml
          vars:
            create_test_log_folder: true

        - name: "Skip test case"
          include_tasks: ../../common/skip_test_case.yml
          vars:
            skip_msg: >-
              Skip test case {{ ansible_play_name }} because secure boot is not supported
              for {{ vm_guest_os_distribution }} guest OS on ARM ESXi host.
            skip_reason: "Not Supported"
          when:
            - esxi_cpu_vendor == 'arm'
            - (guest_os_ansible_distribution == "VMware Photon OS" and guest_os_ansible_distribution_ver is version('5.0', '<=')) or
              (guest_os_ansible_distribution == "RedHat" and (guest_os_ansible_distribution_ver is version('9.6', '<=') or
              guest_os_ansible_distribution_ver == "10.0"))

        - name: "Check secure boot is supported or not"
          include_tasks: check_secureboot_support_status.yml

        - name: "Initialize test result variables"
          ansible.builtin.set_fact:
            secureboot_enabled_pass: false
            secureboot_disabled_pass: false

        - name: "Shutdown guest OS"
          include_tasks: ../utils/shutdown.yml

        - name: "Enable secure boot for VM"
          include_tasks: ../../common/vm_set_boot_options.yml
          vars:
            secure_boot_enabled_set: true

        - name: "Check secure boot is enabled on VM"
          ansible.builtin.assert:
            that:
              - boot_facts.vm_boot_info.current_secure_boot_enabled is defined
              - boot_facts.vm_boot_info.current_secure_boot_enabled
            fail_msg: "Failed to enable secure boot on VM"
            success_msg: "Successfully enabled secure boot on VM"

        - name: "Power on VM"
          include_tasks: ../../common/vm_set_power_state.yml
          vars:
            vm_power_state_set: 'powered-on'

        - name: "Update inventory"
          include_tasks: ../../common/update_inventory.yml

        - name: "Check VM image is approved in vmware.log when secure boot is enabled"
          include_tasks: ../../common/vm_wait_log_msg.yml
          vars:
            vm_wait_log_name: "vmware.log"
            vm_wait_log_msg: "Image APPROVED"
            vm_wait_log_retries: 1
            vm_wait_log_ignore_errors: true

        - name: "Not found 'Image APPROVED' in vmware.log"
          ansible.builtin.fail:
            msg: >-
              Test failed because there is no keyword 'Image APPROVED' in VM's
              vmware.log when secure boot is enabled
          when: not vm_wait_log_msg_success

        - name: "Check secure boot state in guest OS after secure boot is enabled"
          include_tasks: check_secureboot_state.yml
          vars:
            vm_secureboot_state: "enabled"

        # Disable secureboot
        - name: "Shutdown guest OS"
          include_tasks: ../utils/shutdown.yml

        - name: "Disable secure boot for VM"
          include_tasks: ../../common/vm_set_boot_options.yml
          vars:
            secure_boot_enabled_set: false

        - name: "Check secure boot is disabled on VM"
          ansible.builtin.assert:
            that:
              - boot_facts.vm_boot_info.current_secure_boot_enabled is defined
              - not boot_facts.vm_boot_info.current_secure_boot_enabled
            fail_msg: "Failed to disable secure boot on VM"
            success_msg: "Successfully disabled secure boot on VM"

        - name: "Power on VM after disabling secure boot"
          include_tasks: ../../common/vm_set_power_state.yml
          vars:
            vm_power_state_set: 'powered-on'

        - name: "Update inventory"
          include_tasks: ../../common/update_inventory.yml

        - name: "Check secure boot state in guest OS after secure boot is disabled"
          include_tasks: check_secureboot_state.yml
          vars:
            vm_secureboot_state: "disabled"
      rescue:
        - name: "Collect Linux guest OS information for triage"
          include_tasks: ../setup/linux_test_rescue.yml

        - name: "Test case failure"
          include_tasks: ../../common/test_rescue.yml
          vars:
            extract_screenshot_text: true
