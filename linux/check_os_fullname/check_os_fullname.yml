# Copyright 2021-2024 VMware, Inc.
# SPDX-License-Identifier: BSD-2-Clause
---
# Description:
#   This test case is used for check VM guest OS fullname is reported correctly
# in guest info through VMware tools. When VMware tools is not installed or not
# running in VM, this test case result is 'Blocked'.
#
- name: check_os_fullname
  hosts: localhost
  gather_facts: false
  tasks:
    - name: "Test case block"
      block:
        - name: "Test setup"
          include_tasks: ../setup/test_setup.yml
          vars:
            skip_test_no_vmtools: true

        # From Flatcar 3760.2.0, /etc/vmware-tools became a read-only file system, which is
        # not writable. So here won't enable VMware Tools logging for Flatcar 3760.2.0 or later
        - name: "Enable VMware Tools logging"
          when: >-
            not (guest_os_ansible_distribution == 'Flatcar' and
                 guest_os_ansible_distribution_ver is version('3760.2.0', '>='))
          block:
            - name: "Set VMware Tools debug logging directory"
              ansible.builtin.set_fact:
                vmtools_log_dir: "/tmp/vmware-tools-{{ lookup('pipe', 'date +%Y%m%d%H%M%S') }}"

            - name: "Enable debug logging for VMware Tools"
              include_tasks: ../utils/enable_vmtools_logging.yml

        - name: "Set VMware Tools config file for Flatcar {{ guest_os_ansible_distribution_ver }}"
          ansible.builtin.set_fact:
            vmtools_config_file: "/etc/vmware-tools/tools.conf"
          when:
            - guest_os_ansible_distribution == 'Flatcar'
            - guest_os_ansible_distribution_ver is version('3760.2.0', '>=')

        - name: "Get ESXi hardware versions"
          include_tasks: ../../common/esxi_get_hardware_versions.yml

        # guestinfo_latest_hw_version is the hardware version containing latest guest ids on the ESXi server
        # vm_base_hw_version is the hardware version of VM at base snapshot
        # vm_current_hw_version is the hardware version of VM at present and will be updated after upgrading
        # hardware version
        # vm_compatible_hw_versions is a list of hardware versions which VM is compatible with
        - name: "Set facts of hardware versions for checking VM guest info"
          ansible.builtin.set_fact:
            guestinfo_latest_hw_version: "{{ 22 if esxi_version is version('8.0.3', '==') else esxi_latest_hardware_version }}"
            vm_base_hw_version: "{{ vm_hardware_version_num }}"
            vm_current_hw_version: "{{ vm_hardware_version_num }}"
            vm_compatible_hw_versions: "{{ esxi_hardware_versions | select('>=', vm_hardware_version_num | int) }}"

        - name: "Get supported guest ids on ESXi {{ esxi_version }}"
          include_tasks: ../../common/esxi_get_guest_ids.yml
          vars:
            esxi_hardware_version: "{{ guestinfo_latest_hw_version }}"

        - name: "Initialize facts about VM expected guest info"
          ansible.builtin.set_fact:
            expected_guest_id: ""
            expected_guest_fullname: ""
            expected_guest_family: ""
            guest_is_otherlinux: false

        - name: "Get guest short-name config from {{ vmtools_config_file }}"
          ansible.builtin.shell: |
            grep '^ *short-name *=' {{ vmtools_config_file }} | cut -d  '=' -f 2 | tr -d '[[:blank:]]'
          ignore_errors: True
          register: get_shortname_result
          delegate_to: "{{ vm_guest_ip }}"

        - name: "Set fact of guest OS short-name config"
          ansible.builtin.set_fact:
            guest_short_name: "{{ get_shortname_result.stdout | default('') }}"

        - name: "Match guest id for {{ vm_guest_os_distribution }}"
          include_tasks: match_guest_id.yml

        - name: "Set VM expected guest full name from guest id {{ expected_guest_id }}"
          include_tasks: map_guest_id_to_fullname.yml

        - name: "Set facts of VM expected guest family and VM configured guest family"
          ansible.builtin.set_fact:
            expected_guest_family: |-
              {%- if expected_guest_id is match('freebsd.*') -%}otherGuestFamily
              {%- else -%}linuxGuest{%- endif -%}
            vm_guest_family: |-
              {%- if vm_guest_id is match('freebsd.*') -%}otherGuestFamily
              {%- else -%}linuxGuest{%- endif -%}

        - name: "Validate guest id, full name and family in guest info for compatible hardware versions"
          include_tasks: validate_os_fullname.yml
          with_items: "{{ vm_compatible_hw_versions }}"
          loop_control:
            loop_var: vm_compatible_hw_version

      rescue:
        - name: "Test rescue"
          include_tasks: ../../common/test_rescue.yml
      always:
        - name: "Collect VMware Tools logs"
          include_tasks: ../utils/collect_vmtools_logs.yml

        - name: "Revert to base snapshot to downgrade VM hardware version and update VM info"
          when:
            - vm_base_hw_version | default('')
            - vm_current_hw_version | default('')
            - vm_current_hw_version | int > vm_base_hw_version | int
          block:
            - name: "Revert to base snapshot"
              include_tasks: ../../common/vm_revert_snapshot.yml
              vars:
                snapshot_name: "{{ base_snapshot_name }}"

            # FreeBSD VM's base snapshot is in powered off state
            - name: "Power on FreeBSD VM and get VM guest IP"
              include_tasks: ../../common/update_inventory.yml
              when: guest_os_ansible_distribution == "FreeBSD"

            - name: "Update VM info"
              include_tasks: ../../common/vm_get_vm_info.yml

            - name: "Update VM guest info"
              include_tasks: ../../common/vm_get_guest_info.yml
