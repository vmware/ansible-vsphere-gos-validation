# Copyright 2021-2024 VMware, Inc.
# SPDX-License-Identifier: BSD-2-Clause
---
- name: "Initilize facts of guest OS resolvectl command and DNS configuration check results"
  ansible.builtin.set_fact:
    guest_resolvectl_cmd: "/usr/bin/resolvectl"
    dns_servers_success: false
    dns_suffix_success: false
    guest_dns_servers: []
    guest_dns_search: []

- name: "Test '{{ guest_resolvectl_cmd }} status' command in guest OS"
  include_tasks: ../../common/vm_shell_in_guest.yml
  vars:
    vm_shell_cmd: "{{ guest_resolvectl_cmd }}"
    vm_shell_args: "status"
    vm_shell_out: "/tmp/resolvectl_status.txt"

- name: "Set fact of '{{ guest_resolvectl_cmd }} status' command result"
  ansible.builtin.set_fact:
    resolvectl_status_result: "{{ vm_shell_result.exit_code is defined and vm_shell_result.exit_code == 0 }}"

# Guest OS has /usr/bin/resolvectl command
- name: "Get DNS servers and search domains for {{ guest_os_ansible_distribution }}"
  when: resolvectl_status_result
  block:
    - name: "Fetch the output file of '{{ guest_resolvectl_cmd }} status'"
      include_tasks: ../../common/vm_guest_file_operation.yml
      vars:
        operation: "fetch_file"
        src_path: "/tmp/resolvectl_status.txt"
        dest_path: "{{ current_test_log_folder }}/resolvectl_status.txt"

    - name: "Run command '{{ guest_resolvectl_cmd }} dns' to get DNS servers"
      include_tasks: ../../common/vm_shell_in_guest.yml
      vars:
        vm_shell_cmd: "{{ guest_resolvectl_cmd }}"
        vm_shell_args: "dns"
        vm_shell_out: "/tmp/resolvectl_dns.txt"

    - name: "Set fact of '{{ guest_resolvectl_cmd }} dns' command result"
      ansible.builtin.set_fact:
        resolvectl_dns_result: "{{ vm_shell_result.exit_code is defined and vm_shell_result.exit_code == 0 }}"

    - name: "Get DNS servers for {{ guest_os_ansible_distribution }}"
      when: resolvectl_dns_result
      block:
        - name: "Fetch the output file of '{{ guest_resolvectl_cmd }} dns'"
          include_tasks: ../../common/vm_guest_file_operation.yml
          vars:
            operation: "fetch_file"
            src_path: "/tmp/resolvectl_dns.txt"
            dest_path: "{{ current_test_log_folder }}/resolvectl_dns.txt"

        - name: "Set fact of DNS servers for {{ guest_os_ansible_distribution }}"
          ansible.builtin.set_fact:
            guest_dns_servers: "{{ lookup('file', current_test_log_folder ~ '/resolvectl_dns.txt') | regex_search('link[^:]*:[\\d\\s\\.]+', ignorecase=True) | regex_findall('\\b(?:\\d{1,3}\\.){3}\\d{1,3}\\b') }}"

    - name: "Run command '{{ guest_resolvectl_cmd }} domain' to get DNS search domains"
      include_tasks: ../../common/vm_shell_in_guest.yml
      vars:
        vm_shell_cmd: "{{ guest_resolvectl_cmd }}"
        vm_shell_args: "domain"
        vm_shell_out: "/tmp/resolvectl_domain.txt"

    - name: "Set fact of '{{ guest_resolvectl_cmd }} domain' command result"
      ansible.builtin.set_fact:
        resolvectl_domain_result: "{{ vm_shell_result.exit_code is defined and vm_shell_result.exit_code == 0 }}"

    - name: "Get DNS search domains for {{ guest_os_ansible_distribution }}"
      when: resolvectl_domain_result
      block:
        - name: "Fetch the output file of '{{ guest_resolvectl_cmd }} domain'"
          include_tasks: ../../common/vm_guest_file_operation.yml
          vars:
            operation: "fetch_file"
            src_path: "/tmp/resolvectl_domain.txt"
            dest_path: "{{ current_test_log_folder }}/resolvectl_domain.txt"

        - name: "Set fact of DNS search domains for {{ guest_os_ansible_distribution }}"
          ansible.builtin.set_fact:
            guest_dns_search: "{{ lookup('file', current_test_log_folder ~ '/resolvectl_domain.txt') | regex_search('link[^:]*:[^:]+', ignorecase=True) | regex_findall('\\b(?:[\\w-]{1,}\\.){1,}[\\w-]{1,}\\b') }}"

# If 'resolvectl' command failed and guest OS is not Ubuntu
# Try to get DNS servers and DNS search domains from /etc/resolv.conf
- name: "Get DNS servers and search domains for {{ guest_os_ansible_distribution }}"
  when:
    - not resolvectl_status_result
    - guest_os_ansible_distribution != 'Ubuntu'
  block:
    # In SLES 15, /etc/resolv.conf is a symbolic link. But after cloud-init GOSC,
    # it will be overwritten to a file. Here we get content in /etc/resolv.conf
    # in case the file is overwritten
    - name: "Dump content of /etc/resolv.conf"
      include_tasks: ../../common/vm_shell_in_guest.yml
      vars:
        vm_shell_cmd: "/usr/bin/cat"
        vm_shell_args: "/etc/resolv.conf"
        vm_shell_out: "/tmp/resolv.conf"

    - name: "Fetch the copy file of /etc/resolv.conf"
      include_tasks: ../../common/vm_guest_file_operation.yml
      vars:
        operation: "fetch_file"
        src_path: "/tmp/resolv.conf"
        dest_path: "{{ current_test_log_folder }}/etc/resolv.conf"

    - name: "Get content of /etc/resolv.conf in guest OS"
      ansible.builtin.set_fact:
        guest_resolv_conf: "{{ lookup('file', current_test_log_folder ~ '/etc/resolv.conf').split('\n') }}"

    - name: "Get DNS servers and search domains from /etc/resolv.conf"
      ansible.builtin.set_fact:
        guest_dns_servers: "{{ guest_resolv_conf | select('match', '^nameserver\\s*') | map('regex_replace', 'nameserver\\s*', '') }}"
        guest_dns_search: "{{ guest_resolv_conf | select('match', '^search\\s*') | join('\\n') | regex_replace('^search\\s*', '') | split() | map('regex_replace', '\\.$', '') }}"

# If 'resolvectl' command failed and guest OS is Ubuntu
# For Ubuntu 18.04.4 or later guest, try to use systemd-resolve command
- name: "Get DNS servers and search domains for {{ guest_os_ansible_distribution }}"
  when:
    - not resolvectl_status_result
    - guest_os_ansible_distribution == 'Ubuntu'
  block:
    - name: "Run command '/usr/bin/systemd-resolve --status' to get DNS servers and search domains"
      include_tasks: ../../common/vm_shell_in_guest.yml
      vars:
        vm_shell_cmd: "/usr/bin/systemd-resolve"
        vm_shell_args: "--status"
        vm_shell_out: "/tmp/systemd_resolve_status.txt"

    - name: "Set fact of '/usr/bin/systemd-resolve --status' command result"
      ansible.builtin.set_fact:
        systemd_resolve_result: "{{ vm_shell_result.exit_code is defined and vm_shell_result.exit_code == 0 }}"

    - name: "Get DNS servers and search domains from systemd-resolve status"
      when: systemd_resolve_result
      block:
        - include_tasks: ../../common/vm_guest_file_operation.yml
          vars:
            operation: "fetch_file"
            src_path: "/tmp/systemd_resolve_status.txt"
            dest_path: "{{ current_test_log_folder }}/systemd_resolve_status.txt"

        - name: "Set fact of guest systemd resolve status"
          ansible.builtin.set_fact:
            guest_resolve_status: "{{ lookup('file', current_test_log_folder ~ '/systemd_resolve_status.txt') | regex_replace('\\n\\s*','\\n') }}"

        - name: "Set fact of DNS servers and search domains from systemd resolve status"
          ansible.builtin.set_fact:
            guest_dns_servers: "{{ guest_resolve_status | regex_search('DNS Servers:\\s*(([0-9]+\\.){3}([0-9]+)\\n?)+') | regex_replace('DNS Servers:\\s*', '') | split('\\n') | reject('equalto', '') }}"
            guest_dns_search: "{{ guest_resolve_status | regex_search('DNS Domain:\\s*(([0-9a-zA-Z_\\-]+\\.){1,}([0-9a-zA-Z_\\-]+)\\n?)+') | regex_replace('DNS Domain:\\s*', '') | split('\\n') | reject('equalto', '') }}"

- name: "Set fact of the expected DNS servers after GOSC"
  ansible.builtin.set_fact:
    expected_dns_servers: "{{ linux_gosc_spec['dns_servers'] }}"

# In cloudint GOSC, the configured DNS servers will be appended to the former DNS servers.
# So if there are already 3 DNS servers before doing cloudinit GOSC, the configured DNS servers will not be set.
# Please refer to this issue: https://bugs.launchpad.net/ubuntu/+source/cloud-init/+bug/1892447
# File: https://github.com/canonical/cloud-init/blob/master/cloudinit/distros/parsers/resolv_conf.py
#
- name: "Get DNS servers and search domains for {{ guest_os_ansible_distribution }}"
  when:
    - dns_servers_before_gosc is defined
    - enable_cloudinit_gosc is defined and enable_cloudinit_gosc
    - linux_gosc_spec['dns_servers'] | difference(guest_dns_servers) | length != 0
  block:
    - name: "Set fact of the combination of DNS servers list before GOSC and the configured list"
      ansible.builtin.set_fact:
        tmp_dns_server_list: "{{ (dns_servers_before_gosc + linux_gosc_spec['dns_servers']) | unique }}"

    - name: "Set fact of the expected DNS servers"
      ansible.builtin.set_fact:
        expected_dns_servers: "{{ dns_servers_before_gosc }}"
      when: tmp_dns_server_list | length == dns_servers_before_gosc | length

    - name: "Set fact of the expected DNS servers"
      ansible.builtin.set_fact:
        expected_dns_servers: "{{ tmp_dns_server_list[:3] if tmp_dns_server_list | length > 3 else tmp_dns_server_list }}"
      when: tmp_dns_server_list | length > dns_servers_before_gosc | length

- name: "Display the expected and actual DNS servers"
  ansible.builtin.debug:
    msg:
      - "The expected DNS servers: {{ expected_dns_servers }}"
      - "The actual DNS servers got in guest: {{ guest_dns_servers }}"

# Check guest DNS servers
- name: "Check guest DNS servers are customized"
  ansible.builtin.set_fact:
    dns_servers_success: "{{ expected_dns_servers | difference(guest_dns_servers) | length == 0 }}"

- name: "Print DNS servers check result"
  ansible.builtin.debug: var=dns_servers_success

- name: "Set GOSC validation result for checking DNS servers"
  include_tasks: set_gosc_validation_result.yml
  vars:
    gosc_check_item: "dns_servers_success"
    gosc_check_error_msg: "VM DNS servers are {{ guest_dns_servers }}, not expected DNS servers {{ linux_gosc_spec['dns_servers'] }}"

# Check guest DNS search domains
- name: "Display the expected and actual DNS search domains"
  ansible.builtin.debug:
    msg:
      - "The expected DNS search domains: {{ linux_gosc_spec['dns_suffix'] }}"
      - "The actual DNS search domains got in guest: {{ guest_dns_search }}"

- name: "Check DNS search domains are customized"
  ansible.builtin.set_fact:
    dns_suffix_success: "{{ linux_gosc_spec['dns_suffix'] | difference(guest_dns_search) | length == 0 }}"

- name: "Print DNS suffix check result"
  ansible.builtin.debug: var=dns_suffix_success

- name: "Set GOSC validation result for checking DNS search domains"
  include_tasks: set_gosc_validation_result.yml
  vars:
    gosc_check_item: "dns_suffix_success"
    gosc_check_error_msg: "VM DNS domain search domains are {{ guest_dns_search }}, not expected search domains {{ linux_gosc_spec['dns_suffix'] }}"
