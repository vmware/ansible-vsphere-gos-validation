# Copyright 2021-2024 VMware, Inc.
# SPDX-License-Identifier: BSD-2-Clause
---
# Will skip this test case when below requirements not meet:
# 1. vCenter server is configured, by default in vars/test.yml,
# 2. VMware tools is installed and running in VM, for cloud-init GOSC VMware tools is installed as open-vm-tools,
# 3. For cloud-init GOSC, cloud-init is installed or can be installed in guest OS with version higher than 18.5,
# 4. Guest OS is not in the not support GOSC list.
#
- name: "Test case block"
  block:
    - name: "Set cloud-init workflow flag"
      ansible.builtin.set_fact:
        enable_cloudinit_gosc: "{% if gosc_workflow  == 'cloud-init' %}True{% else %}False{% endif %}"

    - name: "Test setup"
      include_tasks: ../setup/test_setup.yml
      vars:
        skip_test_no_vmtools: true

    - name: "Check GOSC testing is supported or not"
      include_tasks: check_gosc_support_status.yml

    - name: "Prepare for GOSC testing on VMware Photon OS"
      when: guest_os_ansible_distribution == "VMware Photon OS"
      block:
        # Traditional GOSC in VMware Photon OS is implemented with cloud-init,
        # so will upgrade cloud-init to the latest version in VMware Photon OS
        - name: "Install latest 'cloud-init' packages"
          include_tasks: ../utils/install_uninstall_package.yml
          vars:
            package_list: ["cloud-init"]
            package_state: "latest"

        - name: "Get cloud-init version"
          include_tasks: ../utils/get_cloudinit_version.yml

        # In VMware Photon OS 4.0, open-vm-tools-gosc is provided with GOSC scripts
        # from open-vm-tools 11.3.5
        - name: "Install GOSC required package 'open-vm-tools-gosc-{{ vmtools_version }}'"
          include_tasks: ../utils/install_uninstall_package.yml
          vars:
            package_list: ["open-vm-tools-gosc-{{ vmtools_version }}"]
            package_state: "present"
          when:
            - not enable_cloudinit_gosc | bool
            - guest_os_ansible_distribution_major_ver | int >= 4
            - vmtools_version is defined
            - vmtools_version is version('11.3.5', '>=')

    # Install perl if guest OS doesn't have it
    - name: "Prepare for perl GOSC testing on {{ guest_os_ansible_distribution }}"
      when:
        - not enable_cloudinit_gosc | bool
        - guest_os_family == "RedHat"
      block:
        - name: "Check perl existence"
          ansible.builtin.command: "which perl"
          failed_when: false
          register: which_perl_result
          delegate_to: "{{ vm_guest_ip }}"

        - name: "Install perl"
          when: which_perl_result.rc is undefined or which_perl_result.rc != 0
          block:
            - name: "Set perl package name on {{ guest_os_ansible_distribution }} {{ guest_os_ansible_distribution_ver }}"
              ansible.builtin.set_fact:
                guest_perl_package_name: |-
                  {%- if guest_os_ansible_kernel is version('4.0', '<') -%}perl
                  {%- else -%}perl-interpreter{%- endif -%}

            - name: "Install '{{ guest_perl_package_name }}' for perl GOSC"
              include_tasks: ../utils/install_uninstall_package.yml
              vars:
                package_list: ["{{ guest_perl_package_name }}"]
                package_state: "latest"

    - name: "Prepare for cloud-init GOSC"
      when: enable_cloudinit_gosc
      block:
        - name: "Install 'cloud-init' for cloud-init GOSC on {{ guest_os_ansible_distribution }}"
          include_tasks: ../utils/install_uninstall_package.yml
          vars:
            package_list: ["cloud-init"]
            package_state: "present"
          when: guest_os_ansible_distribution != "VMware Photon OS"

        # Need to install the latest cloud-init to Oracle Linux 8.7, 9.1 and pass the GOSC tests in Ansible
        - name: "Update cloud-init GOSC in OracleLinux 8.7 & 9.1"
          when:
            - guest_os_ansible_distribution == "OracleLinux"
            - guest_os_ansible_distribution_ver in ['8.7', '9.1']
          block:
            - name: "Known issue - failure of cloud-init GOSC in Oracle Linux 8.7 and 9.1"
              ansible.builtin.debug:
                msg:
                  - "Cloud-init guest customization would fail because cloud-init-local.service couldn't start when using cloud-init 22.1-5.0.1."
                  - "The issue has been resolved in cloud-init 22.1-6.0.1. Here will upgrade cloud-init to latest version for resolution."
                  - "Please refer to https://bugzilla.oracle.com/bugzilla/show_bug.cgi?id=18115 for details."
              tags:
                - known_issue

            - name: "Uninstall current cloud-init"
              include_tasks: ../utils/install_uninstall_package.yml
              vars:
                package_list: ["cloud-init"]
                package_state: "absent"

            - name: "Remove /etc/cloud dir before install the latest cloud-init"
              ansible.builtin.shell: |
                if [ -e "/etc/cloud" ] ; then
                  rm -rf "/etc/cloud";
                fi
              delegate_to: "{{ vm_guest_ip }}"

            - name: "Install latest cloud-init version"
              include_tasks: ../utils/install_uninstall_package.yml
              vars:
                package_list: ["cloud-init"]
                package_state: "latest"

        # Check whether cloud-init version meets cloud-init GOSC requirements
        # Debian 10 and 11 cloud-init GOSC requires cloud-init 22.1 or later installed.
        # See https://bugs.debian.org/cgi-bin/bugreport.cgi?bug=1008039
        # For Miracle Linux 8.x and 9.x, cloud-init GOSC requires cloud-init 22.1 or later installed.
        # For other Linux, cloud-init GOSC requires cloud-init 18.5 or later installed.
        # See https://kb.vmware.com/s/article/90331
        - name: "Set fact of cloud-init version for supporting GOSC"
          ansible.builtin.set_fact:
            gosc_required_cloudinit_version: >-
              {% if guest_os_ansible_distribution in ['Debian', 'MIRACLE'] %}22.1{% else %}18.5{% endif %}

        - name: "Get cloud-init version"
          include_tasks: ../utils/get_cloudinit_version.yml

        - name: "Skip test case due to cloud-init version doesn't meet cloud-init GOSC requirements"
          include_tasks: ../../common/skip_test_case.yml
          vars:
            skip_reason: "Not Supported"
            skip_msg: >-
               The guest OS doesn't have required cloud-init (>= {{ gosc_required_cloudinit_version }})
               installed. Skip to run this test case.
          when: >
            (not cloudinit_version) or
            not (cloudinit_version is version(gosc_required_cloudinit_version, '>='))

    - name: "Get guest OS network manager"
      include_tasks: ../utils/get_network_manager.yml
      when: guest_os_network_manager is undefined

    - name: "Get DNS server info before GOSC"
      include_tasks: ../utils/get_system_dns.yml

    - name: "Set fact of the DNS servers in /etc/resolv.conf before GOSC"
      ansible.builtin.set_fact:
        dns_servers_before_gosc: "{{ dns_servers }}"

    - name: "Display DNS servers before GOSC"
      ansible.builtin.debug:
        msg: "DNS servers before GOSC: {{ dns_servers_before_gosc }}"

    # Modify cloud-init GOSC config in guest OS
    - name: "Update cloud-init config for {{ gosc_workflow }} GOSC"
      include_tasks: ../utils/enable_disable_cloudinit_cfg.yml

    - name: "Prepare router VM, vSwitch and portgroup"
      include_tasks: ../../common/network_testbed_setup.yml
      when:
        - router_vm_required | default(false)
        - router_vm_deployed is undefined or not router_vm_deployed | bool

    # Initialize the GOSC spec
    - name: "Initialize the GOS customization spec"
      ansible.builtin.set_fact:
        linux_gosc_spec: {'domain': 'gosc.test.com', 'timezone': "Europe/Berlin", 'dns_suffix': ["test.com", "gosc.test.com"]}

    # Add network settings for static IP guest customization
    - name: "Set GOS customization spec of static IP"
      ansible.builtin.set_fact:
        linux_gosc_spec: "{{ linux_gosc_spec | combine(item) }}"
      loop:
        - {'network': "{{ portgroup_name }}"}
        - {'ip': "192.168.192.101"}
        - {'netmask': "255.255.255.0"}
        - {'gateway': "192.168.192.1"}
        - {'dns_servers': ["192.168.1.1", "192.168.1.2"]}
        - {'hostname': "gosc-static-vm-01"}
        - {'hwclockUTC': false}
      when: ip_assignment == "static"

    # Add network settings for DHCP guest customization
    - name: "Set GOS customization spec of DHCP IP"
      ansible.builtin.set_fact:
        linux_gosc_spec: "{{ linux_gosc_spec | combine(item) }}"
      loop:
        - {'network': "{{ gosc_dhcp_network | default('VM Network') }}"}
        - {'dns_servers': ["10.10.1.1", "10.10.1.2"]}
        - {'hostname': "gosc-dhcp-vm-01"}
        - {'hwclockUTC': true}
      when: ip_assignment == "dhcp"

    - name: "Execute guest customization on VM"
      include_tasks: linux_gosc_start.yml

    - name: "Check guest customization results"
      include_tasks: linux_gosc_verify.yml
  rescue:
    - name: "Test case failure"
      include_tasks: ../../common/test_rescue.yml
  always:
    - name: "Collect GOSC log"
      when:
        - gosc_deploypkg_log_local is defined
        - gosc_deploypkg_log_local
      block:
        - name: "Get stat of {{ gosc_deploypkg_log_local }}"
          ansible.builtin.stat:
            path: "{{ gosc_deploypkg_log_local }}"
          register: gosc_deploypkg_log_stat

        - name: "Fetch GOSC log file {{ gosc_deploypkg_log_file }}"
          include_tasks: ../../common/vm_guest_file_operation.yml
          vars:
            operation: "fetch_file"
            src_path: "{{ gosc_deploypkg_log_file }}"
            dest_path: "{{ gosc_deploypkg_log_local }}"
          when:
            - not (gosc_deploypkg_log_stat.stat.exists | default(False))
            - vmtools_is_running is defined
            - vmtools_is_running | bool

    - name: "Colect cloud-init logs"
      include_tasks: ../utils/collect_cloudinit_logs.yml
      when: >
        (gosc_workflow == "cloud-init") or
        (guest_os_ansible_distribution == "VMware Photon OS")
