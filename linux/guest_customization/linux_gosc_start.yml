# Copyright 2021-2024 VMware, Inc.
# SPDX-License-Identifier: BSD-2-Clause
---
- name: "Get expected IP and FQDN hostname bindings from cloudinit '/etc/hosts' template file"
  block:
    - name: "Initialize the fact of hosts template file"
      ansible.builtin.set_fact:
        hosts_template_file: ""
    - name: "Set fact of the hosts template file hosts.debian.tmpl"
      ansible.builtin.set_fact:
        hosts_template_file: "/etc/cloud/templates/hosts.debian.tmpl"
      when: guest_os_family == "Debian"
    - name: "Set fact of the hosts template file hosts.redhat.tmpl"
      ansible.builtin.set_fact:
        hosts_template_file: "/etc/cloud/templates/hosts.redhat.tmpl"
      when: guest_os_family == "RedHat"
    - name: "Set fact of the hosts template file hosts.suse.tmpl"
      ansible.builtin.set_fact:
        hosts_template_file: "/etc/cloud/templates/hosts.suse.tmpl"
      when: guest_os_family == "Suse"
    - name: "Set fact of the hosts template file hosts.photon.tmpl"
      ansible.builtin.set_fact:
        hosts_template_file: "/etc/cloud/templates/hosts.photon.tmpl"
      when: guest_os_ansible_distribution == "VMware Photon OS"
    - ansible.builtin.debug:
        msg: "For guest '{{ guest_os_ansible_distribution }}', set /etc/hosts template file: {{ hosts_template_file }}"
    - block:
        - name: "Get FQDN and hostname bound IP address list from hosts template"
          ansible.builtin.shell: cat "{{ hosts_template_file }}" | grep '.*fqdn}} .*hostname}}.*' | awk '{ print $1 }'
          delegate_to: "{{ vm_guest_ip }}"
          register: fqdn_hostname_bind_ip
          failed_when: fqdn_hostname_bind_ip.stderr
        - name: "Print the IP address list to be binding with FQDN and hostname from hosts template file"
          ansible.builtin.debug: var=fqdn_hostname_bind_ip
      when: hosts_template_file
  when: enable_cloudinit_gosc

- name: "Shutdown OS"
  include_tasks: ../utils/shutdown.yml

- name: "Set fact of GOSC log files"
  ansible.builtin.set_fact:
    gosc_deploypkg_log_file: "/var/log/vmware-imc/toolsDeployPkg.log"
    gosc_deploypkg_log_local: "{{ current_test_log_folder }}/toolsDeployPkg.log"
    gosc_cloudinit_log_file: "/var/log/cloud-init.log"
    gosc_cloudinit_log_local: "{{ current_test_log_folder }}/cloud-init.log"

- name: "Execute guest customization"
  include_tasks: linux_gosc_execution.yml
  vars:
    type: "{{ ip_assignment }}"
    linux_gosc_timeout: 900

# Do not fail GOSC immediately if state keyword doesn't exist
- name: "Wait for GOSC state is completed"
  include_tasks: ../../common/vm_wait_gosc_completed.yml
  vars:
    get_guest_reset_time_retries: 20
    check_gosc_state_keyword: false

# Traditional GOSC will reboot guest OS (except for Photon) after all customization done
- name: "Sleep 30 seconds to wait guest reboot for traditional GOSC"
  ansible.builtin.pause:
    seconds: 30
  when:
    - guest_os_ansible_distribution != "VMware Photon OS"
    - not enable_cloudinit_gosc | bool
    - gosc_state_keyword_found is defined
    - gosc_state_keyword_found | bool

# Wait for guest IP not empty no matter GOSC with DHCP IP or static IP
# Otherwise incorrect static IP will fail the task and quit test without
# collecting information
- name: "Wait for VM guest IP"
  include_tasks: ../../common/vm_wait_guest_ip.yml

# In case VM get new DHCP IP address after GOSC
- name: "Update VM's guest IP in inventory"
  include_tasks: ../../common/update_inventory.yml
  when: ip_assignment == "dhcp"

# Wait GOSC completes message in logs
- name: "Wait for traditional GOSC complete message"
  include_tasks: wait_gosc_complete_msg.yml
  vars:
    wait_gosc_log_file: "{{ gosc_deploypkg_log_file }}"
    wait_gosc_msg_regexp: "Ran DeployPkg_DeployPackageFromFile successfully"
  when: not enable_cloudinit_gosc | bool

- name: "Wait for cloud-init GOSC complete message"
  block:
    - name: "Wait for cloud-init GOSC complete message when cloud-init version is lower than 23.1"
      include_tasks: wait_gosc_complete_msg.yml
      vars:
        wait_gosc_log_file: "{{ gosc_cloudinit_log_file }}"
        wait_gosc_msg_regexp: "Cloud-init .*finished at.*Datasource DataSourceOVF \\[seed=vmware-tools\\]"
      when: cloudinit_version is version('23.1', '<')

    - name: "Wait for cloud-init GOSC complete message when cloud-init version is equal to or greater than 23.1"
      include_tasks: wait_gosc_complete_msg.yml
      vars:
        wait_gosc_log_file: "{{ gosc_cloudinit_log_file }}"
        wait_gosc_msg_regexp: "Cloud-init .*finished at.*Datasource DataSourceVMware \\[seed=imc\\]"
      when: cloudinit_version is version('23.1', '>=')
  when: enable_cloudinit_gosc | bool
