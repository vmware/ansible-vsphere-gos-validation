# Copyright 2021-2022 VMware, Inc.
# SPDX-License-Identifier: BSD-2-Clause
---
- name: "Initialize GOSC network check result"
  set_fact:
    guest_ipv4_success: ""
    guest_netmask_success: ""
    guest_gateway_success: ""
    ip_command: "/usr/sbin/ip"

- name: "Set fact of ip command when guest OS is Ubuntu"
  set_fact:
    ip_command: "/sbin/ip"
  when: guest_os_ansible_distribution in ["Ubuntu"]

# Get IP address and netmask
- include_tasks: ../../common/vm_shell_in_guest.yml
  vars:
    vm_shell_cmd: "{{ ip_command }}"
    vm_shell_args: "-br addr show"
    vm_shell_out: "/tmp/ip_addr_show.txt"

- include_tasks: ../../common/vm_guest_file_operation.yml
  vars:
    operation: "fetch_file"
    src_path: "/tmp/ip_addr_show.txt"
    dest_path: "{{ current_test_log_folder }}/ip_addr_show.txt"

- name: "Get IPv4 address"
  shell: cat "{{ current_test_log_folder }}/ip_addr_show.txt" | grep -v lo | grep -v virbr | awk '{print $1, $2, $3}'
  changed_when: False
  register: result

- name: "Save GOSC network facts from command output"
  set_fact:
    guest_iface_name: "{{ result.stdout.split(' ')[0] }}"
    guest_ipv4_address: "{{ result.stdout.split(' ')[-1] | ipaddr('address') }}"
    guest_ipv4_netmask: "{{ result.stdout.split(' ')[-1] | ipaddr('netmask') }}"

# Get default gateway
- include_tasks: ../../common/vm_shell_in_guest.yml
  vars:
    vm_shell_cmd: "{{ ip_command }}"
    vm_shell_args: "-4 route show"
    vm_shell_out: "/tmp/ip_route_show.txt"

- include_tasks: ../../common/vm_guest_file_operation.yml
  vars:
    operation: "fetch_file"
    src_path: "/tmp/ip_route_show.txt"
    dest_path: "{{ current_test_log_folder }}/ip_route_show.txt"

- name: "Get default gateway"
  shell: cat "{{ current_test_log_folder }}/ip_route_show.txt" | grep "^default"
  changed_when: False
  register: result
- name: "Save GOSC network gateway"
  set_fact:
    guest_ipv4_gateway: "{{ result.stdout.split(' ')[2] }}"

# Check IP address, netmaks, gateway settings for GOSC with DHCP IP
- block:
    - name: "Save DHCP GOSC network check result"
      set_fact:
        guest_ipv4_success: "{{ guest_ipv4_address != '' }}"
        guest_netmask_success: "{{ guest_ipv4_netmask != '' }}"
        guest_gateway_success: "{{ guest_ipv4_gateway != '' }}"

    - include_tasks: set_gosc_validation_result.yml
      vars:
        gosc_check_item: "{{ item.key }}"
        gosc_check_error_msg: "{{ item.value }}"
      with_list:
        - key: "guest_ipv4_success"
          value: "VM DHCP IPv4 address is '{{ guest_ipv4_address }}', expected IPv4 address should not be empty"
        - key: "guest_netmask_success"
          value: "VM DHCP IPv4 netmask is '{{ guest_ipv4_netmask }}', expected IPv4 netmask should not be empty"
        - key: "guest_gateway_success"
          value: "VM DHCP IPv4 gateway is '{{ guest_ipv4_gateway }}', expected IPv4 gateway should not be empty"
  when: ip_assignment == "dhcp"

# Check static IP address, netmaks, gateway settings for GOSC with static IP
- block:
    - name: "Save static GOSC network facts check result"
      set_fact:
        guest_ipv4_success: "{{ guest_ipv4_address == linux_gosc_spec['ip'] }}"
        guest_netmask_success: "{{ guest_ipv4_netmask == linux_gosc_spec['netmask'] }}"
        guest_gateway_success: "{{ guest_ipv4_gateway == linux_gosc_spec['gateway'] }}"

    - include_tasks: set_gosc_validation_result.yml
      vars:
        gosc_check_item: "{{ item.key }}"
        gosc_check_error_msg: "{{ item.value }}"
      with_list:
        - key: "guest_ipv4_success"
          value: "VM static IPv4 address is '{{ guest_ipv4_address }}', expected IPv4 address is {{ linux_gosc_spec['ip'] }}"
        - key: "guest_netmask_success"
          value: "VM static IPv4 netmask is '{{ guest_ipv4_netmask }}', expected IPv4 netmask is {{ linux_gosc_spec['netmask'] }}"
        - key: "guest_gateway_success"
          value: "VM static IPv4 gateway is '{{ guest_ipv4_gateway }}', expected IPv4 gateway is {{ linux_gosc_spec['gateway'] }}"
  when: ip_assignment == "static"

- name: "Print GOSC network IP address check result"
  debug: var=guest_ipv4_success
- name: "Print GOSC network mask check result"
  debug: var=guest_netmask_success
- name: "Print GOSC network gateway check result"
  debug: var=guest_gateway_success

# Collect network config files for non-Photon Linux
# On Ubuntu Desktop 19.10 and later or Ubuntu Server 17.10 and later, network configure files
# are /etc/netplan/*.yaml
- block:
    - name: "Set traditional GOSC network configuration file on Ubuntu {{ guest_os_ansible_distribution_ver }}"
      set_fact:
        src_network_file: "/etc/netplan/99-netcfg-vmware.yaml"
      when: "gosc_workflow == 'perl'"

    - name: "Set cloud-init GOSC network configuration file on Ubuntu {{ guest_os_ansible_distribution_ver }}"
      set_fact:
        src_network_file: "/etc/netplan/50-cloud-init.yaml"
      when: "gosc_workflow == 'cloud-init'"
  when: >
    (guest_os_ansible_distribution == "Ubuntu") and
    (((guest_os_with_gui is undefined or not guest_os_with_gui | bool) and
      guest_os_ansible_distribution_ver is version('17.10', '>=')) or
     (guest_os_with_gui is defined and guest_os_with_gui | bool and
      guest_os_ansible_distribution_ver is version('19.10', '>=')))

# On Debian 10/11 or Ubuntu Desktop eariler than 19.10, the network configure file is
# /etc/network/interfaces
- block:
    - name: "Set traditional GOSC network configuration files on Ubuntu Desktop/Debian OS"
      set_fact:
        src_network_file: "/etc/network/interfaces"
      when: "gosc_workflow == 'perl'"

    - name: "Set cloud-init GOSC network configuration files on Ubuntu/Debian OS"
      set_fact:
        src_network_file: "/etc/network/interfaces.d/50-cloud-init.cfg"
      when: "gosc_workflow == 'cloud-init'"
  when: >
    (guest_os_ansible_distribution == "Debian") or
    (guest_os_ansible_distribution == "Ubuntu" and
     guest_os_ansible_distribution_ver is version('19.10', '<') and
     guest_os_with_gui is defined and guest_os_with_gui | bool)

- name: "Set GOSC network configuration files on RedHat"
  set_fact:
    src_network_file: "/etc/sysconfig/network-scripts/ifcfg-{{ guest_iface_name }}"
  when: guest_os_family == "RedHat"

- name: "Set GOSC network configuration files on SLE"
  set_fact:
    src_network_file: "/etc/sysconfig/network/ifcfg-{{ guest_iface_name }}"
  when: guest_os_family == "Suse"

- block:
    - name: "Print the network configuration file on {{ guest_os_ansible_distribution }}"
      debug: var=src_network_file

    - name: "Set GOSC network configuration files on Photon OS"
      set_fact:
        network_config_path: "{{ current_test_log_folder }}{{ src_network_file }}"
    - include_tasks: ../../common/vm_guest_file_operation.yml
      vars:
        operation: "fetch_file"
        src_path: "{{ src_network_file }}"
        dest_path: "{{ network_config_path }}"
  when:
    - guest_os_ansible_distribution != "VMware Photon OS"
    - src_network_file is defined and src_network_file

# Collect network config files for Photon OS
- block:
    - include_tasks: ../../common/vm_shell_in_guest.yml
      vars:
        vm_shell_cmd: "/usr/bin/ls"
        vm_shell_args: "/etc/systemd/network/*.network"
        vm_shell_out: "/tmp/list_network_files.txt"

    - include_tasks: ../../common/vm_guest_file_operation.yml
      vars:
        operation: "fetch_file"
        src_path: "/tmp/list_network_files.txt"
        dest_path: "{{ current_test_log_folder }}/list_network_files.txt"

    - name: "Look for network file on Photon OS"
      command: cat "{{ current_test_log_folder }}/list_network_files.txt"
      register: network_files

    - include_tasks: ../../common/vm_guest_file_operation.yml
      vars:
        operation: "fetch_file"
        src_path: "{{ src_network_file }}"
        dest_path: "{{ current_test_log_folder }}{{ src_network_file }}"
      with_items: "{{ network_files.stdout_lines }}"
      loop_control:
        loop_var: "src_network_file"
  when: guest_os_ansible_distribution == "VMware Photon OS"
