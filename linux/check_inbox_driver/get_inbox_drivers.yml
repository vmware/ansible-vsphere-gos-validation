# Copyright 2022-2024 VMware, Inc.
# SPDX-License-Identifier: BSD-2-Clause
---
- name: "Set facts of mandatory and optional inbox drivers"
  ansible.builtin.set_fact:
    mandatory_drivers:
      - vmxnet3
      - vmw_vmci
      - vsock
      - vmw_vsock_vmci_transport
      - vmw_pvscsi
      - vmw_balloon
    optional_drivers:
      - vmw_vsock_virtio_transport_common
      - vmw_pvrdma
      - ptp_vmw

- name: "Update mandatory inbox drivers when guest OS has GUI"
  ansible.builtin.set_fact:
    mandatory_drivers: "{{ mandatory_drivers + ['vmwgfx'] }}"
  when: guest_os_with_gui is defined and guest_os_with_gui | bool

- name: "Update optional inbox drivers when guest OS has no GUI"
  ansible.builtin.set_fact:
    optional_drivers: "{{ optional_drivers + ['vmwgfx'] }}"
  when: guest_os_with_gui is undefined or not (guest_os_with_gui | bool)

- name: "Set facts of inbox drivers, versions and builtin modules"
  ansible.builtin.set_fact:
    inbox_drivers: "{{ _drivers_to_check }}"
    inbox_drivers_versions: >-
      {{
        inbox_drivers_versions |
        combine(dict(_drivers_to_check | zip_longest([], fillvalue='N/A')))
      }}
    builtin_modules: []
  vars:
    _drivers_to_check: "{{ mandatory_drivers + optional_drivers }}"

- name: "Get drivers versions on {{ vm_guest_os_distribution }}"
  when:
    - guest_os_ansible_distribution == "VMware Photon OS"
    - guest_os_ansible_distribution_major_ver | int < 4
  block:
    - name: "Check driver version"
      ansible.builtin.shell: "if [ -e /sys/module/{{ driver }}/version ]; then cat /sys/module/{{ driver }}/version ; fi"
      with_items: "{{ inbox_drivers }}"
      loop_control:
        loop_var: driver
      register: photon_drivers
      no_log: true
      delegate_to: "{{ vm_guest_ip }}"

    - name: Set fact of driver version dict
      ansible.builtin.set_fact:
        inbox_drivers_versions: >-
          {{
            inbox_drivers_versions |
            combine(photon_drivers.results |
                    selectattr('stdout', 'defined') |
                    selectattr('stdout', '!=', '') |
                    items2dict(key_name='driver', value_name='stdout'))
          }}

- name: "Get drivers versions on {{ vm_guest_os_distribution }}"
  when: >
    not (guest_os_ansible_distribution == "VMware Photon OS" and
    guest_os_ansible_distribution_major_ver | int < 4)
  block:
    - name: "Get module information of inbox drivers"
      ansible.builtin.shell: "modinfo {{ module_name }} | grep -E '^(name|version|srcversion|vermagic|filename|alias):'"
      register: modinfo_result
      delegate_to: "{{ vm_guest_ip }}"
      ignore_errors: true
      loop: "{{ inbox_drivers }}"
      loop_control:
        loop_var: module_name

    - name: "Set fact of module information of inbox drivers"
      ansible.builtin.set_fact:
        builtin_modules: >-
          {{
            builtin_modules |
            union([item.value | from_yaml | combine({'module_name': item.key})])
          }}
      with_dict: >-
        {{
          modinfo_result.results |
          selectattr('rc', 'equalto', 0) |
          selectattr('stdout', 'defined') |
          items2dict(key_name='module_name', value_name='stdout')
        }}

    - name: "Display builtin modules on {{ vm_guest_os_distribution }}"
      ansible.builtin.debug: var=builtin_modules

    - name: "Set facts of inbox driver modules with version, srcversion, vermagic and filename"
      ansible.builtin.set_fact:
        drivers_with_version: >-
          {{
             builtin_modules |
             selectattr('version', 'defined') |
             items2dict(key_name='module_name', value_name='version')
          }}
        drivers_with_srcversion: >-
          {{
             builtin_modules |
             selectattr('version', 'undefined') |
             selectattr('srcversion', 'defined') |
             items2dict(key_name='module_name', value_name='srcversion')
          }}
        drivers_with_vermagic: >-
          {{
             builtin_modules |
             selectattr('version', 'undefined') |
             selectattr('srcversion', 'undefined') |
             selectattr('vermagic', 'defined') |
             items2dict(key_name='module_name', value_name='vermagic')
          }}
        drivers_without_version: >-
          {{
             dict(builtin_modules |
                  selectattr('version', 'undefined') |
                  selectattr('srcversion', 'undefined') |
                  selectattr('vermagic', 'undefined') |
                  map(attribute='module_name') |
                  zip_longest([], fillvalue='hidden'))
          }}
        inbox_drivers_filenames: >-
          {{
            builtin_modules |
            selectattr('filename', 'defined') |
            items2dict(key_name='module_name', value_name='filename')
          }}

    - name: "Set fact of inbox drivers' versions"
      ansible.builtin.set_fact:
        inbox_drivers_versions: >-
          {{
            inbox_drivers_versions |
            combine(drivers_with_version) |
            combine(drivers_with_srcversion) |
            combine(drivers_with_vermagic) |
            combine(drivers_without_version)
          }}

    - name: "Display inbox drivers' filenames"
      ansible.builtin.debug: var=inbox_drivers_filenames

    # VMware Photon OS inbox drivers are built in kernel, so here only checks other Linux OS
    - name: "Check inbox drivers filenames"
      when: guest_os_ansible_distribution != "VMware Photon OS"
      block:
        - name: "Do not check vsock driver in OracleLinux with kernel UEK R7 due to known issue"
          when:
            - guest_os_ansible_distribution == "OracleLinux"
            - guest_os_ansible_kernel == "5.15.0-0.30.19.el9uek.x86_64"
          block:
            - name: "Known issue - ignore failure of invalid vsock driver"
              ansible.builtin.debug:
                msg:
                  - "The inbox driver vsock is missing in Oracle Linux 9.0 with kernel UEK R7 V5.15.0-0.30.19."
                  - "The issue has been resolved in UEK R7 V5.15.0-2.52.3. Please upgrade to latest UEK R7 for resolution."
                  - "Please refer to https://bugzilla.oracle.com/bugzilla/show_bug.cgi?id=17884"
              tags:
                - known_issue

        - name: "Check inbox driver's filename is valid"
          ansible.builtin.assert:
            that:
              - (item.value | basename) is match('.*\.ko')
            fail_msg: "Invalid inbox driver {{ item.key }} filename: {{ item.value }}"
          with_dict: "{{ inbox_drivers_filenames }}"

        - name: "Check inbox driver's file exits"
          ansible.builtin.stat:
            path: "{{ item.value }}"
          delegate_to: "{{ vm_guest_ip }}"
          with_dict: "{{ inbox_drivers_filenames }}"
          register: stat_drivers_filenames

        - name: "Check all inbox drivers' filenames exist"
          ansible.builtin.assert:
            that:
              - stat_driver_filename.stat is defined
              - stat_driver_filename.stat.exists is defined
              - stat_driver_filename.stat.exists
            fail_msg: "Inbox driver file {{ stat_driver_filename.stat.path }} doesn't exist"
          with_items: "{{ stat_drivers_filenames.results }}"
          loop_control:
            loop_var: stat_driver_filename

- name: "Display versions of inbox drivers on {{ vm_guest_os_distribution }}"
  ansible.builtin.debug: var=inbox_drivers_versions

- name: "Set fact of missing mandatory inbox drivers on {{ vm_guest_os_distribution }}"
  ansible.builtin.set_fact:
    missing_mandatory_drivers: >-
      {{
        inbox_drivers_versions |
        dict2items |
        selectattr('key', 'in', mandatory_drivers) |
        selectattr('value', 'equalto', 'N/A') |
        map(attribute='key')
      }}

- name: "Set fact about whether guest OS has inbox driver known issue"
  ansible.builtin.set_fact:
    guest_has_driver_known_issue: >-
      {{
        esxi_cpu_vendor == 'arm' and
        (missing_mandatory_drivers | difference(['vmw_pvscsi', 'vmw_balloon']) | length == 0) and
        (
         (guest_os_ansible_distribution == 'RedHat' and
          (guest_os_ansible_distribution_ver is version('10.0', '==') or
           guest_os_ansible_distribution_ver is version('9.6', '<='))) or
         (guest_os_ansible_distribution == 'SLES' and
          guest_os_ansible_distribution_ver is version('16.0', '<=')) or
         (guest_os_ansible_distribution == 'Ubuntu' and
          guest_os_ansible_distribution_ver is version('25.04', '<='))
        )
      }}

- name: "Known issue - missing inbox drivers on {{ vm_guest_os_distribution }}"
  ansible.builtin.debug:
    msg: >-
      The inbox drivers {{ missing_mandatory_drivers }} are missing on {{ vm_guest_os_distribution }}.
      Ignore this failure.
  tags:
    - known_issue
  when: guest_has_driver_known_issue

- name: "Check all mandatory inbox drivers exists in {{ guest_os_ansible_distribution }}"
  ansible.builtin.assert:
    that:
      - missing_mandatory_drivers | length == 0
    fail_msg: "Missing mandatory inbox driver(s) {{ missing_mandatory_drivers }} on {{ vm_guest_os_distribution }}"
  when: not guest_has_driver_known_issue
