# Copyright 2025 VMware, Inc.
# SPDX-License-Identifier: BSD-2-Clause
---
# Get the IPv4 address of new added network adapter
#
- name: "Bring up the new {{ adapter_type }} network adapter '{{ new_network_adapter_name }}'"
  include_tasks: ../utils/set_network_adapter_status.yml
  vars:
    network_adapter_name: "{{ new_network_adapter_name }}"
    network_adapter_status: "up"
  when: guest_os_network_manager not in ["NetworkManager", "systemd-networkd", "netplan"]

- name: "Set fact of searching IPv4 address"
  ansible.builtin.set_fact:
    search_ip: "{{ (new_nic_ipv4_method == 'static') | ternary(new_nic_ipv4, '192.168') }}"

- name: "Set command to get IP addresses of the new {{ adapter_type }} network adapter '{{ new_network_adapter_name }}'"
  ansible.builtin.set_fact:
    get_link_status_cmd: |-
      {%- if guest_os_ansible_distribution == 'FreeBSD' -%}
        ifconfig {{ new_network_adapter_name }} | grep inet | grep -v inet6 | awk '{print $2}'
      {%- else -%}
        ip -br addr show {{ new_network_adapter_name }} | awk '{print $3}'
      {%- endif -%}

- name: "Wait for IPv4 address of the {{ adapter_type }} network adapter '{{ new_network_adapter_name }}'"
  ansible.builtin.shell: "{{ get_link_status_cmd }}"
  register: link_status
  changed_when: false
  until:
    - link_status is defined
    - link_status.stdout is defined
    - search_ip in link_status.stdout
  retries: 20
  delay: 5
  delegate_to: "{{ vm_guest_ip }}"
  ignore_errors: true

- name: "Print IP addresses of the new {{ adapter_type }} network adapter '{{ new_network_adapter_name }}'"
  ansible.builtin.debug: var=link_status

- name: "Check IPv4 address of the new {{ adapter_type }} network adapter '{{ new_network_adapter_name }}'"
  ansible.builtin.assert:
    that:
      - link_status is defined
      - link_status.stdout is defined
      - search_ip in link_status.stdout
    fail_msg: >-
      The new {{ adapter_type }} network adapter '{{ new_network_adapter_name }}'
      failed to obtain IPv4 address in 100 seconds. The command '{{ get_link_status_cmd }}'
      returned '{{ link_status | default("") }}'.

- name: "Get the new {{ adapter_type }} network adapter status after applying network config"
  include_tasks: ../utils/get_network_adapters_status.yml

- name: "Update the new network adapter status after applying network config"
  ansible.builtin.set_fact:
    new_network_adapter_status: >-
      {{
        guest_network_adapters_status |
        selectattr('device', 'equalto', new_network_adapter_name) |
        first
      }}

- name: "Set fact of the new {{ adapter_type }} network adapter's IPv4 address"
  ansible.builtin.set_fact:
    new_network_adapter_ip: >-
      {{
        (new_network_adapter_status.ipv4 | type_debug == "list") |
        ternary(new_network_adapter_status.ipv4[0].address | default('') ,
                new_network_adapter_status.ipv4.address | default(''))
      }}
  when:
    - new_network_adapter_status.ipv4 is defined
    - new_network_adapter_status.ipv4 | type_debug in ['list', 'dict']

- name: "Check the new {{ adapter_type }} network adapter has IPv4 address"
  ansible.builtin.assert:
    that:
      - new_network_adapter_ip
    fail_msg: >-
      Failed to get IPv4 address of the new {{ adapter_type }} network adapter '{{ new_network_adapter_name }}'
      on {{ vm_guest_os_distribution }}. The network adapter status is {{ new_network_adapter_status }}.
    success_msg: >-
      The IPv4 address of the new {{ adapter_type }} network adapter '{{ new_network_adapter_name }}'
      is {{ new_network_adapter_ip }} on {{ vm_guest_os_distribution }}.
