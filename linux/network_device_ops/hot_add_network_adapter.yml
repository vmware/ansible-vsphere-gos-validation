# Copyright 2023 VMware, Inc.
# SPDX-License-Identifier: BSD-2-Clause
---
# Hot add a new network adapter and apply network config
#

- name: "Clear dmesg ring buffer"
  ansible.builtin.shell: "dmesg --clear"
  delegate_to: "{{ vm_guest_ip }}"

- name: "Get RDMA device before hot-add"
  block:
    - include_tasks: ../utils/get_rdma_device_info.yml
    - name: "Set fact of RDMA device before hot-add"
      ansible.builtin.set_fact:
        rdma_devices_before_hotadd: "{{ guest_rdma_device_info }}"
  when: adapter_type == "pvrdma"

- name: "Hot add a new network adapter to VM"
  include_tasks: ../../common/vm_add_network_adapter.yml

- name: "Check VM connection is not broken after hot-add"
  include_tasks: ../../common/vm_wait_connection.yml
  vars:
    vm_wait_connection_timeout: 60

- name: "Get changes in dmesg ring buffer"
  ansible.builtin.shell: "dmesg"
  delegate_to: "{{ vm_guest_ip }}"
  register: dmesg_delta

- name: "Set fact of device messages in dmesg ring buffer"
  ansible.builtin.set_fact:
    new_network_adapter_dmesg: >-
      {{
        dmesg_delta.stdout_lines | default([]) |
        select('match', '.*' ~ adapter_type ~ '.*')
      }}

- name: "Assert messages about new network adapter is printed"
  ansible.builtin.assert:
    that:
      - new_network_adapter_dmesg | length > 0
    fail_msg: "There is no message about new network adapter in dmesg"

- name: "Get network adapters status after hot-add"
  include_tasks: ../utils/get_network_adapters_status.yml

- name: "Set fact of network adapters after hot-add"
  ansible.builtin.set_fact:
    network_adapters_after_hotadd: "{{ guest_network_adapters }}"

- name: "Assert new {{ adapter_type }} adapter interface is detected"
  ansible.builtin.assert:
    that:
      - network_adapters_after_hotadd | difference(network_adapters_before_hotadd) | length > 0
    fail_msg: "Fail to detect new added '{{ adapter_type }}' adapter on VM"

# Get new added network interface
- name: "Set fact of new added network adapter"
  ansible.builtin.set_fact:
    new_network_adapter: "{{ (network_adapters_after_hotadd | difference(network_adapters_before_hotadd))[0] }}"

- name: "Print the new {{ adapter_type }} adapter interface name"
  ansible.builtin.debug: var=new_network_adapter

- name: "Set fact of new added network adapter status"
  ansible.builtin.set_fact:
    new_network_adapter_status: "{{ (guest_network_adapters_status | selectattr('device', 'equalto', new_network_adapter))[0] }}"

- name: "Set the fact of new {{ adapter_type }} adapter interface mac address"
  ansible.builtin.set_fact:
    new_network_adapter_mac_addr: "{{ new_network_adapter_status.macaddress }}"

- name: "Apply new network configuration"
  include_tasks: apply_new_network_config.yml
  when: >
    new_network_adapter_status.active is undefined or
    not new_network_adapter_status.active or
    new_network_adapter_status.ipv4 is undefined or
    new_network_adapter_status.ipv4.address is undefined or
    not new_network_adapter_status.ipv4.address

- name: "Check RDMA device status"
  block:
    - include_tasks: ../utils/get_rdma_device_info.yml
    
    - name: "Set fact of RDMA device after hot-add"
      ansible.builtin.set_fact:
        rdma_devices_after_hotadd: "{{ guest_rdma_device_info }}"

    - name: "Check new RDMA device exists"
      ansible.builtin.assert:
        that:
          - rdma_devices_after_hotadd | length > 0
          - rdma_devices_after_hotadd | difference(rdma_devices_before_hotadd) | length == 1
        fail_msg: "No new RDMA device is detected"

    - name: "Set fact of new RDMA device"
      ansible.builtin.set_fact:
        new_rdma_device: "{{ (rdma_devices_after_hotadd | difference(rdma_devices_before_hotadd))[0] }}"

    - name: "Reload vmw_pvrdma module"
      include_tasks: ../utils/reload_module.yml
      vars:
        module_name: "vmw_pvrdma"
      when: >
        new_rdma_device.state is undefined or
        ('PORT_ACTIVE' not in new_rdma_device.state | upper) or
        esxi_version is version('7.0.1', '<=')
  when: adapter_type == "pvrdma"
