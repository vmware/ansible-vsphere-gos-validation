# Copyright 2022-2024 VMware, Inc.
# SPDX-License-Identifier: BSD-2-Clause
---
# Parameters:
#   new_network_adapter: The name of new network adapter interface
#
- name: "Get the network connection for new {{ adapter_type }} network adapter"
  include_tasks: ../utils/get_network_config_file.yml
  vars:
    network_adapter_name: "{{ new_network_adapter }}"

- name: "Add network connection for new {{ adapter_type }} network adapter on {{ vm_guest_os_distribution }}"
  when: guest_os_network_manager == "NetworkManager"
  block:
    # Some guest OS might automatically add a connection for the new network adapter with
    # DHCP IP address obtained. Here needs to deactivate it so that we can add a new connection.
    - name: "Set fact of new network connection name and config file"
      ansible.builtin.set_fact:
        new_network_connection_name: "{{ network_connection_name }}"
        new_network_connection_file: "{{ network_config_path }}"

    - name: "Deactivate the auto created network connection '{{ new_network_connection_name }}'"
      ansible.builtin.shell: "nmcli connection down '{{ new_network_connection_name }}'"
      delegate_to: "{{ vm_guest_ip }}"
      when: new_network_connection_name

    - name: "Remove the auto created network connection file '{{ new_network_connection_file }}'"
      ansible.builtin.shell: "rm -f '{{ new_network_connection_file }}'"
      delegate_to: "{{ vm_guest_ip }}"
      when: new_network_connection_file

    - name: "Set fact of IPv6 config in network connection for new {{ adapter_type }} network adapter"
      ansible.builtin.set_fact:
        nmcli_ipv6_method: >-
          {{
            (guest_os_ansible_distribution == 'SLED' and
             guest_os_ansible_distribution_ver == '15.7') |
            ternary('ipv6.method disabled', '')
          }}

    - name: "Set fact of command for adding network connection with static IP addresss"
      ansible.builtin.set_fact:
        nmcli_connection_add_cmd: >-
          nmcli connection add type ethernet ifname {{ new_network_adapter }}
          con-name {{ new_network_adapter }} ipv4.method manual
          ipv4.addresses {{ new_nic_ipv4 }}/{{ new_nic_net_prefix }}
          ipv4.gateway {{ new_nic_gateway }} {{ nmcli_ipv6_method }}
      when: new_nic_ipv4_method == 'static'

    - name: "Set fact of command for adding network connection with DHCP IP addresss"
      ansible.builtin.set_fact:
        nmcli_connection_add_cmd: >-
          nmcli connection add type ethernet ifname {{ new_network_adapter }}
          con-name {{ new_network_adapter }} {{ nmcli_ipv6_method }}
      when: new_nic_ipv4_method == 'dhcp'

    - name: "Add a network connection for new {{ adapter_type }} network adapter '{{ new_network_adapter }}'"
      ansible.builtin.shell: "{{ nmcli_connection_add_cmd }}"
      delegate_to: "{{ vm_guest_ip }}"
      register: nmcli_connection_add_result

    - name: "Update the network connection file for new {{ adapter_type }} network adapter"
      include_tasks: ../utils/get_network_config_file.yml
      vars:
        network_adapter_name: "{{ new_network_adapter }}"

# Set network config file in guest OS
- name: "Set network config file for new {{ adapter_type }} network adapter on {{ vm_guest_os_distribution }}"
  when:
    - guest_os_ansible_distribution != "FreeBSD"
    - guest_os_network_manager not in ["NetworkManager", "systemd-networkd"]
  block:
    - name: "Set fact of the network config template on {{ vm_guest_os_distribution }}"
      ansible.builtin.set_fact:
        network_config_template: "{{ guest_os_family | lower }}_network_conf.j2"

    - name: "Create or update network config file '{{ network_config_path }}'"
      ansible.builtin.template:
        src: "{{ network_config_template }}"
        dest: "{{ network_config_path }}"
        mode: "0666"
      delegate_to: "{{ vm_guest_ip }}"

- name: "Update systemd network config on {{ vm_guest_os_distribution }}"
  include_tasks: update_systemd_network_config.yml
  vars:
    network_adapter_name: "{{ new_network_adapter }}"
  when: guest_os_network_manager == "systemd-networkd"

- name: "Apply new network config for FreeBSD"
  when: guest_os_ansible_distribution == "FreeBSD"
  block:
    - name: "Set new {{ adapter_type }} network adapter with static IPv4 address"
      ansible.builtin.shell: 'sysrc ifconfig_{{ new_network_adapter }}="inet {{ new_nic_ipv4 }}/{{ new_nic_net_prefix }}"'
      delegate_to: "{{ vm_guest_ip }}"
      when: new_nic_ipv4_method == "static"

    - name: "Set new {{ adapter_type }} network adapter with DHCP IPv4 address"
      when: new_nic_ipv4_method == "dhcp"
      block:
        - name: "Set new {{ adapter_type }} network adapter with static IPv4 address"
          ansible.builtin.shell: 'sysrc ifconfig_{{ new_network_adapter }}="DHCP"'
          delegate_to: "{{ vm_guest_ip }}"

        - name: "Get DHCP IPv4 address for new {{ adapter_type }} network adapter"
          ansible.builtin.shell: "dhclient {{ new_network_adapter }}"
          delegate_to: "{{ vm_guest_ip }}"

- name: "Collect the new network config file '{{ network_config_path }}'"
  when: network_config_path
  block:
    - name: "Fetch the network config file of {{ adapter_type }} network adapter '{{ new_network_adapter }}'"
      include_tasks: ../utils/fetch_file.yml
      vars:
        fetch_file_src_path: "{{ network_config_path }}"
        fetch_file_dst_path: "{{ current_test_log_folder }}/"

    - name: "Get content of network config file '{{ network_config_path }}'"
      ansible.builtin.set_fact:
        new_network_config_content: "{{ lookup('file', fetch_file_local_path) }}"

    - name: "Display content of network config file '{{ network_config_path }}'"
      ansible.builtin.debug: var=new_network_config_content

- name: "Reload network configs on {{ vm_guest_os_distribution }}"
  include_tasks: reload_network_configs.yml
  when: guest_os_ansible_distribution != "FreeBSD" or new_nic_ipv4_method != "dhcp"

- name: "Bring up the new {{ adapter_type }} network adapter '{{ new_network_adapter }}'"
  include_tasks: ../utils/set_network_adapter_status.yml
  vars:
    network_adapter_name: "{{ new_network_adapter }}"
    network_adapter_status: "up"
  when: guest_os_network_manager not in ["netplan", "systemd-networkd"]

# Get IP address of new interface
- name: "Set fact of searching IPv4 address"
  ansible.builtin.set_fact:
    search_ip: >-
      {%- if new_nic_ipv4_method == 'static' -%}{{ new_nic_ipv4 }}
      {%- else -%}192.168
      {%- endif -%}

- name: "Set command to get IP addresses of the new {{ adapter_type }} network adapter '{{ new_network_adapter }}'"
  ansible.builtin.set_fact:
    get_link_status_cmd: |-
      {%- if guest_os_ansible_distribution == 'FreeBSD' -%}ifconfig {{ new_network_adapter }} | grep inet | grep -v inet6 | awk '{print $2}'
      {%- else -%}ip -br addr show {{ new_network_adapter }} | awk '{print $3}'
      {%- endif -%}

- name: "Wait for IPv4 address of the new {{ adapter_type }} network adapter '{{ new_network_adapter }}'"
  ansible.builtin.shell: "{{ get_link_status_cmd }}"
  register: link_status
  changed_when: false
  until:
    - link_status is defined
    - link_status.stdout is defined
    - search_ip in link_status.stdout
  retries: 20
  delay: 5
  delegate_to: "{{ vm_guest_ip }}"
  ignore_errors: true

- name: "Print IP addresses of the new {{ adapter_type }} network adapter '{{ new_network_adapter }}'"
  ansible.builtin.debug: var=link_status

- name: "Check IPv4 address of the new {{ adapter_type }} network adapter '{{ new_network_adapter }}'"
  ansible.builtin.assert:
    that:
      - link_status is defined
      - link_status.stdout is defined
      - search_ip in link_status.stdout
    fail_msg: >-
      The new {{ adapter_type }} network adapter '{{ new_network_adapter }}'
      failed to obtain IPv4 address in 100 seconds. The command '{{ get_link_status_cmd }}'
      returned '{{ link_status | default("") }}'.

- name: "Get the new {{ adapter_type }} newtwork adapter status after applying network config"
  include_tasks: ../utils/get_network_adapters_status.yml

- name: "Update the new network adapter status after applying network config"
  ansible.builtin.set_fact:
    new_network_adapter_status: "{{ guest_network_adapters_status | selectattr('device', 'equalto', new_network_adapter) | first }}"

- name: "Set fact of the new {{ adapter_type }} network adapter's IPv4 address"
  ansible.builtin.set_fact:
    new_network_adapter_ip: >-
      {{
        (new_network_adapter_status.ipv4 | type_debug == "list") |
        ternary(new_network_adapter_status.ipv4[0].address | default('') ,
                new_network_adapter_status.ipv4.address | default(''))
      }}
  when:
    - new_network_adapter_status.ipv4 is defined
    - new_network_adapter_status.ipv4 | type_debug in ['list', 'dict']
