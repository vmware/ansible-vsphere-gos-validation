# Copyright 2022-2023 VMware, Inc.
# SPDX-License-Identifier: BSD-2-Clause
---
# Parameters
#   new_network_adapter: The name of new network adapter interface
#
- name: "Get guest network device manager"
  include_tasks: ../utils/get_network_manager.yml

- name: "Add network connection for {{ guest_os_ansible_distribution }}"
  when: guest_os_network_manager == "NetworkManager"
  block:
    - name: "Add network connection with static IP address"
      block:
        - name: "Add a network connection with static IP address for {{ new_network_adapter }}"
          ansible.builtin.shell: >-
            nmcli connection add type ethernet
            ifname {{ new_network_adapter }}
            con-name {{ new_network_adapter }}
            ip4 {{ new_nic_ipv4 }}/{{ new_nic_net_prefix }}
            gw4 {{ new_nic_gateway }}
          delegate_to: "{{ vm_guest_ip }}"
          register: nm_add_static_conn

        - name: "Set result of adding network connection with static IP address"
          ansible.builtin.set_fact:
            nm_add_connection: "{{ nm_add_static_conn }}"
      when:
        - new_nic_ipv4 is defined and new_nic_ipv4
        - new_nic_net_prefix is defined and new_nic_net_prefix
        - new_nic_gateway is defined and new_nic_gateway

    - name: "Add network connection with DHCP IP address"
      block:
        - name: "Add a network connection with DHCP IP address for {{ new_network_adapter }}"
          ansible.builtin.shell: >-
            nmcli connection add type ethernet
            ifname {{ new_network_adapter }}
            con-name {{ new_network_adapter }}
          delegate_to: "{{ vm_guest_ip }}"
          register: nm_add_dhcp_conn

        - name: "Set result of adding network connection with DHCP IP address"
          ansible.builtin.set_fact:
            nm_add_connection: "{{ nm_add_dhcp_conn }}"
      when: >-
        (new_nic_ipv4 is undefined or not new_nic_ipv4) or
        (new_nic_net_prefix is undefined or not new_nic_net_prefix) or
        (new_nic_gateway is undefined or not new_nic_gateway)

    - name: "Check network connection is added for {{ new_network_adapter }}"
      ansible.builtin.assert:
        that:
          - nm_add_connection is defined
          - nm_add_connection.rc is defined
          - nm_add_connection.rc == 0
        fail_msg: "Failed to add network connection on VM {{ vm_name }}"
        success_msg: "{{ nm_add_connection.stdout |
                      default('Successfully added network connection on VM ' ~ vm_name) }}"

# Set network config file in guest OS except VMware Photon OS
- name: "Set network config file for {{ guest_os_ansible_distribution }}"
  when:
    - guest_os_network_manager != "NetworkManager"
    - guest_os_ansible_distribution not in ["VMware Photon OS", "Astra Linux (Orel)"]
  block:
    - name: "Initialize fact of network config tempate"
      ansible.builtin.set_fact:
        network_config_template: ""

    - name: "Get network config file for '{{ new_network_adapter }}'"
      include_tasks: ../utils/get_network_config_file.yml
      vars:
        network_adapter_name: "{{ new_network_adapter }}"

    - name: "Set fact of the network config template for {{ guest_os_ansible_distribution }}"
      ansible.builtin.set_fact:
        network_config_template: rhel_network_conf.j2
      when: guest_os_family == "RedHat"

    - name: "Set fact of the network config template for Ubuntu desktop"
      ansible.builtin.set_fact:
        network_config_template: debian_network_conf.j2
      when: >
        (guest_os_ansible_distribution == "Debian") or
        (guest_os_ansible_distribution == "Ubuntu" and
         guest_os_with_gui is defined and guest_os_with_gui)

    - name: "Set fact of the network config template for Ubuntu server"
      ansible.builtin.set_fact:
        network_config_template: ubuntu_netplan_conf.j2
      when:
        - guest_os_ansible_distribution == "Ubuntu"
        - guest_os_with_gui is defined and not guest_os_with_gui

    - name: "Set fact of the network config template for SLE"
      ansible.builtin.set_fact:
        network_config_template: sles_network_conf.j2
      when: guest_os_family == "Suse"

    - name: "Set fact of the network config template for Flatcar"
      ansible.builtin.set_fact:
        network_config_template: flatcar_network_conf.j2
      when: guest_os_ansible_distribution == 'Flatcar'

    - name: "Set fact of the network config template for FreeBSD"
      ansible.builtin.set_fact:
        network_config_template: freebsd_network_conf.j2
      when: guest_os_family == "FreeBSD"

    - name: "Create or update network config file for new network interface"
      block:
        - name: "Create or update network config file '{{ network_config_path }}'"
          ansible.builtin.template:
            src: "{{ network_config_template }}"
            dest: "{{ network_config_path }}"
            mode: "0666"
          delegate_to: "{{ vm_guest_ip }}"
    
        - name: "Get content of network config file '{{ network_config_path }}'"
          ansible.builtin.command: "cat {{ network_config_path }}"
          register: network_config
          changed_when: false
          delegate_to: "{{ vm_guest_ip }}"
    
        - name: "Print content of network config file '{{ network_config_path }}'"
          ansible.builtin.debug: var=network_config.stdout_lines
      when:
        - network_config_template
        - network_config_path

- name: "Apply new netplan configuration file in Ubuntu server"
  when:
    - guest_os_ansible_distribution == "Ubuntu"
    - guest_os_network_manager == "netplan"
  block:
    # IP could be changed after netplan apply
    - name: "Apply netplan configuration file for new added nic {{ new_network_adapter }} in Ubuntu"
      ansible.builtin.command: "netplan apply"
      delegate_to: "{{ vm_guest_ip }}"
      async: 20
      poll: 0
      ignore_errors: true
      register: netplan_apply

    - name: "Sleep 60s for netplan taking effect"
      ansible.builtin.pause:
        seconds: 60

    # Update VM's guest IP
    - include_tasks: ../../common/update_inventory.yml

- name: "Apply new network configuration file for FreeBSD"
  when: guest_os_ansible_distribution == "FreeBSD"
  block:
    - name: "Apply new vmxnet3 network configuration for FreeBSD"
      when: adapter_type == "vmxnet3"
      block:
        - name: "Restart network"
          ansible.builtin.command: "/etc/netstart"
          delegate_to: "{{ vm_guest_ip }}"
          async: 60
          poll: 20
          ignore_errors: true
          register: restart_network_result
  
        - name: "Display the result to restart network"
          ansible.builtin.debug: var=restart_network_result
          when: enable_debug is defined and enable_debug

        - name: "Update VM's guest IP after apply new network configuration"
          include_tasks: ../../common/update_inventory.yml

    - name: "Reboot to apply new e1000e network configuration for FreeBSD"
      include_tasks: ../utils/reboot.yml
      when: adapter_type == "e1000e"

- include_tasks: ../utils/set_network_adapter_status.yml
  vars:
    network_adapter_name: "{{ new_network_adapter }}"
    network_adapter_status: "up"
  when: 
    - guest_os_network_manager != "netplan"

# Get IP address of new interface
- name: "Set fact of searching IPv4 address"
  ansible.builtin.set_fact:
    search_ip: "{% if adapter_type == 'pvrdma' %}{{ new_nic_ipv4 }}{% else %}192.168{% endif %}"

- name: "Set command to get link status for the new network adapter"
  ansible.builtin.set_fact:
    get_link_status_cmd: |-
      {%- if guest_os_ansible_distribution == 'FreeBSD' -%}ifconfig {{ new_network_adapter }} | grep inet | grep -v inet6 | awk '{print $2}'
      {%- else -%}ip -br addr show {{ new_network_adapter }} | awk '{print $3}'
      {%- endif -%}

- name: "Wait for network adapter '{{ new_network_adapter }}' IPv4 address"
  ansible.builtin.shell: "{{ get_link_status_cmd }}"
  register: link_status
  changed_when: false
  until:
    - link_status is defined
    - link_status.stdout is defined
    - search_ip in link_status.stdout
  retries: 20
  delay: 5
  delegate_to: "{{ vm_guest_ip }}"
  ignore_errors: true

- name: "Check network adapter '{{ new_network_adapter }}' IPv4 address"
  ansible.builtin.assert:
    that:
      - link_status is defined
      - link_status.stdout is defined
      - search_ip in link_status.stdout
    fail_msg: >-
      Network adapter '{{ new_network_adapter }}' on VM {{ vm_name }}
      failed to obtain IPv4 address after 100 seconds.
      Its current IPv4 address is '{{ link_status.stdout | default("") }}'.

- name: "Print the new networ adapter IP address"
  ansible.builtin.debug: var=link_status

- include_tasks: ../utils/get_network_adapters_status.yml
- name: "Update the new network adapter status"
  ansible.builtin.set_fact:
    new_network_adapter_status: "{{ (guest_network_adapters_status | selectattr('device', 'equalto', new_network_adapter))[0] }}"

- name: "Print the new network adapter status after applying new network config"
  ansible.builtin.debug: var=new_network_adapter_status

- name: "Set the new network adapter ip address after applying new network config"
  ansible.builtin.set_fact:
    new_network_adapter_ip: "{{ link_status.stdout }}"
