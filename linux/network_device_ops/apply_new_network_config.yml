# Copyright 2022-2024 VMware, Inc.
# SPDX-License-Identifier: BSD-2-Clause
---
# Parameters
#   new_network_adapter: The name of new network adapter interface
#
- name: "Get guest network device manager"
  include_tasks: ../utils/get_network_manager.yml
  when: >-
    guest_os_network_manager is undefined or
    not guest_os_network_manager

- name: "Add network connection for new {{ adapter_type }} network adapter on {{ vm_guest_os_distribution }}"
  when: guest_os_network_manager == "NetworkManager"
  block:
    - name: "Set fact of IPv6 config in network connection for new {{ adapter_type }} network adapter"
      ansible.builtin.set_fact:
        nmcli_ipv6_method: >-
          {{
            (guest_os_ansible_distribution == 'SLED' and
             guest_os_ansible_distribution_ver == '15.7') |
            ternary('ipv6.method disabled', '')
          }}

    - name: "Set fact of command for adding network connection with static IP addresss"
      ansible.builtin.set_fact:
        nmcli_connection_add_cmd: >-
          nmcli connection add type ethernet ifname {{ new_network_adapter }}
          con-name {{ new_network_adapter }} ipv4.method manual
          ipv4.addresses {{ new_nic_ipv4 }}/{{ new_nic_net_prefix }}
          ipv4.gateway {{ new_nic_gateway }} {{ nmcli_ipv6_method }}
      when: new_nic_ipv4_method == 'static'

    - name: "Set fact of command for adding network connection with DHCP IP addresss"
      ansible.builtin.set_fact:
        nmcli_connection_add_cmd: >-
          nmcli connection add type ethernet ifname {{ new_network_adapter }}
          con-name {{ new_network_adapter }} {{ nmcli_ipv6_method }}
      when: new_nic_ipv4_method == 'dhcp'

    - name: "Add a network connection for new {{ adapter_type }} network adapter '{{ new_network_adapter }}'"
      ansible.builtin.shell: "{{ nmcli_connection_add_cmd }}"
      delegate_to: "{{ vm_guest_ip }}"
      register: nmcli_connection_add_result

# Set network config file in guest OS except VMware Photon OS
- name: "Set network config file for new {{ adapter_type }} network adapter on {{ vm_guest_os_distribution }}"
  when:
    - guest_os_network_manager != "NetworkManager"
    - guest_os_ansible_distribution not in ["VMware Photon OS", "FreeBSD", "Astra Linux (Orel)"]
  block:
    - name: "Initialize fact of network config template"
      ansible.builtin.set_fact:
        network_config_template: ""

    - name: "Get network config file for new {{ adapter_type }} network adapter '{{ new_network_adapter }}'"
      include_tasks: ../utils/get_network_config_file.yml
      vars:
        network_adapter_name: "{{ new_network_adapter }}"

    - name: "Set fact of the network config template on {{ vm_guest_os_distribution }}"
      ansible.builtin.set_fact:
        network_config_template: "{{ guest_os_family | lower }}_network_conf.j2"
      when: guest_os_family in ["RedHat", "Suse", "Debian"]

    - name: "Set fact of the network config template on {{ vm_guest_os_distribution }}"
      ansible.builtin.set_fact:
        network_config_template: flatcar_network_conf.j2
      when: guest_os_ansible_distribution == 'Flatcar'

    - name: "Create or update network config file for new network interface"
      when:
        - network_config_template
        - network_config_path
      block:
        - name: "Create or update network config file '{{ network_config_path }}'"
          ansible.builtin.template:
            src: "{{ network_config_template }}"
            dest: "{{ network_config_path }}"
            mode: "0666"
          delegate_to: "{{ vm_guest_ip }}"

        - name: "Get content of network config file '{{ network_config_path }}'"
          ansible.builtin.command: "cat {{ network_config_path }}"
          register: network_config
          changed_when: false
          delegate_to: "{{ vm_guest_ip }}"

        - name: "Print content of network config file '{{ network_config_path }}'"
          ansible.builtin.debug: var=network_config.stdout_lines

- name: "Apply new netplan configuration file in Ubuntu server"
  when:
    - guest_os_ansible_distribution == "Ubuntu"
    - guest_os_network_manager == "netplan"
  block:
    # IP could be changed after netplan apply
    - name: "Apply netplan configuration file for new added nic {{ new_network_adapter }} in Ubuntu"
      ansible.builtin.command: "netplan apply"
      delegate_to: "{{ vm_guest_ip }}"
      async: 20
      poll: 0
      ignore_errors: true
      register: netplan_apply

    - name: "Sleep 60s for netplan taking effect"
      ansible.builtin.pause:
        seconds: 60

    # Update VM's guest IP
    - name: "Update VM's guest IP"
      include_tasks: ../../common/update_inventory.yml

- name: "Apply new network config for FreeBSD"
  when: guest_os_ansible_distribution == "FreeBSD"
  block:
    - name: "Set new {{ adapter_type }} network adapter with static IPv4 address"
      when: new_nic_ipv4_method == "static"
      block:
        - name: "Set new {{ adapter_type }} network adapter with static IPv4 address"
          ansible.builtin.shell: 'sysrc ifconfig_{{ new_network_adapter }}="inet {{ new_nic_ipv4 }}/{{ new_nic_net_prefix }}"'
          delegate_to: "{{ vm_guest_ip }}"

        - name: "Restart network and routing on {{ vm_guest_os_distribution }}"
          ansible.builtin.shell: "service netif restart && service routing restart && dhclient {{ eth0_name }}"
          delegate_to: "{{ vm_guest_ip }}"
          async: 20
          poll: 0
          ignore_errors: true

        - name: "Sleep 60s for network restarting on {{ vm_guest_os_distribution }}"
          ansible.builtin.pause:
            seconds: 60

        - name: "Update VM's guest IP in case it's changed"
          include_tasks: ../../common/update_inventory.yml

    - name: "Set new {{ adapter_type }} network adapter with DHCP IPv4 address"
      when: new_nic_ipv4_method == "dhcp"
      block:
        - name: "Set new {{ adapter_type }} network adapter with static IPv4 address"
          ansible.builtin.shell: 'sysrc ifconfig_{{ new_network_adapter }}="DHCP"'
          delegate_to: "{{ vm_guest_ip }}"

        - name: "Get DHCP IPv4 address for new {{ adapter_type }} network adapter"
          ansible.builtin.shell: "dhclient {{ new_network_adapter }}"
          delegate_to: "{{ vm_guest_ip }}"

- name: "Bring up the new {{ adapter_type }} network adapter '{{ new_network_adapter }}'"
  include_tasks: ../utils/set_network_adapter_status.yml
  vars:
    network_adapter_name: "{{ new_network_adapter }}"
    network_adapter_status: "up"
  when: guest_os_network_manager != "netplan"

# Get IP address of new interface
- name: "Set fact of searching IPv4 address"
  ansible.builtin.set_fact:
    search_ip: "{% if new_nic_ipv4 is defined and new_nic_ipv4 %}{{ new_nic_ipv4 }}{% else %}192.168{% endif %}"

- name: "Set command to get IP addresses of the new {{ adapter_type }} network adapter '{{ new_network_adapter }}'"
  ansible.builtin.set_fact:
    get_link_status_cmd: |-
      {%- if guest_os_ansible_distribution == 'FreeBSD' -%}ifconfig {{ new_network_adapter }} | grep inet | grep -v inet6 | awk '{print $2}'
      {%- else -%}ip -br addr show {{ new_network_adapter }} | awk '{print $3}'
      {%- endif -%}

- name: "Wait for IPv4 address of the new {{ adapter_type }} network adapter '{{ new_network_adapter }}'"
  ansible.builtin.shell: "{{ get_link_status_cmd }}"
  register: link_status
  changed_when: false
  until:
    - link_status is defined
    - link_status.stdout is defined
    - search_ip in link_status.stdout
  retries: 20
  delay: 5
  delegate_to: "{{ vm_guest_ip }}"
  ignore_errors: true

- name: "Print IP addresses of the new {{ adapter_type }} network adapter '{{ new_network_adapter }}'"
  ansible.builtin.debug: var=link_status

- name: "Check IPv4 address of the new {{ adapter_type }} network adapter '{{ new_network_adapter }}'"
  ansible.builtin.assert:
    that:
      - link_status is defined
      - link_status.stdout is defined
      - search_ip in link_status.stdout
    fail_msg: >-
      The new {{ adapter_type }} network adapter '{{ new_network_adapter }}'
      failed to obtain IPv4 address in 100 seconds. The command '{{ get_link_status_cmd }}'
      returned '{{ link_status | default("") }}'.

- name: "Get the new {{ adapter_type }} newtwork adapter status after applying network config"
  include_tasks: ../utils/get_network_adapters_status.yml

- name: "Update the new network adapter status after applying network config"
  ansible.builtin.set_fact:
    new_network_adapter_status: "{{ guest_network_adapters_status | selectattr('device', 'equalto', new_network_adapter) | first }}"

- name: "Set fact of the new {{ adapter_type }} network adapter's IPv4 address"
  ansible.builtin.set_fact:
    new_network_adapter_ip: >-
      {{
        (new_network_adapter_status.ipv4 | type_debug == "list") |
        ternary(new_network_adapter_status.ipv4[0].address | default('') ,
                new_network_adapter_status.ipv4.address | default(''))
      }}
  when:
    - new_network_adapter_status.ipv4 is defined
    - new_network_adapter_status.ipv4 | type_debug in ['list', 'dict']
