# Copyright 2022-2024 VMware, Inc.
# SPDX-License-Identifier: BSD-2-Clause
---
# Apply network config for the primary and secondary network adapter
#
- name: "Get the network config file for network adapter '{{ new_network_adapter_name }}'"
  include_tasks: ../utils/get_network_config_file.yml
  vars:
    network_adapter_name: "{{ new_network_adapter_name }}"

- name: "Update network connection for network adapter '{{ new_network_adapter_name }}'"
  include_tasks: update_network_connection_config.yml
  when: guest_os_network_manager == "NetworkManager"

- name: "Update systemd network config for network adapter '{{ new_network_adapter_name }}'"
  include_tasks: update_systemd_network_config.yml
  when: guest_os_network_manager == "systemd-networkd"

- name: "Update network config file for network adapter '{{ new_network_adapter_name }}'"
  when:
    - guest_os_ansible_distribution != "FreeBSD"
    - guest_os_network_manager not in ["NetworkManager", "systemd-networkd"]
  block:
    - name: "Set fact of the network config template on {{ vm_guest_os_distribution }}"
      ansible.builtin.set_fact:
        network_config_template: "{{ guest_os_family | lower }}_network_conf.j2"

    - name: "Create or update network config file '{{ network_config_path }}'"
      ansible.builtin.template:
        src: "{{ network_config_template }}"
        dest: "{{ network_config_path }}"
        mode: "0666"
      delegate_to: "{{ vm_guest_ip }}"

- name: "Apply network config for FreeBSD"
  when: guest_os_ansible_distribution == "FreeBSD"
  block:
    - name: "Set network adapter '{{ new_network_adapter_name }}' with static IPv4 address"
      ansible.builtin.shell: 'sysrc ifconfig_{{ new_network_adapter_name }}="inet {{ new_nic_ipv4 }}/{{ new_nic_net_prefix }}"'
      delegate_to: "{{ vm_guest_ip }}"
      when: new_nic_ipv4_method == "static"

    - name: "Set {{ adapter_type }} network adapter '{{ new_network_adapter_name }}' with DHCP IPv4 address"
      when: new_nic_ipv4_method == "dhcp"
      block:
        - name: "Set new {{ adapter_type }} network adapter with DHCP IPv4 address"
          ansible.builtin.shell: 'sysrc ifconfig_{{ new_network_adapter_name }}="DHCP"'
          delegate_to: "{{ vm_guest_ip }}"

        - name: "Get DHCP IPv4 address for new {{ adapter_type }} network adapter"
          ansible.builtin.shell: "dhclient {{ new_network_adapter_name }}"
          delegate_to: "{{ vm_guest_ip }}"

- name: "Reload network configs on {{ vm_guest_os_distribution }}"
  include_tasks: reload_network_configs.yml
  when: not (guest_os_ansible_distribution == "FreeBSD" and new_nic_ipv4_method == "dhcp")

# After NetworkManager reloading network configs, the primary network connection file might change
- name: "Update the network connection file for network adapter '{{ new_network_adapter_name }}'"
  include_tasks: ../utils/get_network_config_file.yml
  vars:
    network_adapter_name: "{{ new_network_adapter_name }}"
  when: guest_os_network_manager == "NetworkManager"

- name: "Collect the network config file for network adapter '{{ new_network_adapter_name }}'"
  when: network_config_path
  block:
    - name: "Fetch the network config file of {{ adapter_type }} network adapter '{{ new_network_adapter_name }}'"
      include_tasks: ../utils/fetch_file.yml
      vars:
        fetch_file_src_path: "{{ network_config_path }}"
        fetch_file_dst_path: "{{ current_test_log_folder }}/"

    - name: "Display content of network config file '{{ network_config_path }}'"
      ansible.builtin.debug:
        msg: "{{ lookup('file', fetch_file_local_path) | split('\n') }}"
