# Copyright 2024 VMware, Inc.
# SPDX-License-Identifier: BSD-2-Clause
---
# Perform network device operations on client VM
#
- name: "Test block on PVRDMA client VM"
  block:
    - name: "Set facts to perform network device operations on client VM"
      ansible.builtin.set_fact:
        vm_name: "{{ pvrdma_client_vm_name }}"
        current_test_log_folder: "{{ pvrdma_client_test_log_folder }}"
        pvrdma_client_vm_ready: false
        pvrdma_client_vm_exists: true

    - name: "Get client VM log directory and path"
      include_tasks: ../../common/vm_get_config.yml
      vars:
        property_list: ['config.files.logDirectory', 'config.files.vmPathName']

    - name: "Set facts of client VM's directory name and VMX path"
      ansible.builtin.set_fact:
        pvrdma_client_vm_dir_name: "{{ vm_config.config.files.logDirectory.split(']')[-1].strip(' \\/') }}"
        pvrdma_client_vm_vmx_path: "{{ vm_config.config.files.vmPathName | regex_replace('\\[(.*)\\] ', '/vmfs/volumes/\\1/') }}"

    - name: "Get client VM '{{ pvrdma_client_vm_name }}' primary network adapter MAC address"
      include_tasks: ../../common/vm_get_network_facts.yml

    - name: "Set fact of client VM '{{ pvrdma_client_vm_name }}' primary network adapter MAC address"
      ansible.builtin.set_fact:
        pvrdma_client_vm_primary_nic_mac: "{{ vm_network_adapters['0'].mac_addr }}"
      when:
        - vm_network_adapters is defined
        - vm_network_adapters['0'] is defined
        - vm_network_adapters['0'].mac_addr is defined

    - name: "Reset client VM '{{ pvrdma_client_vm_name }}' for updating IP address"
      include_tasks: ../../common/vm_set_power_state.yml
      vars:
        vm_power_state_set: 'restarted'

    - name: "Refresh client VM's guest IP till it has different IP with server VM"
      include_tasks:
        file: refresh_pvrdma_client_vm_ip.yml
        apply:
          when: >
             (not pvrdma_client_vm_guest_ip) or
             (pvrdma_client_vm_guest_ip in pvrdma_client_vm_invalid_ips)
      with_list: "{{ range(1, 11) | list }}"
      loop_control:
        loop_var: retry_count

    - name: "Check client VM's guest IP is not same with server VM's guest IP"
      ansible.builtin.assert:
        that:
          - pvrdma_client_vm_guest_ip not in pvrdma_client_vm_invalid_ips
        fail_msg: >-
          Client VM '{{ pvrdma_client_vm_name }}' guest IP is '{{ pvrdma_client_vm_guest_ip }}',
          which is same with server VM '{{ pvrdma_server_vm_name }}' guest IP after refreshing 10 times.
        success_msg:
          - "Server VM '{{ pvrdma_server_vm_name }}' guest IP is '{{ pvrdma_server_vm_guest_ip }}'."
          - "Client VM '{{ pvrdma_client_vm_name }}' guest IP is '{{ pvrdma_client_vm_guest_ip }}'."

    - name: "Wait for client VM being connectable"
      include_tasks: ../../common/vm_wait_connection.yml
      vars:
        vm_wait_connection_timeout: 600

    - name: "Add client VM's IP to in-memory inventory"
      include_tasks: ../../common/add_host_in_memory_inventory.yml
      vars:
        add_host_in_memory_inventory_ip: "{{ vm_guest_ip }}"
        add_host_in_memory_inventory_gp: "target_vm"
        add_host_in_memory_inventory_user: "{{ vm_username }}"
        add_host_in_memory_inventory_pwd: "{{ vm_password }}"
        add_host_in_memory_inventory_python: "{{ vm_python | default('auto') }}"
        add_host_in_memory_inventory_ssh_pipeline: "{{ vm_ssh_pipeline_enable | default(false) }}"

    - name: "Display inventory hosts in group 'target_vm'"
      ansible.builtin.debug: var=groups['target_vm']

    - name: "Set fact of client VM is ready for PVRDMA testing"
      ansible.builtin.set_fact:
        pvrdma_client_vm_ready: true

    - name: "Hot add a new {{ adapter_type }} network adapter on client VM and apply network config"
      include_tasks: hot_add_network_adapter.yml
      vars:
        new_nic_ipv4: "{{ pvrdma_client_vm_ipv4 }}"

    - name: "Check the result of pinging gateway from client VM"
      ansible.builtin.assert:
        that:
          - ping_success_after_hotadd | bool
        fail_msg: "Failed to ping gateway from PVRDMA device on client VM {{ vm_name }}"

    - name: "Update client VM guest IP when it changes"
      ansible.builtin.set_fact:
        pvrdma_client_vm_guest_ip: "{{ vm_guest_ip }}"
      when: pvrdma_client_vm_guest_ip != vm_guest_ip

    - name: "Check PVRDMA device status and reload it if necessary on client VM"
      include_tasks: check_and_reload_pvrdma.yml

    - name: "Perform PVRDMA rping test from client VM to server VM"
      include_tasks: pvrdma_rping_test.yml

    - name: "Power off the client VM"
      include_tasks: ../../common/vm_set_power_state.yml
      vars:
        vm_power_state_set: 'powered-off'

    - name: "Set fact of client VM ready to 'false'"
      ansible.builtin.set_fact:
        pvrdma_client_vm_ready: false

    - name: "Remove the client VM"
      include_tasks: ../../common/vm_remove.yml

    - name: "Set fact of client VM exists to 'false'"
      ansible.builtin.set_fact:
        pvrdma_client_vm_exists: false

    - name: "Test passed on client VM"
      ansible.builtin.debug:
        msg: "PVRDMA testing on client VM succeeded"
  rescue:
    - name: "Collect client VM's guest OS information for triage"
      when: pvrdma_client_vm_ready
      block:
        - name: "Collect client VM's guest OS logs"
          include_tasks: ../setup/linux_test_rescue.yml

        - name: "Collect client VM's RDMA devices"
          include_tasks: ../utils/get_rdma_device_info.yml

        - name: "Dump client VM's RDMA devices info to a json file"
          ansible.builtin.copy:
            dest: "{{ current_test_log_folder }}/ib_devinfo.json"
            content: "{{ guest_rdma_device_info }}"

    - name: "Collect client VM information at test failure"
      include_tasks: ../../common/test_rescue.yml
      vars:
        vm_dir_name: "{{ pvrdma_client_vm_dir_name }}"
        vm_vmx_path: "{{ pvrdma_client_vm_vmx_path }}"
      when:
        - pvrdma_client_vm_exists
        - pvrdma_client_vm_dir_name | default('')
        - pvrdma_client_vm_vmx_path | default('')

    - name: "Test failed on client VM"
      ansible.builtin.fail:
        msg: "PVRDMA testing on client VM failed"
