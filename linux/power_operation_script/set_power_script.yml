# Copyright 2024 VMware, Inc.
# SPDX-License-Identifier: BSD-2-Clause
---
# Description:
#   Set and check soft power operation
# # Parameters:
#   power_script_ops: power script operation which reprent the testcase

- name: "Start testcase {{ power_script_ops }}"
  ansible.builtin.debug:
    msg:
      - "Start testcase {{ power_script_ops }}"

- name: "Set fact of soft power operation"
  ansible.builtin.set_fact:
    power_ops: "{{ power_script_ops.split('_')[0] }}"
    power_script_type: "{{ power_script_ops.split('_')[1] }}"

- name: "Set default script for testcase {{ power_script_ops }}"
  include: set_power_script_default.yml
  vars:
    power_ops: "{{ power_ops }}"
  when: power_script_type == "default"

- name: "Set custom script for test case {{ power_script_ops }}"
  include: set_power_script_custom.yml
  vars:
    power_ops: "{{ power_ops }}"
  when: power_script_type == "custom"

- name: "Check the current configuration for testcase {{ power_script_ops }}"
  ansible.builtin.shell: vmware-toolbox-cmd script {{ power_ops }} current
  register: power_script_result
  delegate_to: "{{ vm_guest_ip }}"

- name: "Print the current configuration for testcase {{ power_script_ops }}"
  ansible.builtin.debug: var=power_script_result.stdout

- name: "Check current configuration is expected"
  ansible.builtin.assert:
    that:
      - power_script_result.stdout.strip() == script_file_path
    fail_msg: "The configuration for {{ power_script_ops }} is {{ power_script_result.stdout }}, not as expected {{ script_file_path }}."
    success_msg: "The configuration for {{ power_script_ops }} is {{ power_script_result.stdout }}, which is as expected."

# Won't works with untils/reboot.yml for poweroff event
- name: "Shutdown and then powerOn guest OS"
  when: power_ops is match('^(poweroff|poweron)')
  block:
    - name: "Shutdown VM"
      include_tasks: ../../common/vm_set_power_state.yml
      vars:
        vm_power_state_set: "shutdown-guest"

    - name: "Power on VM"
      include_tasks: ../../common/vm_set_power_state.yml
      vars:
        vm_power_state_set: "powered-on"

    - name: "Update inventory"
      include_tasks: ../../common/update_inventory.yml

- name: "Suspended guest of target vm and then resumed"
  when: power_ops is match('^(suspend|resume)')
  block:
    - name: "Suspend the VM"
      include_tasks: ../../common/vm_set_power_state.yml
      vars:
        vm_power_state_set: 'suspended'

    - name: "Power on VM"
      include_tasks: ../../common/vm_set_power_state.yml
      vars:
        vm_power_state_set: "powered-on"
        force: true

    - name: "Update inventory"
      include_tasks: ../../common/update_inventory.yml

- name: "Get content of file tools.conf"
  ansible.builtin.shell: "cat /etc/vmware-tools/tools.conf"
  register: tools_conf_content_result
  delegate_to: "{{ vm_guest_ip }}"

- name: "Set fact of power script config in tools.conf"
  ansible.builtin.set_fact:
    power_script_filename: "{{ script_file_path.split('/')[-1].strip() }}"

- name: "Check the configuration is expected in tools.conf"
  ansible.builtin.assert:
    that:
      - tools_conf_content_result.stdout is defined
      - tools_conf_content_result.stdout.find(power_script_filename) != -1
    fail_msg: "Not found the {{ script_file_path }} in tool.conf for {{ power_script_ops }}, which is not as expected"
    success_msg: "Found the {{ script_file_path }} in tool.conf for {{ power_script_ops }}, which is as expected."

- name: "Check the script file running as expected"
  ansible.builtin.stat:
    path: "{{ script_tag_path }}"
  delegate_to: "{{ vm_guest_ip }}"
  register: tag_path_exist_result
  failed_when: not tag_path_exist_result.stat.exists
  when:
    - script_tag_path is defined and script_tag_path
    - power_script_type == "custom"
    - power_ops != "suspend"

- name: "Check log file"
  ansible.builtin.shell: "grep '{{ script_file_path }}' {{ vmtools_vmtoolsd_log_file }}"
  delegate_to: "{{ vm_guest_ip }}"
  ignore_errors: true
  register: result_search_str

- name: "Check the log file"
  ansible.builtin.assert:
    that:
      - result_search_str.rc is defined
      - result_search_str.rc == 0
    fail_msg: "Not found the {{ script_file_path }} in  {{ vmtools_vmtoolsd_log_file }} for {{ power_script_ops }}, which is not as expected"
    success_msg: "Found the {{ script_file_path }} in {{ vmtools_vmtoolsd_log_file }} for {{ power_script_ops }}, which is as expected."

- name: "Cleanup current power script configuration"
  ansible.builtin.shell: vmware-toolbox-cmd script {{ power_ops }} disable
  delegate_to: "{{ vm_guest_ip }}"

- name: "End of testcase {{ power_script_ops }}"
  ansible.builtin.debug:
    msg:
      - "End of testcase {{ power_script_ops }}"
