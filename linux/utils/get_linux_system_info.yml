# Copyright 2021-2024 VMware, Inc.
# SPDX-License-Identifier: BSD-2-Clause
---
# Get Linux OS system information
#
- name: "Get guest OS distribution info"
  include_tasks: ../../common/get_guest_system_info.yml

- name: "Get OS release info"
  include_tasks: get_os_release.yml

- name: "Correct guest OS ansible distribution for RHCOS"
  ansible.builtin.set_fact:
    guest_os_ansible_distribution: "RHCOS"
  when:
    - guest_os_release.ID is defined
    - guest_os_release.ID == 'rhcos'

- name: "Correct OS distribution version for Miracle Linux 8.x"
  ansible.builtin.set_fact:
    guest_os_ansible_distribution_ver: "{{ guest_os_release.VERSION.split()[0] }}"
    guest_os_ansible_distribution_minor_ver:  "{{ guest_os_release.VERSION.split()[0].split('.')[-1] }}"
  when: 
    - guest_os_ansible_distribution == "MIRACLE"
    - guest_os_ansible_distribution_major_ver | int  == 8
    - guest_os_release.VERSION is defined and (guest_os_release.VERSION | regex_search('\\d\\.\\d'))

- name: "Set fact of guest OS ansible distribution is correct or not"
  ansible.builtin.set_fact:
    guest_os_ansible_distrib_is_correct: >-
      {{
        not (guest_os_ansible_distribution == 'RedHat' and
        guest_os_release.NAME is defined and
        guest_os_release.NAME != 'Red Hat Enterprise Linux')
      }}

- name: "Correct OS distribution info"
  when: not guest_os_ansible_distrib_is_correct
  block:
    # Overwrite /etc/redhat-release with correct OS release information
    # for RHEL variant OS like ProLinux so that ansible can retrieve
    # correct distribution
    - name: "Get content of guest OS file /etc/redhat-release"
      ansible.builtin.command: "cat /etc/redhat-release"
      delegate_to: "{{ vm_guest_ip }}"
      ignore_errors: true
      register: get_redhat_release

    - name: "Set fact of guest OS redhat release"
      ansible.builtin.set_fact:
        guest_os_redhat_release: "{{ get_redhat_release.stdout | default('') }}"

    - name: "Display content of guest OS file /etc/redhat-release"
      ansible.builtin.debug: var=guest_os_redhat_release

    - name: "Correct guest OS distribution info"
      when: guest_os_redhat_release | regex_search("Red *Hat", ignorecase=True)
      block:
        - name: "Get content of guest OS file /etc/system-release"
          ansible.builtin.command: "cat /etc/system-release"
          delegate_to: "{{ vm_guest_ip }}"
          ignore_errors: true
          register: get_system_release

        - name: "Update /etc/redhat-release and refresh OS distribution info"
          when:
            - get_system_release.stdout is defined
            - get_system_release.stdout
          block:
            - name: "Set fact of guest OS system release"
              ansible.builtin.set_fact:
                guest_os_system_release: "{{ get_system_release.stdout }}"

            - name: "Display content of guest OS file /etc/system-release"
              ansible.builtin.debug: var=guest_os_system_release

            - name: "Overwrite /etc/redhat-release with /etc/system-release"
              ansible.builtin.shell: "echo '{{ guest_os_system_release }}' > /etc/redhat-release"
              delegate_to: "{{ vm_guest_ip }}"

            - name: "Update guest OS distribution info"
              include_tasks: ../../common/get_guest_system_info.yml

            - name: "Restore /etc/redhat-release"
              ansible.builtin.shell: "echo '{{ guest_os_redhat_release }}' > /etc/redhat-release"
              delegate_to: "{{ vm_guest_ip }}"

- name: "Set OS family for {{ guest_os_ansible_distribution }} to RedHat"
  ansible.builtin.set_fact:
    guest_os_family: "RedHat"
  when:
    - "'ansible_distribution_file_variety' in guest_system_info"
    - guest_system_info.ansible_distribution_file_variety == "RedHat"
    - guest_os_family != "RedHat"

- name: "Set fact of OS bit"
  ansible.builtin.set_fact:
    guest_os_bit: "{% if guest_os_ansible_architecture in ['x86_64', 'amd64', 'aarch64'] %}64-bit{% else %}32-bit{% endif %}"

- name: "Check whether guest OS has GUI"
  include_tasks: check_guest_os_gui.yml

- name: "Get guest OS edition"
  include_tasks: get_os_edition.yml

- name: "Print Linux guest OS information"
  ansible.builtin.debug:
    msg:
      - "Guest OS: {{ guest_os_ansible_distribution }}"
      - "Guest OS type: {{ guest_os_ansible_system }}"
      - "Guest OS arch: {{ guest_os_ansible_architecture }}"
      - "Guest OS bit: {{ guest_os_bit }}"
      - "Guest OS major version: {{ guest_os_ansible_distribution_major_ver }}"
      - "Guest OS minor version: {{ guest_os_ansible_distribution_minor_ver }}"
      - "Guest OS version: {{ guest_os_ansible_distribution_ver }}"
      - "Guest OS kernel: {{ guest_os_ansible_kernel }}"
      - "Guest OS release: {{ guest_os_ansible_distribution_release }}"
      - "Guest OS edition: {{ guest_os_edition }}"
      - "Guest OS family: {{ guest_os_family }}"
      - "Guest OS with desktop environment: {{ guest_os_with_gui }}"
      - "Guest OS display manager: {{ guest_os_display_manager }}"

- name: "Set fact of VM guest OS type"
  ansible.builtin.set_fact:
    vm_guest_os_distribution: >-
      {{ guest_os_ansible_distribution }}
      {{ (guest_os_ansible_distribution_ver ~ ' ' ~ guest_os_edition).strip() }}
      {{ guest_os_ansible_architecture }}

- name: "Set fact that ansible system information about guest OS has been retrieved"
  ansible.builtin.set_fact:
    guest_os_system_info_retrieved: true
