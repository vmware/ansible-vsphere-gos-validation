# Copyright 2021-2023 VMware, Inc.
# SPDX-License-Identifier: BSD-2-Clause
#
# Eject CDROM device in Linux guest OS
# Parameters:
#   guest_cdrom_device_num: If defined, the specified cdrom device will be ejected.
#                           Otherwise, all cdrom devices will be ejected.
#
- name: "Initialize the fact of guest CDROM devices with ISO connected"
  ansible.builtin.set_fact:
    guest_cdroms: []

- name: "Set CDROM device to be ejected"
  ansible.builtin.set_fact:
    eject_cdrom_name: "sr{{ guest_cdrom_device_num | int }}"
  when:
    - guest_cdrom_device_num is defined
    - guest_cdrom_device_num is match('^[0-9]$')

- name: "All CDROM connected to ISO will be ejected"
  ansible.builtin.set_fact:
    eject_cdrom_name: ""
  when: >
    guest_cdrom_device_num is undefined or
    guest_cdrom_device_num is not match('^[0-9]$')

- name: "Get the fact of all block devices"
  ansible.builtin.command: "lsblk -o NAME,TYPE,FSTYPE"
  register: lsblk_result
  delegate_to: "{{ vm_guest_ip }}"

- block:
    - name: "Set the fact of guest CDROM devices with ISO connected"
      ansible.builtin.set_fact:
        guest_cdroms: "{{ guest_cdroms | union(['/dev/' ~ lsblk_item.split()[0]]) }}"
      when:
        - lsblk_item.split() | length == 3
        - lsblk_item.split()[1] | lower == 'rom'
        - lsblk_item.split()[-1] | lower in ['iso9660', 'udf']
      with_items: "{{ lsblk_result.stdout_lines }}"
      loop_control:
        loop_var: lsblk_item

    - name: "Print the CDROM devices connecting to ISO"
      ansible.builtin.debug: var=guest_cdroms
  when:
    - lsblk_result is defined
    - lsblk_result.stdout_lines is defined
    - lsblk_result.stdout_lines | length > 0

- block:
    - include_tasks: ../../common/get_system_info.yml
      vars:
        filter: "ansible_mounts"

    - name: "Get the fact about all OS mounts"
      ansible.builtin.set_fact:
        guest_os_ansible_mounts: "{{ guest_system_info.ansible_mounts | selectattr('device', 'in', guest_cdroms) | map(attribute='mount') }}"

    # Unmount ISO images before ejecting them
    - name: "Umount CDROM devices"
      ansible.posix.mount:
        path: "{{ guest_cdrom_mount }}"
        state: absent
      delegate_to: "{{ vm_guest_ip }}"
      become: true
      with_items: "{{ guest_os_ansible_mounts }}"
      loop_control:
        loop_var: guest_cdrom_mount
      when: guest_os_ansible_mounts | length > 0

    # Eject connected CDROM
    - name: "Eject CDROM device {{ guest_cdrom_device }}"
      ansible.builtin.command: "eject -v {{ guest_cdrom_device }}"
      delegate_to: "{{ vm_guest_ip }}"
      register: eject_cdrom_result
      when: >
        not eject_cdrom_name or
        guest_cdrom_device.split('/')[-1] == eject_cdrom_name
      with_items: "{{ guest_cdroms }}"
      loop_control:
        loop_var: guest_cdrom_device

    - name: "Print CDROM eject result"
      ansible.builtin.debug: var=eject_cdrom_result
  when: guest_cdroms | length > 0
