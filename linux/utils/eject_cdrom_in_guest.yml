# Copyright 2021-2024 VMware, Inc.
# SPDX-License-Identifier: BSD-2-Clause
---
# Eject CDROM device in Linux guest OS
# Parameters:
#   guest_cdrom_device_num: If defined, the specified cdrom device will be ejected.
#                           Otherwise, all cdrom devices will be ejected.
#
- name: "Initialize the fact of guest CDROM devices with ISO connected"
  ansible.builtin.set_fact:
    guest_cdroms: []

- name: "Get all CDROM devices in guest OS"
  include_tasks: get_device_list.yml
  vars:
    guest_device_type: "rom"

- name: "Get CDROM devices connected to ISO in guest OS"
  ansible.builtin.set_fact:
    guest_cdroms: >-
      {{
        guest_device_list |
        selectattr('fstype', 'in', ['iso9660', 'udf']) |
        map(attribute='name') |
        map('regex_replace', '^', '/dev/')
      }}

- name: "Get the CDROM device to eject in guest OS"
  ansible.builtin.set_fact:
    guest_cdroms: "{{ guest_cdroms | select('match', '/dev/sr' ~ guest_cdrom_device_num) }}"
  when:
    - guest_cdrom_device_num is defined
    - guest_cdrom_device_num is match('^[0-9]$')

- name: "Unmount and eject CDROM devices"
  when: guest_cdroms | length > 0
  block:
    - name: "Get mounted CDROM devices in guest OS"
      include_tasks: ../../common/get_system_info.yml
      vars:
        filter: "ansible_mounts"

    - name: "Set fact of mounted CDROM devices in guest OS"
      ansible.builtin.set_fact:
        guest_os_mounted_cdroms: "{{ guest_system_info.ansible_mounts | selectattr('device', 'in', guest_cdroms) }}"

    # Unmount ISO images before ejecting them
    - name: "Umount CDROM devices"
      include_tasks: set_mount_point.yml
      vars:
        mount_point_src: "{{ guest_cdrom_mount.device }}"
        mount_point_path: "{{ guest_cdrom_mount.mount }}"
        mount_state: "unmounted"
      with_items: "{{ guest_os_mounted_cdroms }}"
      loop_control:
        loop_var: guest_cdrom_mount
      when: guest_os_mounted_cdroms | length > 0

    # Eject connected CDROM
    - name: "Eject CDROM device"
      ansible.builtin.command: "eject -v {{ guest_cdrom_device }}"
      delegate_to: "{{ vm_guest_ip }}"
      register: eject_cdrom_result
      with_items: "{{ guest_cdroms }}"
      loop_control:
        loop_var: guest_cdrom_device

    - name: "Print CDROM eject result"
      ansible.builtin.debug: var=eject_cdrom_result
