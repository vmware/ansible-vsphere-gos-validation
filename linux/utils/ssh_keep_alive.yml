# Copyright 2021-2023 VMware, Inc.
# SPDX-License-Identifier: BSD-2-Clause
---
- name: "Initialize sshd service info and config file"
  ansible.builtin.set_fact:
    sshd_service_info: ""
    sshd_config_file: "/etc/ssh/sshd_config"

- name: "Check sshd config file status"
  include_tasks: get_file_stat_info.yml
  vars:
    guest_file_path: "{{ sshd_config_file }}"

- name: "Set fact of sshd config file exists or not"
  ansible.builtin.set_fact:
    sshd_config_file_exists: "{{ guest_file_exists }}"

# Modify sshd config to keep connection alive
- name: "Modify sshd config to keep connection alive"
  block:
    - name: "Set TCPKeepAlive=yes in /etc/ssh/sshd_config"
      ansible.builtin.replace:
        path: "{{ sshd_config_file }}"
        regexp: "^#?TCPKeepAlive .*"
        replace: "TCPKeepAlive yes"
      register: replacement
      delegate_to: "{{ vm_guest_ip }}"

    - name: "Get sshd service info"
      include_tasks: get_service_info.yml
      vars:
        service_name: "sshd"

    - name: "Not found sshd service, try to get ssh service info"
      include_tasks: get_service_info.yml
      vars:
        service_name: "ssh"
      when: >
        not service_info or
        service_info.name is undefined or
        not service_info.name or
        service_info.state is undefined or
        service_info.state != "running"

    - name: "Found {{ service_info.name }}, update sshd service info with it"
      ansible.builtin.set_fact:
        sshd_service_info: "{{ service_info }}"
      when:
        - service_info
        - service_info.name is defined
        - service_info.name
        - service_info.state is defined
        - service_info.state == "running"

    - name: "Check sshd or ssh service exists"
      ansible.builtin.assert:
        that:
          - sshd_service_info
        fail_msg: "Failed to find sshd or ssh service in guest OS"

    - name: "Restart {{ sshd_service_info.name }}"
      ansible.builtin.service:
        name: "{{ sshd_service_info.name }}"
        state: restarted
      register: restart_sshd_result
      delegate_to: "{{ vm_guest_ip }}"

    - name: "Print {{ sshd_service_info.name }} restart result"
      ansible.builtin.debug: var=restart_sshd_result
  when: sshd_config_file_exists | bool
