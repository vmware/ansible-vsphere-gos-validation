# Copyright 2023-2024 VMware, Inc.
# SPDX-License-Identifier: BSD-2-Clause
---
# Get network network config file for an interface
# Parameters:
#   network_adapter_name: The network interface name.
# Return:
#   network_config_path: The network interface config file path.
#   network_connection_name: The network connection name managed by NetworkManager.
#
- name: "Initialize facts of network config file and connection name for {{ network_adapter_name }}"
  ansible.builtin.set_fact:
    network_config_path: ""
    network_connection_name: ""

- name: "Get network device manager in guest OS"
  include_tasks: get_network_manager.yml
  when: >-
    guest_os_network_manager is undefined or
    not guest_os_network_manager

- name: "Get network config file from NetworkManager"
  when: guest_os_network_manager == "NetworkManager"
  block:
    - name: "Get all active network connections on {{ vm_guest_os_distribution }}"
      ansible.builtin.shell: "nmcli -t -f DEVICE,FILENAME,NAME connection show --active"
      delegate_to: "{{ vm_guest_ip }}"
      register: "network_conn_result"
      ignore_errors: true

    - name: "Get active network connections for '{{ network_adapter_name }}'"
      ansible.builtin.set_fact:
        active_network_connections: "{{ network_conn_result.stdout_lines | select('match', network_adapter_name ~ ':.*') }}"
      when:
        - network_conn_result.rc is defined
        - network_conn_result.rc == 0
        - network_conn_result.stdout_lines is defined
        - network_conn_result.stdout_lines | length > 0

    - name: "Set fact of network config file for '{{ network_adapter_name }}' on {{ vm_guest_os_distribution }}"
      ansible.builtin.set_fact:
        network_config_path: "{{ network_conn_properties[1] }}"
        network_connection_name: "{{ network_conn_properties[2] }}"
      vars:
        network_conn_properties: "{{ active_network_connections[0].split(':') }}"
      when: active_network_connections | length == 1

- name: "Set fact of network config file for '{{ network_adapter_name }}' on {{ vm_guest_os_distribution }}"
  ansible.builtin.set_fact:
    network_config_path: "/etc/systemd/network/{{ network_adapter_name }}.network"
  when: guest_os_network_manager == "systemd-networkd"

# Set fact of network config file in guest OS except VMware Photon OS
- name: "Set fact of network config file"
  when: guest_os_network_manager not in ["NetworkManager", "systemd-networkd"]
  block:
    - name: "Set fact of network config file for '{{ network_adapter_name }}' on {{ vm_guest_os_distribution }}"
      ansible.builtin.set_fact:
        network_config_path: "/etc/sysconfig/network-scripts/ifcfg-{{ network_adapter_name }}"
      when: guest_os_family == "RedHat"

    - name: "Set fact of network config file for '{{ network_adapter_name }}' on Ubuntu desktop"
      ansible.builtin.set_fact:
        network_config_path: "/etc/network/interfaces"
      when: >
        (guest_os_ansible_distribution == "Debian") or
        (guest_os_ansible_distribution == "Pardus GNU/Linux") or
        (guest_os_ansible_distribution == "Ubuntu" and
         guest_os_network_manager != "netplan")

    - name: "Set fact of network config file in Ubuntu server"
      when:
        - guest_os_ansible_distribution == "Ubuntu"
        - guest_os_network_manager == "netplan"
      block:
        - name: "Get netplan config file in Ubuntu server"
          include_tasks: ../utils/get_netplan_config_file.yml

        - name: "Set fact of network config file for '{{ network_adapter_name }}' on Ubuntu server"
          ansible.builtin.set_fact:
            network_config_path: "{{ netplan_config_file }}"
          when: netplan_config_file is defined

    - name: "Set fact of network config file for '{{ network_adapter_name }}' on SLE"
      ansible.builtin.set_fact:
        network_config_path: "/etc/sysconfig/network/ifcfg-{{ network_adapter_name }}"
      when: guest_os_family == "Suse"

    - name: "Set fact of network config file for '{{ network_adapter_name }}' on FreeBSD"
      ansible.builtin.set_fact:
        network_config_path: "/etc/rc.conf"
      when: guest_os_family == "FreeBSD"
