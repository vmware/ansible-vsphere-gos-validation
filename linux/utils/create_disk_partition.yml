# Copyright 2022 VMware, Inc.
# SPDX-License-Identifier: BSD-2-Clause
---
# Description:
#   Format and create 1 new partition on a disk
# Parameters:
#   disk_name: The disk name to be formatted and create partition
#   partition_fstype: Create filesystem on new partition, which could be ext4, xfs
#                         or btrfs, etc. The default filesystem is ext4.
# Return:
#   partition_name: The disk partition name
#   partition_device_path: The disk partition device path
#
- name: "Initialize disk partition name and device path"
  ansible.builtin.set_fact:
    partition_name: ""
    partition_device_path: ""

- name: "Set default partition filesystem to ext4"
  ansible.builtin.set_fact:
    partition_fstype: "ext4"
  when: >
    partition_fstype is undefined or
    not partition_fstype

- name: "Check filesystem is supported by guest OS"
  ansible.builtin.shell: "which mkfs.{{ partition_fstype }}"
  ignore_errors: true
  changed_when: false
  delegate_to: "{{ vm_guest_ip }}"
  register: check_fs

- name: "Filesystem {{ partition_fstype }} is not supported"
  ansible.builtin.fail:
    msg: >-
      Guest OS doesn't support Filesystem {{ partition_fstype }}, so it can't
      create partition with filesystem {{ partition_fstype }} on disk {{ disk_name }}
  when: >
    check_fs is undefined or
    check_fs.rc is undefined or
    check_fs.rc != 0

- name: "Create 1 partition on disk {{ disk_name }}"
  ansible.builtin.shell: |
    set -o pipefail
    (echo n; echo p; echo; echo; echo; echo w) | fdisk "/dev/{{ disk_name }}"
  args:
    executable: /bin/bash
  delegate_to: "{{ vm_guest_ip }}"
  register: parted_result

- name: "Set fact of partition name"
  ansible.builtin.set_fact:
    partition_name: |-
      {%- if disk_name is match('.*\\d$') -%}{{ disk_name }}p1
      {%- else -%}{{ disk_name }}1{%- endif -%}

- name: "Set fact of partition device path"
  ansible.builtin.set_fact:
    partition_device_path: "/dev/{{ partition_name }}"

- name: "Create filesystem on partition {{ partition_device_path }}"
  community.general.filesystem:
    fstype: "{{ partition_fstype }}"
    dev: "{{ partition_device_path }}"
  delegate_to: "{{ vm_guest_ip }}"

- name: "Get the UUID of partition {{ partition_device_path }}"
  ansible.builtin.shell: "blkid -o export {{ partition_device_path }}"
  changed_when: false
  delegate_to: "{{ vm_guest_ip }}"
  register: blkid_part_result

- name: "Get partition UUID from the output"
  block:
    - name: "Get the line contains partition UUID"
      ansible.builtin.set_fact:
        blkid_part_uuid_lines: "{{ blkid_part_result.stdout_lines | select('match', '^UUID=.*') }}"

    - name: "Set the fact of partition {{ partition_device_path }} UUID"
      ansible.builtin.set_fact:
        partition_uuid: "{{ blkid_part_uuid_lines[0].split('=')[-1] }}"
      when: blkid_part_uuid_lines | length == 1
  when:
    - blkid_part_result is defined
    - blkid_part_result.stdout_lines is defined
    - blkid_part_result.stdout_lines | length > 0

- name: "Check the UUID of partition {{ partition_device_path }}"
  ansible.builtin.assert:
    that:
      - partition_uuid
    fail_msg: "Failed to get UUID of partition {{ partition_device_path }}"

- name: "Print the new disk partition name, UUID, device path, and filesystem"
  ansible.builtin.debug:
    msg:
      - "The new disk partition name: {{ partition_name }}"
      - "The new disk partition UUID: {{ partition_uuid }}"
      - "The new disk partition device path: {{ partition_device_path }}"
      - "The new disk partition filesystem: {{ partition_fstype }}"
