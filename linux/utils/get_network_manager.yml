# Copyright 2022-2023 VMware, Inc.
# SPDX-License-Identifier: BSD-2-Clause
---
# Get the network device manager in guest OS

# Set fact of network config file in guest OSes except VMware Photon OS
- name: "Initialize the fact of guest OS network manager as traditional"
  ansible.builtin.set_fact:
    guest_os_network_manager: "traditional"

# Although Debian has NetworkManager, it still uses ifdown/ifup to manage its network devices
- name: "{{ guest_os_ansible_distribution }} {{ guest_os_ansible_distribution_ver }} network device manager is traditional ifdown/ifup"
  ansible.builtin.set_fact:
    guest_os_network_manager: "traditional"
  when: guest_os_ansible_distribution == "Debian"

- name: "Set network device manager for {{ guest_os_ansible_distribution }}"
  when: guest_os_ansible_distribution not in ["Debian", "FreeBSD"]
  block:
    - include_tasks: get_service_info.yml
      vars:
        service_name: "NetworkManager.service"

    # RHEL/SLED/Ubuntu Desktop network interfaces are managed by NetworkManager
    - name: "{{ guest_os_ansible_distribution }} {{ guest_os_ansible_distribution_ver }} network device manager is NetworkManager"
      ansible.builtin.set_fact:
        guest_os_network_manager: "NetworkManager"
      when:
        - service_info
        - service_info.state is defined
        - service_info.state in ['active', 'running']

    - name: "Set network device manager for guest OS which doesn't have NetworkManager"
      block:
        # SLES uses netplan to manage network interfaces
        - name: "{{ guest_os_ansible_distribution }} {{ guest_os_ansible_distribution_ver }} network device manager is wicked"
          ansible.builtin.set_fact:
            guest_os_network_manager: "wicked"
          when: guest_os_family == "Suse"

        # Ubuntu server uses netplan to manage network interfaces
        - name: "{{ guest_os_ansible_distribution }} {{ guest_os_ansible_distribution_ver }} network device manager is netplan"
          ansible.builtin.set_fact:
            guest_os_network_manager: "netplan"
          when: guest_os_ansible_distribution == "Ubuntu"

        # Old RHEL uses ifdown/ifup to manage network interfaces
        - name: "{{ guest_os_ansible_distribution }} {{ guest_os_ansible_distribution_ver }} network device manager is traditional ifdown/ifup"
          ansible.builtin.set_fact:
            guest_os_network_manager: "traditional"
          when: guest_os_family == "RedHat"

        # VMware Photon OS/Flatcar uses systemd-networkd to manage network interface
        - name: "{{ guest_os_ansible_distribution }} {{ guest_os_ansible_distribution_ver }} network device manager is systemd-networkd"
          ansible.builtin.set_fact:
            guest_os_network_manager: "systemd-networkd"
          when: guest_os_ansible_distribution in ['VMware Photon OS', 'Flatcar'] 
      when: >
        (not service_info or
        service_info.state is undefined or
        service_info.state not in ['active', 'running'])

- name: "Set network device manager for {{ guest_os_ansible_distribution }}"
  ansible.builtin.set_fact:
    guest_os_network_manager: "netif"
  when: guest_os_ansible_distribution == "FreeBSD"
