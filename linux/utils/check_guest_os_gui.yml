# Copyright 2021-2024 VMware, Inc.
# SPDX-License-Identifier: BSD-2-Clause
---
# Check whether guest OS has desktop environment, 
# If desktop environment is running, and get session type and desktop.
#
- name: "Initialize facts about guest OS desktop environment"
  ansible.builtin.set_fact:
    guest_os_with_gui: false
    guest_os_session_type: "tty"
    guest_os_session_desktop: ""

- name: "Get display manager and services in guest OS"
  include_tasks: get_display_manager.yml

- name: "Set fact of guest OS has desktop environment"
  ansible.builtin.set_fact:
    guest_os_with_gui: true
  when:
    - guest_os_display_manager
    - display_manager_is_running

- name: "Get login session type and desktop on Linux"
  when:
    - guest_os_ansible_system == "linux"
    - guest_os_with_gui
    - systemd_logind_is_running
  block:
    - name: "List all login sessions in guest OS"
      ansible.builtin.shell: "loginctl --no-legend list-sessions | awk '{print $1}'"
      delegate_to: "{{ vm_guest_ip }}"
      register: list_login_sessions
      ignore_errors: true

    - name: "Get desktop session from login sessions"
      when:
        - list_login_sessions.rc is defined
        - list_login_sessions.rc == 0
        - list_login_sessions.stdout_lines is defined
        - list_login_sessions.stdout_lines | length > 0
      block:
        - name: "Get types of all login sessions"
          ansible.builtin.shell: "loginctl -p Type -p Desktop show-session {{ session_id }}"
          delegate_to: "{{ vm_guest_ip }}"
          register: get_session_types
          ignore_errors: true
          with_items: "{{ list_login_sessions.stdout_lines }}"
          loop_control:
            loop_var: session_id

        - name: "Set fact of all login session types for desktop environment"
          ansible.builtin.set_fact:
            guest_login_sessions: >-
              {{
                get_session_types.results |
                selectattr('stdout', 'defined') |
                map(attribute='stdout') |
                map('replace', '=', ': ') |
                map('from_yaml') |
                select('search', 'x11|wayland', ignorecase=true)
              }}

        - name: "Set facts of login session type and desktop in guest OS"
          ansible.builtin.set_fact:
            guest_os_session_type: "{{ guest_login_sessions[0].Type | default('') }}"
            guest_os_session_desktop: "{{ guest_login_sessions[0].Desktop | default('') }}"
          when: guest_login_sessions | length > 0

- name: "Get login session type and desktop on FreeBSD"
  when:
    - guest_os_ansible_system == "freebsd"
    - guest_os_with_gui
  block:
    - name: "Check Xorg or Xwayland is running or not"
      ansible.builtin.shell: "pgrep -l 'Xorg|Xwayland'"
      ignore_errors: true
      delegate_to: "{{ vm_guest_ip }}"
      register: pgrep_result

    - name: "Set fact of login session type in guest OS"
      ansible.builtin.set_fact:
        guest_os_session_type: |-
          {%- if 'Xorg' in pgrep_result.stdout -%}x11
          {%- elif 'Xwayland' in pgrep_result.stdout -%}wayland
          {%- endif -%}
      when:
        - pgrep_result.rc is defined
        - pgrep_result.rc == 0
        - pgrep_result.stdout is defined
        - pgrep_result.stdout

- name: "Display guest OS desktop facts"
  ansible.builtin.debug:
    msg:
      - "Guest OS has desktop environment: {{ guest_os_with_gui }}"
      - "Guest OS display manager: {{ guest_os_display_manager }}"
      - "Guest OS session type: {{ guest_os_session_type }}"
      - "Guest OS session desktop: {{ guest_os_session_desktop }}"
