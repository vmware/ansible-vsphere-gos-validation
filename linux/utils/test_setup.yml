# Copyright 2021 VMware, Inc.
# SPDX-License-Identifier: BSD-2-Clause
# test_setup will be called at the beginning of the test case, except deploy_vm test
#
- name: "testcase: {{ ansible_play_name }}"
  debug:
    msg: "Starting testcase {{ ansible_play_name }}"

# Each case's information collection folder
- name: Set Each case run information collection folder
  set_fact:
    testcase_info_collect_path: "{{ testrun_log_path }}/{{ ansible_play_name }}"

- name: "Set fact of default check VMware tools status to True"
  set_fact:
    vmtools_check: True
  when: vmtools_check is undefined

- name: "Set fact of not use saved VM guest IP in testing"
  set_fact:
    use_saved_base_ip: False
  when: use_saved_base_ip is undefined

# Get exist status of the base snapshot
- block:
    - include_tasks: ../../common/vm_check_snapshot_exist.yml
      vars:
        snapshot_name: "{{ base_snapshot_name }}"
      when: new_vm is undefined or (new_vm is defined and not new_vm|bool)
    - name: Initial base_snapshot_exist to "{{ snapshot_exist|default(False) }}"
      set_fact:
        base_snapshot_exist: "{{ snapshot_exist|default(False) }}"
  when: base_snapshot_exist is undefined

- name: Initialize VM guest IP address
  set_fact:
    vm_guest_base_ip: ""
  when:
    - use_saved_base_ip | bool
    - vm_guest_base_ip is undefined

- include_tasks: ../../common/vm_revert_snapshot.yml
  vars:
    snapshot_name: "{{ base_snapshot_name }}"
  when: base_snapshot_exist

#Get VM guest IP
- include_tasks: ../../common/update_inventory.yml
  when: >
    (not use_saved_base_ip | bool) or
    (use_saved_base_ip | bool and not vm_guest_base_ip)

# Save VM IP for reuse
- block:
    - name: Save vm_guest_ip if necessary
      set_fact:
        vm_guest_base_ip: "{{ vm_guest_ip }}"
      when: not vm_guest_base_ip

    # Refresh and reconnect VM guest IP
    - block:
        - name: Set vm_guest_ip to use saved base snapshot IP if necessary
          set_fact:
            vm_guest_ip: "{{ vm_guest_base_ip }}"

        - include_tasks: ../../common/vm_wait_connection.yml
      when: vm_guest_ip != vm_guest_base_ip
  when: use_saved_base_ip | bool

- name: "Print VM guest IP address"
  debug: var=vm_guest_ip

# Retrieve VM's guest id and hardware version
- block:
    - include_tasks: ../../common/vm_get_config.yml
      vars:
        property_list: ['config.guestId', 'config.version']

    - name: "Set fact of the guest id and hardware version"
      set_fact:
        vm_guest_id: "{{ vm_config.config.guestId }}"
        vm_hardware_version: "{{ vm_config.config.version }}"
  when: (vm_guest_id is undefined) or (vm_hardware_version is undefined)

- name: "Print VM guest id"
  debug: var=vm_guest_id
- name: "Print VM hardware version"
  debug: var=vm_hardware_version

# Only get vmtools status as necessary
- include_tasks: ../../common/vm_get_vmtools_status.yml
  when: >
    vmtools_check or
    new_vm is undefined or
    (not new_vm | bool and
     vm_guest_id == "vmwarePhoton64Guest")

# Disable iptables to allow IP pingable in Photon OS
- include_tasks: disable_iptables.yml
  when:
    - (new_vm is undefined) or (not new_vm | bool)
    - vm_guest_id == "vmwarePhoton64Guest"
    - vmtools_is_running

# Get guest system info once
- include_tasks: ../../common/get_guest_system_info.yml

- include_tasks: check_guest_os_gui.yml
  when: guest_os_with_gui is undefined

- include_tasks: get_guest_ovt_version_build.yml
  when:
    - vmtools_is_installed | bool
    - vmtools_info_from_vmtoolsd is undefined or not vmtools_info_from_vmtoolsd

#Create a base snapshot if necessary
- block:
    # Prepare VM ansible run environment
    # If it is a Ubuntu or Debian system, modify sshd config to keep connection alive
    - include_tasks: ssh_keep_alive.yml
      when: guest_os_ansible_distribution in ["Ubuntu", "Debian"]
    # Diable auto update for Ubuntu OS
    - include_tasks: disable_auto_update.yml

    - block:
        - include_tasks: get_installed_package_info.yml
          vars:
            package_name: "gawk"

        - include_tasks: install_uninstall_package.yml
          vars:
            package_name: "gawk"
            package_state: "present"
            update_cache: True
          when:
            - package_info is defined
            - package_info | length == 0
      when: guest_os_ansible_distribution == "VMware Photon OS"

    - include_tasks: ../../common/vm_take_snapshot.yml
      vars:
        snapshot_name: "{{ base_snapshot_name }}"

    - name: Set base snapshot exist variable after taking base snapshot
      set_fact:
        base_snapshot_exist: True
  when: not base_snapshot_exist
