# Copyright 2021-2024 VMware, Inc.
# SPDX-License-Identifier: BSD-2-Clause
---
# Install, upgrade or uninstall packages in guest OS
# Parameters:
#   package_list: A list of packages to be installed, upgraded or uninstalled
#   package_state: The state of packages, which can be 'absent', 'installed', 'latest',
#     'present', 'removed'. Default is 'present'.
#     If package_state is 'present' or 'installed', missing packages in package_list will be installed.
#     If package_state is 'latest', installed packages in package_list will be upgraded, and missing
#       packages will be installed.
#     If package_state is 'absent' or 'removed', installed packages in package_list will be uninstalled.
#   package_repo_enabled (optional): Whether package repositories have been enabled. Default value is false,
#     and then it will configure and enable package repositories before installing packages.
#
- name: "Set default value of package_state to 'present'"
  ansible.builtin.set_fact:
    package_state: "present"
  when: package_state is undefined

- name: "Check parameters for installing or uninstalling package"
  ansible.builtin.assert:
    that:
      - package_list is defined
      - package_list | type_debug == 'list'
      - package_list | length > 0
      - package_state is defined
      - package_state in ['absent', 'installed', 'latest', 'present', 'removed']
    fail_msg: >-
      At least one of parameters 'package_list' and 'package_state' is incorrect.
      The value of 'package_list' is '{{ package_list | default("") }}'.
      The value of 'package_state' is '{{ package_state | default("") }}'.

- name: "Initialize variables for installing or uninstalling package"
  ansible.builtin.set_fact:
    package_manage_list: []
    package_manage_list_str: ''

- name: "Set fact of packages which needs to be installed with latest version"
  ansible.builtin.set_fact:
    package_manage_list: "{{ package_list }}"
    package_manage_op: "Install latest"
  when: package_state == 'latest'

- name: "Get packages to be installed or uninstalled"
  when: package_state != 'latest'
  block:
    - name: "Get installed packages on {{ guest_os_ansible_distribution }}"
      include_tasks: get_installed_packages.yml

    - name: "Set fact of packages which needs to be installed"
      ansible.builtin.set_fact:
        package_manage_list: "{{ package_list | difference(guest_installed_packages) }}"
        package_manage_op: "Install"
      when: package_state in ['installed', 'present']

    - name: "Set fact of packages which needs to be uninstalled"
      ansible.builtin.set_fact:
        package_manage_list: "{{ package_list | select('in', guest_installed_packages) }}"
        package_manage_op: "Uninstall"
      when: package_state in ['absent', 'removed']

- name: "Set fact of packages for {{ guest_os_ansible_distribution }} package manage command"
  ansible.builtin.set_fact:
    package_manage_list_str: "{{ ' '.join(package_manage_list) }}"

- name: "Display the pacakge list and operation"
  ansible.builtin.debug:
    msg:
      - "The package list is {{ package_manage_list }}"
      - "The package operation is {{ package_manage_op }}"

- name: "{{ package_manage_op }} packages on {{ guest_os_ansible_distribution }}"
  when: package_manage_list | length > 0
  block:
    - name: "Configure packages repositories"
      include_tasks: config_repos.yml
      when:
        - package_state in ['installed', 'latest', 'present']
        - not (package_repo_enabled | default(false))

    - name: "{{ package_manage_op }} packages on {{ guest_os_ansible_distribution }}"
      when: guest_os_ansible_distribution in ["VMware Photon OS", "FreeBSD"]
      block:
        - name: "Set facts of packages and command for {{ guest_os_ansible_distribution }}"
          ansible.builtin.set_fact:
            package_manager: "{{ (guest_os_ansible_distribution == 'FreeBSD') | ternary('pkg', 'tdnf') }}"

        - name: "Set the command to {{ package_manage_op | lower }} packages on {{ guest_os_ansible_distribution }}"
          ansible.builtin.set_fact:
            package_manage_cmd: |-
              {%- if package_state in [ 'installed', 'present', 'latest' ] -%}
                {{ package_manager }} install -y {{ package_manage_list_str }}
              {%- else -%}
                {{ package_manager }} remove -y {{ package_manage_list_str }}
              {%- endif -%}

        - name: "{{ package_manage_op }} packages on {{ guest_os_ansible_distribution }}"
          ansible.builtin.command: "{{ package_manage_cmd }}"
          delegate_to: "{{ vm_guest_ip }}"
          register: package_manage_result

        - name: "Display the result of '{{ package_manage_cmd }}'"
          ansible.builtin.debug: var=package_manage_result

    - name: "{{ package_manage_op }} packages on {{ guest_os_ansible_distribution }}"
      when: guest_os_family == "RedHat"
      block:
        - name: "{{ package_manage_op }} packages on {{ guest_os_ansible_distribution }} {{ guest_os_ansible_distribution_ver }}"
          ansible.builtin.yum:
            name: "{{ package_manage_list }}"
            allow_downgrade: true
            state: "{{ package_state }}"
          delegate_to: "{{ vm_guest_ip }}"
          when: guest_os_ansible_pkg_mgr == "yum"

        # Ansible has dnf and dnf5 modules based on different dnf version. Fedora 41 has bumped to dnf5, but Ansible dnf5 module
        # could not work well on Fedora 41. So here replaces dnf modules with dnf commands to manage packages
        - name: "{{ package_manage_op }} packages on {{ guest_os_ansible_distribution }} {{ guest_os_ansible_distribution_ver }}"
          when: guest_os_ansible_pkg_mgr in ['dnf', 'dnf5']
          block:
            - name: "Set facts of packages and command for {{ guest_os_ansible_distribution }}"
              ansible.builtin.set_fact:
                package_manage_cmd: |-
                  {%- if package_state in [ 'installed', 'present', 'latest' ] -%}
                    dnf install -y {{ package_manage_list_str }}
                  {%- else -%}
                    dnf remove --noautoremove -y {{ package_manage_list_str }}
                  {%- endif -%}

            - name: "{{ package_manage_op }} packages on {{ guest_os_ansible_distribution }} {{ guest_os_ansible_distribution_ver }}"
              ansible.builtin.shell: "{{ package_manage_cmd }}"
              delegate_to: "{{ vm_guest_ip }}"

    - name: "{{ package_manage_op }} packages on {{ guest_os_ansible_distribution }} {{ guest_os_ansible_distribution_ver }}"
      community.general.zypper:
        name: "{{ package_manage_list }}"
        state: "{{ package_state }}"
      delegate_to: "{{ vm_guest_ip }}"
      when: guest_os_family == "Suse"

    - name: "{{ package_manage_op }} packages on {{ guest_os_ansible_distribution }}"
      when: guest_os_family in ["Debian", "Astra Linux (Orel)"]
      block:
        - name: "Remove dpkg lock file"
          include_tasks: remove_dpkg_lock_file.yml

        - name: "{{ package_manage_op }} packages on {{ guest_os_ansible_distribution }} {{ guest_os_ansible_distribution_ver }}"
          ansible.builtin.apt:
            name: "{{ package_manage_list }}"
            state: "{{ package_state }}"
            update_cache: "{{ guest_os_family == 'Debian' }}"
          delegate_to: "{{ vm_guest_ip }}"
