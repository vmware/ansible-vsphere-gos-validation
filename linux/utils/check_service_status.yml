# Copyright 2021 VMware, Inc.
# SPDX-License-Identifier: BSD-2-Clause
---
# Check open-vm-tools services status
# Parameter:
#   service_name: the name of the service
#   expected_service_state: ['active', 'inactive', 'running', 'stopped', 'absent']
#     active: the service is running or active
#     inactive: the service is stopped or inactive
#     running: the service is active and running
#     stopped: the service is active and exited
#     absent: the service doesn't exist
#   expected_service_status: ['enabled', 'disabled']
#     enabled: the service is enabled to start at boot
#     disabled: the service is disabled to start at boot


- name: "Ignore expected_service_status when service '{{ service_name }}' is expected to be '{{ expected_service_state }}'"
  set_fact:
    expected_service_status: ""
  when: expected_service_state == 'absent'

- name: "Check the value of 'expected_service_state' and 'expected_service_status'"
  fail:
    msg: "Invalid parameters: expected_service_state={{ expected_service_state | default('undefined') }}, expected_service_status={{ expected_service_status | default('undefined') }}"
  when: >
    (expected_service_state is undefined) or
    (expected_service_state not in ['active', 'inactive', 'running', 'stopped', 'absent']) or
    (expected_service_state != 'absent' and
     (expected_service_status is undefined or
     expected_service_status not in ['enabled', 'disabled']))

- include_tasks: get_service_info.yml

- name: "Check service '{{ service_name }}' is {{ expected_service_state }}"
  assert:
    that:
      - service_info is defined
      - service_info.state is defined
      - service_info.state in ['active', 'running', 'stopped']
    fail_msg: "Serivce '{{ service_name }}' status is inactive"
    success_msg: "Service '{{ service_name }}' status is active"
  when: expected_service_state == 'active'

- name: "Check service '{{ service_name }}' is {{ expected_service_state }}"
  assert:
    that:
      - service_info is defined
      - service_info.state is defined
      - service_info.state == expected_service_state
    fail_msg: "Serivce '{{ service_name }}' is not {{ expected_service_state }}"
    success_msg: "Service '{{ service_name }}' is {{ expected_service_state }}"
  when: expected_service_state in  ['running', 'stopped']

- name: "Check service '{{ service_name }}' is {{ expected_service_status }}"
  assert:
    that:
      - service_info is defined
      - service_info.status is defined
      - service_info.status == expected_service_status
    fail_msg: "Serivce '{{ service_name }}' is not {{ expected_service_status }}"
    success_msg: "Service '{{ service_name }}' is {{ expected_service_status }}"
  when: expected_service_status in ['enabled', 'disabled']

- name: "Check service '{{ service_name }}' is {{ expected_service_state }}"
  assert:
    that:
      - service_info is defined
      - not service_info
    fail_msg: "Serivce '{{ service_name }}' exists"
    success_msg: "Service '{{ service_name }}' doesn't exist"
  when: expected_service_state == 'absent'


