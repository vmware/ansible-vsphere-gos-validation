# Copyright 2021-2023 VMware, Inc.
# SPDX-License-Identifier: BSD-2-Clause
---
- name: "Set cloud-init config file path"
  ansible.builtin.set_fact:
    guest_cloud_cfg_path: "/etc/cloud/cloud.cfg"
    guest_cloud_cfg_d_path: "/etc/cloud/cloud.cfg.d"

- name: "Check {{ guest_cloud_cfg_path }} existence"
  include_tasks: get_file_stat_info.yml
  vars:
    guest_file_path: "{{ guest_cloud_cfg_path }}"

- name: "Set fact of {{ guest_cloud_cfg_path }} exists or not"
  ansible.builtin.set_fact:
    guest_cloud_cfg_exists: "{{ guest_file_exists }}"

- name: "Fail to enable cloud-init GOSC due to no cloud-init config file"
  ansible.builtin.fail:
    msg: >-
      Can't enable clout-init GOSC because {{ guest_cloud_cfg_path }} doesn't exist.
      Please check whether cloud-init is installed.
  when:
     - enable_cloudinit_gosc | bool
     - not guest_cloud_cfg_exists | bool

- name: "Update cloud-init configs"
  block:
    - name: "Set keyword for searching network config in cloud-init config files"
      ansible.builtin.set_fact:
        network_config_keyword: "network: *{config: *disabled}"

    - name: "Search for network config"
      ansible.builtin.shell: "grep -rl '{{ network_config_keyword }}' {{ guest_cloud_cfg_path }} {{ guest_cloud_cfg_d_path }}/*.cfg"
      register: network_config_result
      failed_when: false
      changed_when: false
      delegate_to: "{{ vm_guest_ip }}"

    - name: "Enable Cloud-Init GOSC for cloud-init workflow"
      block:
        # Enable cloud-init services
        - include_tasks: service_operation.yml
          vars:
            service_enabled: true
            service_state: "started"
          loop:
            - cloud-init-local
            - cloud-init
            - cloud-config
            - cloud-final
          loop_control:
            loop_var: service_name

        - name: "Enable cloud-init GOSC in {{ guest_cloud_cfg_path }}"
          include_tasks: replace_or_add_line_in_file.yml
          vars:
            file: "{{ guest_cloud_cfg_path }}"
            reg_exp: '^[#\s]*{{ item.split(":")[0] }}'
            line_content: '{{ item }}'
          with_items:
            - 'manage_etc_hosts: true'
            - 'preserve_hostname: false'
            - 'disable_vmware_customization: false'
            - 'ssh_pwauth: 1'

        - name: Check cloud-init GOSC is enabled
          ansible.builtin.command: "grep '^disable_vmware_customization' {{ guest_cloud_cfg_path }}"
          register: result
          changed_when: false
          delegate_to: "{{ vm_guest_ip }}"

        - name: "Save cloud-init GOSC enable flag"
          ansible.builtin.set_fact:
            cloudinit_gosc_enabled: "{{ result.stdout.split(': ')[1] | lower == 'false' }}"

        - name: "Enable cloud-init network config"
          include_tasks: replace_or_add_line_in_file.yml
          vars:
            file: "{{ file_path }}"
            reg_exp: '^[#\s]*{{ network_config_keyword }}'
            line_content: '#network: {config: disabled}'
          with_items: "{{ network_config_result.stdout_lines }}"
          loop_control:
            loop_var: file_path
          when:
            - network_config_result.stdout_lines is defined
            - network_config_result.stdout_lines | length >= 1

        # For ubuntu, we should remove files to let gosc with cloud-init work well
        - name: "Remove files if exists"
          ansible.builtin.file:
            path: "{{ config_file_for_netplan }}"
            state: absent
            force: true
          with_items:
            - "/etc/cloud/cloud-init.disabled"
            - "/var/lib/cloud/seed/nocloud-net"
            - "{{ guest_cloud_cfg_d_path }}/50-curtin-networking.cfg"
            - "{{ guest_cloud_cfg_d_path }}/subiquity-disable-cloudinit-networking.cfg"
            - "{{ guest_cloud_cfg_d_path }}/99-installer.cfg"
          when:
            - guest_os_ansible_distribution is defined
            - guest_os_ansible_distribution == "Ubuntu"
          loop_control:
            loop_var: config_file_for_netplan
          delegate_to: "{{ vm_guest_ip }}"
          ignore_errors: true

        - name: "Assert disable_vmware_customization is false"
          ansible.builtin.assert:
            that:
              - cloudinit_gosc_enabled
            fail_msg: "Failed to enable cloud-init GOSC"

        - name: "Clear cloud-init.log"
          ansible.builtin.shell: "cat /dev/null >/var/log/cloud-init.log"
          delegate_to: "{{ vm_guest_ip }}"
          ignore_errors: true
      when: enable_cloudinit_gosc | bool

    - name: "Disable Cloud-Init GOSC for perl workflow"
      block:
        - name: "Disable cloud-init GOSC in {{ guest_cloud_cfg_path }}"
          ansible.builtin.lineinfile:
            path: "{{ guest_cloud_cfg_path }}"
            regexp: '^\s*disable_vmware_customization:'
            backup: true
            state: absent
          delegate_to: "{{ vm_guest_ip }}"

        - name: "Check cloud-init GOSC is disabled"
          ansible.builtin.command: "grep '^disable_vmware_customization' {{ guest_cloud_cfg_path }}"
          register: result
          changed_when: false
          ignore_errors: true
          delegate_to: "{{ vm_guest_ip }}"

        - name: "Save cloud-init GOSC disable flag"
          ansible.builtin.set_fact:
            cloudinit_gosc_disabled: "{{ result.rc != 0 }}"

        - name: "Disable cloud-init network config"
          block:
            - name: "Disable cloud-init network config"
              include_tasks: replace_or_add_line_in_file.yml
              vars:
                file: "{{ file_path }}"
                reg_exp: '^[#\s]*{{ network_config_keyword }}'
                line_content: 'network: {config: disabled}'
              with_items: "{{ network_config_result.stdout_lines }}"
              loop_control:
                loop_var: file_path
              when:
                - network_config_result.stdout_lines is defined
                - network_config_result.stdout_lines | length >= 1

            - name: "Disable cloud-init network config"
              include_tasks: replace_or_add_line_in_file.yml
              vars:
                file: "{{ guest_cloud_cfg_path }}"
                line_content: "network: {config: disabled}"
              when: >
                network_config_result.stdout_lines is undefined or
                network_config_result.stdout_lines | length == 0

        # For ubuntu, create file /etc/cloud/cloud-init.disabled to disable cloud-init
        - name: "Create file /etc/cloud/cloud-init.disabled to disable gosc with cloud-init for Ubuntu"
          ansible.builtin.file:
            path: /etc/cloud/cloud-init.disabled
            state: touch
            mode: "777"
          when: guest_os_ansible_distribution == "Ubuntu"
          delegate_to: "{{ vm_guest_ip }}"

        - name: "Assert cloud-init GOSC is disabled"
          ansible.builtin.assert:
            that:
              - cloudinit_gosc_disabled
            fail_msg: "Failed to disable cloud-init GOSC"
      when: not enable_cloudinit_gosc | bool
  when: guest_cloud_cfg_exists | bool
