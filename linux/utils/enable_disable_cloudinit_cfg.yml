# Copyright 2021 VMware, Inc.
# SPDX-License-Identifier: BSD-2-Clause
---
- name: "Check /etc/cloud/cloud.cfg existence"
  stat:
    path: /etc/cloud/cloud.cfg
  register: cloud_init_cfg
  delegate_to: "{{ vm_guest_ip }}"

- block:
    - name: "Set keyword for searching network config in cloud-init config files"
      set_fact:
        network_config_keyword: "network: *{config: *disabled}"

    - name: "Search for network config"
      shell: grep -rl "{{ network_config_keyword }}" /etc/cloud/cloud.cfg /etc/cloud/cloud.cfg.d/*.cfg
      register: network_config_result
      failed_when: False
      changed_when: False
      delegate_to: "{{ vm_guest_ip }}"

    - name: Enable Cloud-Init GOSC for cloud-init work flow
      block:
        # Enable cloud-init services
        - include_tasks: service_operation.yml
          vars:
            service_enabled: true
            service_state: "started"
          loop:
            - cloud-init-local
            - cloud-init
            - cloud-config
            - cloud-final
          loop_control:
            loop_var: service_name

        - name: "Enable cloud-init GOSC in /etc/cloud/cloud.cfg"
          lineinfile:
            path: /etc/cloud/cloud.cfg
            regexp: '^[#\s]*{{ item.split(":")[0] }}'
            line: '{{ item }}'
            state: present
          with_items:
            - 'manage_etc_hosts: true'
            - 'preserve_hostname: false'
            - 'disable_vmware_customization: false'
            - 'ssh_pwauth: 1'
          delegate_to: "{{ vm_guest_ip }}"

        - name: Check cloud-init GOSC is enabled
          command: grep '^disable_vmware_customization' /etc/cloud/cloud.cfg
          register: result
          changed_when: False
          delegate_to: "{{ vm_guest_ip }}"

        - name: "Save cloud-init GOSC enable flag"
          set_fact:
            cloudinit_gosc_enabled: "{{ result.stdout.split(': ')[1] | lower == 'false' }}"

        # Enable network config in /etc/cloud/cloud.cfg.d/*.cfg
        - block:
            - name: "Enable cloud-init network config"
              lineinfile:
                path: "{{ file_path }}"
                regexp: '^[#\s]*{{ network_config_keyword }}'
                line: '#network: {config: disabled}'
                state: present
              when:
              delegate_to: "{{ vm_guest_ip }}"
              with_items: "{{ network_config_result.stdout_lines }}"
              loop_control:
                loop_var: file_path
          when: network_config_result.stdout_lines is defined and network_config_result.stdout_lines | length >= 1

        # For ubuntu, we should remove files to let gosc with cloud-init work well
        - name: remove files if exists
          file:
            path: "{{ config_file_for_netplan }}"
            state: absent
            force: yes
          with_items:
            - /etc/cloud/cloud-init.disabled
            - /var/lib/cloud/seed/nocloud-net
            - /etc/cloud/cloud.cfg.d/50-curtin-networking.cfg
            - /etc/cloud/cloud.cfg.d/99-installer.cfg
          when: guest_os_ansible_distribution is defined and guest_os_ansible_distribution == "Ubuntu"
          loop_control:
            loop_var: config_file_for_netplan
          delegate_to: "{{ vm_guest_ip }}"
          ignore_errors: True

        - name: Assert disable_vmware_customization is false
          assert:
            that:
              - cloudinit_gosc_enabled
            fail_msg: "Failed to enable cloud-init GOSC"

        - name: "Clear cloud-init.log"
          shell: "cat /dev/null >/var/log/cloud-init.log"
          delegate_to: "{{ vm_guest_ip }}"
          ignore_errors: True
      when: enable_cloudinit_gosc | bool

    - name: Disable Cloud-Init GOSC for perl work flow
      block:
        - name: Disable cloud-init GOSC in /etc/cloud/cloud.cfg
          lineinfile:
            path: /etc/cloud/cloud.cfg
            regexp: '^\s*disable_vmware_customization:'
            backup: yes
            state: absent
          delegate_to: "{{ vm_guest_ip }}"

        - name: Check cloud-init GOSC is disabled
          command: grep '^disable_vmware_customization' /etc/cloud/cloud.cfg
          register: result
          changed_when: False
          ignore_errors: True
          delegate_to: "{{ vm_guest_ip }}"

        - name: "Save cloud-init GOSC disable flag"
          set_fact:
            cloudinit_gosc_disabled: "{{ result.rc != 0 }}"

        # Disable network config
        - block:
            - name: "Disable cloud-init network config"
              lineinfile:
                path: "{{ file_path }}"
                regexp: '^[#\s]*{{ network_config_keyword }}'
                line: 'network: {config: disabled}'
                state: present
              delegate_to: "{{ vm_guest_ip }}"
              with_items: "{{ network_config_result.stdout_lines }}"
              loop_control:
                loop_var: file_path
              when: network_config_result.stdout_lines is defined and network_config_result.stdout_lines | length >= 1

            - name: "Disable cloud-init network config"
              lineinfile:
                path: /etc/cloud/cloud.cfg
                line: "network: {config: disabled}"
                state: present
              delegate_to: "{{ vm_guest_ip }}"
              when: network_config_result.stdout_lines is undefined or network_config_result.stdout_lines | length == 0

        # For ubuntu, create file /etc/cloud/cloud-init.disabled to disable cloud-init
        - name: "Create file /etc/cloud/cloud-init.disabled to disable gosc with cloud-init for Ubuntu"
          file:
            path: /etc/cloud/cloud-init.disabled
            state: touch
            mode: "777"
          when: guest_os_ansible_distribution == "Ubuntu"
          delegate_to: "{{ vm_guest_ip }}"

        - name: Assert cloud-init GOSC is disabled
          assert:
            that:
              - cloudinit_gosc_disabled
            fail_msg: "Failed to disable cloud-init GOSC"
      when: not enable_cloudinit_gosc | bool
  when:
    - cloud_init_cfg.stat is defined
    - cloud_init_cfg.stat.exists is defined
    - cloud_init_cfg.stat.exists
