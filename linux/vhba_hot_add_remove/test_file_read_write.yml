# Copyright 2022-2023 VMware, Inc.
# SPDX-License-Identifier: BSD-2-Clause
---
# Description:
#   Test file read/write on new disk partition
# Parameters:
#   new_partition_device_path: The partition device path
#   new_partition_uuid: The partition UUID
#   new_partition_fstype: The filesystem type of the partition
#
- name: "Set facts for testing read and write file on new partition"
  ansible.builtin.set_fact:
    new_partition_mount_src: |-
      {%- if guest_os_family == 'FreeBSD' -%}/dev/gptid/{{ new_partition_uuid }}
      {%- else -%}UUID={{ new_partition_uuid }}
      {%- endif -%}
    new_partition_mount_path: "/mnt/{{ new_partition_uuid }}"
    test_file_path: "/mnt/{{ new_partition_uuid }}/test_file.txt"
    test_file_content: "This is a test file to test new disk partition with UUID {{ new_partition_uuid }}"

- name: "Mount {{ new_partition_mount_src }} to {{ new_partition_mount_path }}"
  include_tasks: ../utils/set_mount_point.yml
  vars:
    mount_point_path: "{{ new_partition_mount_path }}"
    mount_point_src: "{{ new_partition_mount_src }}"
    mount_fstype: "{{ new_partition_fstype }}"
    mount_state: "mounted"

- name: "Create new file {{ test_file_path }}"
  include_tasks: ../utils/create_file.yml
  vars:
    new_file_path: "{{ test_file_path }}"

- name: "Write content to file {{ test_file_path }}"
  include_tasks: ../utils/write_file.yml
  vars:
    write_file_path: "{{ test_file_path }}"
    write_file_content: "{{ test_file_content }}"

- name: "Read content of file {{ test_file_path }}"
  include_tasks: ../utils/read_file.yml
  vars:
    read_file_path: "{{ test_file_path }}"

- name: "Check file content is what has been write"
  ansible.builtin.assert:
    that:
      - read_file_content is defined
      - read_file_content == test_file_content
    fail_msg: "{{ test_file_path }} file content is {{ read_file_content }}, not expected {{ test_file_content }}"

- name: "Unmount device {{ new_partition_mount_src }}"
  include_tasks: ../utils/set_mount_point.yml
  vars:
    mount_point_path: "{{ new_partition_mount_path }}"
    mount_state: "unmounted"

- name: "Reboot guest OS to check file content again"
  include_tasks: ../utils/reboot.yml

- name: "Get new partition device path and mount path after reboot on {{ guest_os_ansible_distribution }}"
  when: guest_os_family != 'FreeBSD'
  block:
    - name: "Get new partition path with UUID {{ new_partition_uuid }} after reboot"
      ansible.builtin.shell: "blkid -U {{ new_partition_uuid }}"
      changed_when: false
      delegate_to: "{{ vm_guest_ip }}"
      register: blkid_uuid_result

    - name: "Check partition with UUID {{ new_partition_uuid }} existing on {{ guest_os_ansible_distribution }}"
      ansible.builtin.assert:
        that:
          - blkid_uuid_result is defined
          - blkid_uuid_result.stdout is defined
          - blkid_uuid_result.stdout
        fail_msg: "Failed to find partition with UUID {{ new_partition_uuid }} on {{ guest_os_ansible_distribution }}"

    - name: "Set facts of test partition path and mount path after reboot"
      ansible.builtin.set_fact:
        new_partition_name: "{{ blkid_uuid_result.stdout.split('/')[-1] }}"
        new_partition_device_path: "{{ blkid_uuid_result.stdout }}"

- name: "Get new partition device path and mount path after reboot on FreeBSD"
  when: guest_os_family == 'FreeBSD'
  block:
    - name: "Get disk partition info by UUID on FreeBSD"
      include_tasks: ../utils/freebsd_get_partition_info.yml
      vars:
        disk_partition_uuid: "{{ new_partition_uuid }}"

    - name: "Check partition with UUID {{ new_partition_uuid }} existing on FreeBSD"
      ansible.builtin.assert:
        that:
          - disk_partition_info.name is defined
          - disk_partition_info.name
          - disk_partition_info.config.rawuuid is defined
          - disk_partition_info.config.rawuuid == new_partition_uuid
        fail_msg: "Failed to get partition by UUID {{ new_partition_uuid }} on FreeBSD"

    - name: "Set facts of test partition path and mount path after reboot"
      ansible.builtin.set_fact:
        new_partition_name: "{{ disk_partition_info.name }}"
        new_partition_device_path: "/dev/{{ disk_partition_info.name }}"

- name: "Get guest OS mount facts"
  include_tasks: ../../common/get_system_info.yml
  vars:
    filter: "ansible_mounts"

- name: "Set fact of guest OS mount info on device {{ new_partition_mount_src }}"
  ansible.builtin.set_fact:
    new_partition_mount: >-
      {{
        guest_system_info.ansible_mounts |
        selectattr('device', 'equalto', new_partition_mount_src) | first
      }}

- name: "Mount {{ new_partition_mount_src }} to {{ new_partition_mount_path }}"
  include_tasks: ../utils/set_mount_point.yml
  vars:
    mount_point_path: "{{ new_partition_mount_path }}"
    mount_point_src: "{{ new_partition_mount_src }}"
    mount_fstype: "{{ new_partition_fstype }}"
    mount_state: "mounted"
  when: >-
    (not new_partition_mount or
     new_partition_mount.mount is undefined or
     new_partition_mount.mount != new_partition_mount_path)

- name: "Read content of file {{ test_file_path }} after guest OS reboot"
  include_tasks: ../utils/read_file.yml
  vars:
    read_file_path: "{{ test_file_path }}"

- name: "Check file content is what has been write after guest OS reboot"
  ansible.builtin.assert:
    that:
      - read_file_content is defined
      - read_file_content == test_file_content
    fail_msg: "{{ test_file_path }} file content is {{ read_file_content }}, not expected {{ test_file_content }}"

- name: "Remove file {{ test_file_path }} from guest OS"
  ansible.builtin.file:
    path: "{{ test_file_path }}"
    state: absent
  delegate_to: "{{ vm_guest_ip }}"

- name: "Unmount device {{ new_partition_mount_src }}"
  include_tasks: ../utils/set_mount_point.yml
  vars:
    mount_point_path: "{{ new_partition_mount_path }}"
    mount_state: "absent"
