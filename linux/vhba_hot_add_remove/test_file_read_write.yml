# Copyright 2022-2023 VMware, Inc.
# SPDX-License-Identifier: BSD-2-Clause
---
# Description:
#   Test file read/write on new disk partition
# Parameters:
#   new_partition_name: The partition name
#   new_partition_device_path: The partition device path
#   new_partition_uuid: The partition UUID
#   new_partition_fstype: The filesystem type of the partition
#
- name: "Set facts for testing read and write file on new partition"
  ansible.builtin.set_fact:
    new_partition_mount_path: "/mnt/{{ new_partition_name }}"
    test_file_path: "/mnt/{{ new_partition_name }}/test_{{ new_partition_uuid }}.txt"
    test_file_content: "This is a test file to test new disk partition with UUID {{ new_partition_uuid }}"

- name: "Mount {{ new_partition_device_path }} to {{ new_partition_mount_path }}"
  include_tasks: ../utils/set_mount_point.yml
  vars:
    mount_point_path: "{{ new_partition_mount_path }}"
    mount_point_src: "{{ new_partition_device_path }}"
    mount_fstype: "{{ new_partition_fstype }}"
    mount_state: "mounted"

- name: "Create new file {{ test_file_path }}"
  include_tasks: ../utils/create_file.yml
  vars:
    new_file_path: "{{ test_file_path }}"

- name: "Write content to file {{ test_file_path }}"
  include_tasks: ../utils/write_file.yml
  vars:
    write_file_path: "{{ test_file_path }}"
    write_file_content: "{{ test_file_content }}"

- name: "Read content of file {{ test_file_path }}"
  include_tasks: ../utils/read_file.yml
  vars:
    read_file_path: "{{ test_file_path }}"

- name: "Check file content is what has been write"
  ansible.builtin.assert:
    that:
      - read_file_content is defined
      - read_file_content == test_file_content
    fail_msg: "{{ test_file_path }} file content is {{ read_file_content }}, not expected {{ test_file_content }}"

- name: "Unmount device {{ new_partition_device_path }}"
  include_tasks: ../utils/set_mount_point.yml
  vars:
    mount_point_path: "{{ new_partition_mount_path }}"
    mount_state: "absent"

- name: "Reboot guest OS to check file content again"
  include_tasks: ../utils/reboot.yml

- name: "Get new partition path with UUID {{ new_partition_uuid }} after reboot"
  ansible.builtin.shell: "blkid -U {{ new_partition_uuid }}"
  changed_when: false
  delegate_to: "{{ vm_guest_ip }}"
  register: blkid_uuid_result

- name: "Check guest device with UUID {{ new_partition_uuid }} exists"
  ansible.builtin.assert:
    that:
      - blkid_uuid_result is defined
      - blkid_uuid_result.stdout is defined
      - blkid_uuid_result.stdout
    fail_msg: "Failed to find guest device with UUID {{ new_partition_uuid }}"

- name: "Set facts of test partition path and mount path after reboot"
  ansible.builtin.set_fact:
    new_partition_device_path: "{{ blkid_uuid_result.stdout }}"
    new_partition_mount_path: "/mnt/{{ blkid_uuid_result.stdout.split('/')[-1] }}"

- name: "Set fact of test file path after reboot"
  ansible.builtin.set_fact:
    test_file_path: "{{ new_partition_mount_path }}/test_{{ new_partition_uuid }}.txt"

- name: "Mount {{ new_partition_device_path }} to {{ new_partition_mount_path }}"
  include_tasks: ../utils/set_mount_point.yml
  vars:
    mount_point_path: "{{ new_partition_mount_path }}"
    mount_point_src: "{{ new_partition_device_path }}"
    mount_fstype: "{{ new_partition_fstype }}"
    mount_state: "mounted"

- name: "Read content of file {{ test_file_path }} after guest OS reboot"
  include_tasks: ../utils/read_file.yml
  vars:
    read_file_path: "{{ test_file_path }}"

- name: "Check file content is what has been write after guest OS reboot"
  ansible.builtin.assert:
    that:
      - read_file_content is defined
      - read_file_content == test_file_content
    fail_msg: "{{ test_file_path }} file content is {{ read_file_content }}, not expected {{ test_file_content }}"

- name: "Unmount device {{ new_partition_device_path }}"
  include_tasks: ../utils/set_mount_point.yml
  vars:
    mount_point_path: "{{ new_partition_mount_path }}"
    mount_state: "absent"
