# Copyright 2021-2024 VMware, Inc.
# SPDX-License-Identifier: BSD-2-Clause
---
- name: "Set new disk size in GB and bytes"
  ansible.builtin.set_fact:
    new_disk_size_gb: 1
    new_disk_size_bytes: 1073741824

# Disk hot-add
- name: "Get guest disk list before hot-add"
  include_tasks: ../utils/get_device_list.yml
  vars:
    guest_device_type: "disk"

- name: "Set the fact of guest disk list before hot-add"
  ansible.builtin.set_fact:
    guest_disk_list_before_hotadd: "{{ guest_device_list }}"

- name: "Print guest disk list before hot-add"
  ansible.builtin.debug: var=guest_disk_list_before_hotadd

- name: "Hot add a new disk on a new {{ new_disk_ctrl_type }} controller"
  include_tasks: ../../common/vm_hot_add_ctrl_disk.yml
  vars:
    disk_controller_type: "{{ new_disk_ctrl_type }}"
    disk_size_gb: "{{ new_disk_size_gb }}"
    ctrl_number: "{{ new_ctrl_number }}"
    unit_number: "{{ new_unit_number }}"
  when: new_disk_ctrl_state == "new"

- name: "Hot add a new disk on an existing {{ new_disk_ctrl_type }} controller"
  include_tasks: ../../common/vm_hot_add_remove_disk.yml
  vars:
    disk_operation: 'present'
    disk_controller_type: "{{ new_disk_ctrl_type }}"
    disk_size_gb: "{{ new_disk_size_gb }}"
    ctrl_number: "{{ new_ctrl_number }}"
    unit_number: "{{ new_unit_number }}"
  when: new_disk_ctrl_state == "existing"

- name: "Collect dmesg after hot adding a disk to {{ new_disk_ctrl_state }} {{ new_disk_ctrl_type }} controller"
  include_tasks: ../utils/collect_dmesg.yml
  vars:
    dmesg_options: "-c"
    dmesg_output_file_name: "dmesg_after_{{ new_disk_ctrl_state }}_ctrl_disk_hot_add.log"
    dmesg_no_log: true
    dmesg_check_call_trace: true

- name: "Wait for hot-added disk to {{ new_disk_ctrl_state }} {{ new_disk_ctrl_type }} controller being present in guest OS"
  include_tasks: wait_device_list_changed.yml
  vars:
    wait_device_state: "present"
    wait_device_count: "{{ guest_disk_list_before_hotadd | length + 1 }}"

- name: "Set the fact of guest disk list after hot-add"
  ansible.builtin.set_fact:
    guest_disk_list_after_hotadd: "{{ guest_device_list }}"

- name: "Print guest disk list after hot-add"
  ansible.builtin.debug: var=guest_disk_list_after_hotadd

- name: "Check new disk is recognized by guest OS"
  ansible.builtin.assert:
    that:
      - guest_disk_list_after_hotadd | length - guest_disk_list_before_hotadd | length == 1
    fail_msg: "Guest OS failed to recognize the new disk hot added to {{ new_disk_ctrl_state }} {{ new_disk_ctrl_type }} controller"
    success_msg: "Guest OS successfully recognized the new disk hot added to {{ new_disk_ctrl_state }} {{ new_disk_ctrl_type }} controller"

- name: "Get new disk info in guest OS after hot-add"
  include_tasks: get_new_disk_info.yml
  vars:
    current_guest_disk_list: "{{ guest_disk_list_after_hotadd }}"

- name: "Create new partition on the new disk {{ new_guest_disk_info.name }}"
  when: guest_os_family != 'FreeBSD'
  include_tasks: ../utils/create_disk_partition.yml
  vars:
    disk_name: "{{ new_guest_disk_info.name }}"
    partition_fstype: "ext4"

- name: "Create new partition on the new disk {{ new_guest_disk_info.name }} for FreeBSD"
  when: guest_os_family == 'FreeBSD'
  include_tasks: ../utils/freebsd_create_disk_partition.yml
  vars:
    disk_name: "{{ new_guest_disk_info.name }}"
    partition_fstype: "ufs"

- name: "Run I/O test on new disk {{ new_guest_disk_info.name }}"
  include_tasks: test_disk_io.yml

# Disk hot-remove
- name: "Get guest disk list before hot-remove"
  include_tasks: ../utils/get_device_list.yml
  vars:
    guest_device_type: "disk"

- name: "Set the fact of guest disk list before hot-remove"
  ansible.builtin.set_fact:
    guest_disk_list_before_hotremove: "{{ guest_device_list }}"

- name: "Print guest disk list before hot-remove"
  ansible.builtin.debug: var=guest_disk_list_before_hotremove

# Disk I/O testing rebooted the guest OS, which might cause disk name changed
# So here updates the new disk info if the disk name is changed
- name: "Update new disk info in guest OS before hot-remove"
  include_tasks: get_new_disk_info.yml
  vars:
    current_guest_disk_list: "{{ guest_disk_list_before_hotremove }}"
  when: guest_disk_list_before_hotremove | difference(guest_disk_list_after_hotadd) | length != 0

- name: "Hot remove the new disk from VM"
  include_tasks: ../../common/vm_hot_add_remove_disk.yml
  vars:
    disk_operation: 'absent'
    ctrl_number: "{{ new_ctrl_number }}"
    unit_number: "{{ new_unit_number }}"
    disk_controller_type: "{{ new_disk_ctrl_type }}"

- name: "Collect dmesg after hot removing the disk from {{ new_disk_ctrl_state }} {{ new_disk_ctrl_type }} controller"
  include_tasks: ../utils/collect_dmesg.yml
  vars:
    dmesg_options: "-c"
    dmesg_output_file_name: "dmesg_after_{{ new_disk_ctrl_state }}_ctrl_disk_hot_remove.log"
    dmesg_no_log: true
    dmesg_check_call_trace: true

- name: "Wait for disk being absent in guest OS"
  include_tasks: wait_device_list_changed.yml
  vars:
    wait_device_state: "absent"
    wait_device_count: "{{ guest_disk_list_before_hotremove | length - 1 }}"
    wait_device_name: "{{ new_guest_disk_info.name }}"

- name: "Set the fact of guest disk list after hot-remove"
  ansible.builtin.set_fact:
    guest_disk_list_after_hotremove: "{{ guest_device_list }}"

- name: "Print guest disk list after hot-remove"
  ansible.builtin.debug: var=guest_disk_list_after_hotremove

- name: "Check new disk is removed from guest OS"
  ansible.builtin.assert:
    that:
      - guest_disk_list_before_hotremove | length - guest_disk_list_after_hotremove | length == 1
    fail_msg: "After the disk hot removed from {{ new_disk_ctrl_state }} {{ new_disk_ctrl_type }} controller, it is still present in guest OS."
    success_msg: "After the disk hot removed from {{ new_disk_ctrl_state }} {{ new_disk_ctrl_type }} controller, it is absent in guest OS."
