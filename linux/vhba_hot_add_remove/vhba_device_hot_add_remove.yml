# Copyright 2021 VMware, Inc.
# SPDX-License-Identifier: BSD-2-Clause
---
- block:
    - include_tasks: ../utils/test_setup.yml
      vars:
        vmtools_check: "False"

    - name: "Skip test case because guest OS doesn't support {{ new_disk_ctrl_type }} controller"
      block:
        - include_tasks: ../../common/print_test_result.yml
          vars:
            test_result: "No Run"
        - meta: end_play
      when:
        - new_disk_ctrl_type in ["lsilogic", "lsilogicsas"]
        - guest_os_ansible_distribution in ["RedHat", "CentOS"]
        - guest_os_ansible_distribution_major_ver | int >= 8

    - name: "Set fact of the iozone file path"
      set_fact:
        iozone_tools_path: "{{ '../../tools/iozone_64bit' if guest_os_ansible_architecture == 'x86_64' else '../../tools/iozone_32bit' }}"
    - debug:
        msg: "Will use iozone tool to test new added disk: {{ iozone_tools_path }}"

    - name: "The controller type for new disk is sata controller"
      set_fact:
        new_ctrl_type: "scsi"
      when: new_disk_ctrl_type in ['paravirtual', 'lsilogic', 'lsilogicsas']

    - name: "The controller type for new disk is sata controller"
      set_fact:
        new_ctrl_type: "sata"
      when: new_disk_ctrl_type == "sata"

    - name: "The controller type for new disk is nvme controller"
      set_fact:
        new_ctrl_type: "nvme"
      when: new_disk_ctrl_type == "nvme"

    # Get VM current disk controller info before doing hotadd testing
    - include_tasks: ../../common/vm_get_disk_controller_facts.yml
    - name: "Save original disk controller facts"
      set_fact:
        disk_controller_facts_old: "{{ disk_controller_facts['disk_controller_data'][new_ctrl_type] }}"
    - name: "Get existing SCSI controller number"
      set_fact:
        total_existing_controller_num: "{{ disk_controller_facts['disk_controller_data'][new_ctrl_type] | length }}"
    - name: "Print existing SCSI controller number in VM '{{ vm_name }}'"
      debug: var=total_existing_controller_num

    # Add a new disk controller and a new disk attaching to it
    # when the total existing controller number < 4
    - block:
        # Get new disk controller number and new disk unit number
        - include_tasks: get_new_disk_controller_num.yml
        # Get current device list in guest OS
        - include_tasks: get_vm_device_list.yml
        - name: "Set fact of existing block device list"
          set_fact:
            old_device_list: "{{ device_list }}"
        - name: "Print existing block device list in guest OS"
          debug: var=old_device_list

        # Hot add a new controller and disk at the same time, run disk iozone test and then remove it
        - include_tasks: hot_add_remove_disk.yml

        # Get VM disk controller info after hot adding
        - include_tasks: ../../common/vm_get_disk_controller_facts.yml

        - name: "Print disk controller info after disk hot adding"
          debug: var=disk_controller_facts['disk_controller_data'][new_ctrl_type]

        # Hot add another new disk on the new disk controller just added, run disk iozone test and then remove it
        - include_tasks: hot_add_remove_disk.yml

        # Hot remove new added disk controller
        - include_tasks: ../../common/vm_hot_add_remove_disk_ctrl.yml
          vars:
            disk_controller_ops: "absent"
            disk_controller_type: "{{ new_disk_ctrl_type }}"
            disk_controller_number: "{{ new_ctrl_number }}"

        # Check VM disk controller facts is the same as the one before hotadd testing
        - include_tasks: compare_vm_vhba_facts.yml
      when: total_existing_controller_num | int < 4

    - debug:
        msg: "There are already 4 SCSI controllers, skip testing on hotadd new disk onto new disk controller."
      when: total_existing_controller_num | int == 4

    # If found existing disk controller with the specifc type, then add new disk onto it
    - block:
        # Get current device list in guest OS
        - include_tasks: get_vm_device_list.yml
        - name: "Set fact of existing block device list"
          set_fact:
            old_device_list: "{{ device_list }}"
        - name: "Print existing block device list in guest OS"
          debug: var=old_device_list

        - include_tasks: get_new_disk_node_existing_ctrl.yml
          vars:
            scsi_facts: "{{ disk_controller_facts_old }}"
        - debug:
            msg: "Skip testing on hotadd new disk to existing disk controller since not found '{{ new_disk_ctrl_type }}' controller."
          when: found_existing_ctrl is undefined or not found_existing_ctrl
        - block:
            # Hotadd new disk, do disk iozone check then hot remove disk
            - include_tasks: hot_add_remove_disk.yml
            # Check VM disk controller facts is the same as the one got before hotadd testing
            - include_tasks: compare_vm_vhba_facts.yml
          when:
            - found_existing_ctrl is defined and found_existing_ctrl
            - total_existing_disks | int < 16
        - debug:
            msg: "There are 16 disks on the existing '{{ new_disk_ctrl_type }}' disk controller, skip testing on hotadd new disk."
          when:
            - found_existing_ctrl is defined and found_existing_ctrl
            - total_existing_disks | int == 16
      when: total_existing_controller_num | int >= 1

    - include_tasks: ../../common/print_test_result.yml
      vars:
        test_result: "Passed"

  rescue:
    - include_tasks: ../utils/test_rescue.yml
