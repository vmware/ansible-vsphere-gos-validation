# Copyright 2021-2022 VMware, Inc.
# SPDX-License-Identifier: BSD-2-Clause
---
# Wait for a device state is present or absent
# Parameters:
#   device_list_before_change: The devices list before change
#   wait_device_state: 'present' for new added device
#                      'absent' for removed device
#   wait_device_name: The devices name which should be absent.
#                     Required when wait_device_state is absent.
#
- name: "Check wait_device_state is correct"
  assert:
    that:
      - wait_device_state is defined
      - wait_device_state | lower in ['present', 'absent']
    fail_msg: "Invalid wait_device_state value '{{ wait_device_state }}', the expected value is 'present' or 'absent'"

- name: "Initialize the difference length of device list with device present or absent"
  set_fact:
    wait_device_diff: "{% if wait_device_state | lower == 'present' %}1{% else %}-1{% endif %}"

# Rescan SCSI bus
- block:
    - block:
        - name: "Rescan all scsi devices"
          command: "/usr/bin/rescan-scsi-bus.sh -a -r"
          register: rescan_scsi_result
          delegate_to: "{{ vm_guest_ip }}"

        - name: "Print result of rescanning scsi"
          debug: var=rescan_scsi_result.stdout_lines
          when:
            - rescan_scsi_result is defined
            - rescan_scsi_result.stdout_lines
      when: "'Flatcar' not in guest_os_ansible_distribution"

    - block:
        - name: "Rescan all hard disks"
          shell: |
            for i in `find /sys/ -iname rescan`;do echo 1 >$i; done;
            for i in `find /sys/ -iname scan`;do echo "- - -" >$i; done;
          delegate_to: "{{ vm_guest_ip }}"

        - block:
            - include_tasks: ../../common/get_system_info.yml
              vars:
                filter: ["ansible_devices"]

            - name: "Delete the removed SCSI disk"
              shell: "echo 1 > /sys/block/{{ wait_device_name }}/device/delete"
              ignore_errors: True
              delegate_to: "{{ vm_guest_ip }}"
              when:
                - get_system_info_result is defined
                - get_system_info_result.ansible_facts is defined
                - get_system_info_result.ansible_facts.ansible_devices is defined
                - get_system_info_result.ansible_facts.ansible_devices[wait_device_name] is defined
                - get_system_info_result.ansible_facts.ansible_devices[wait_device_name].size is defined
                - get_system_info_result.ansible_facts.ansible_devices[wait_device_name].size == "0.00 Bytes"
          when: wait_device_state | lower == 'absent'
      when: "'Flatcar' in guest_os_ansible_distribution"
  when: new_disk_ctrl_type == 'lsilogic'

- block:
    - debug:
        msg: "Hot adding or removing NVMe disks cannot be detected by guest OS on VMs with hardware version of {{ vm_hardware_version }}."

    # Get boot disk controller
    - name: "Set fact of VM's boot disk controller type"
      set_fact:
        vm_boot_disk_ctrl_type: "{{ boot_disk_controller if boot_disk_controller in ['sata', 'nvme'] else 'scsi' }}"
      when: new_vm is defined and new_vm | bool

    - block:
        - include_tasks: ../../common/vm_get_device_with_label.yml
          vars:
            device_label: "Hard disk 1"
        - include_tasks: ../../common/vm_get_device_with_key.yml
          vars:
            device_key: "{{ device_info_with_label.controllerKey }}"
        - name: "Set fact of VM's boot disk controller type"
          set_fact:
            vm_boot_disk_ctrl_type: "{{ device_info_with_key.deviceInfo.label.split()[0] | lower }}"
      when: new_vm is undefined or not new_vm | bool

    - block:
        - debug:
            msg: "VM's boot disk controller is not NVMe controller, so unload and reload nvme driver to see NVMe device changes."

        - name: "Unload and reload nvme driver"
          shell: "rmmod nvme && modprobe nvme"
          delegate_to: "{{ vm_guest_ip }}"
      when: vm_boot_disk_ctrl_type != 'nvme'

    - block:
        - debug:
            msg: "VM's boot disk controller is NVMe controller, so reboot OS to see NVMe device changes."

        - include_tasks: ../utils/vm_reboot.yml
      when: vm_boot_disk_ctrl_type == 'nvme'
  when:
    - new_disk_ctrl_type == 'nvme'
    - vm_hardware_version_num | int < 19
    - guest_os_ansible_distribution != 'VMware Photon OS'

- name: "Initialize new device list after change"
  set_fact:
    device_list_after_change: []

- name: "Wait for device to be {{ wait_device_state | lower }}"
  shell: "lsblk -o NAME,TYPE --nodeps| grep disk | awk '{print $1}'"
  delegate_to: "{{ vm_guest_ip }}"
  register: lsblk_result
  until:
    - lsblk_result.stdout_lines is defined
    - (lsblk_result.stdout_lines | length) - (device_list_before_change | length) == (wait_device_diff | int)
  delay: 5
  retries: 10
  ignore_errors: True
  ignore_unreachable: True

- name: "Guest OS unreachable"
  fail:
    msg: "{{ lsblk_result }}"
  when:
    - lsblk_result is defined
    - lsblk_result.unreachable is defined
    - lsblk_result.unreachable

# Check device list changed
- block:
    - name: "Check new device to be present"
      fail:
        msg: "New device is not recognized in guest OS."
      when: wait_device_state | lower == 'present'

    - name: "Check {{ wait_device_name }} to be absent"
      fail:
        msg: "{{ wait_device_name }} has been removed but still can be detected by guest OS."
      when: wait_device_state | lower == 'absent'
  when: >
    (lsblk_result is undefined or
     lsblk_result.stdout_lines is undefined or
     (lsblk_result.stdout_lines | length) - (device_list_before_change | length) != (wait_device_diff | int))

- name: "Set fact of new device list after change"
  set_fact:
    device_list_after_change: "{{ lsblk_result.stdout_lines }}"
  when:
    - lsblk_result is defined
    - lsblk_result.stdout_lines is defined

- name: "Print the new device list after change"
  debug: var=device_list_after_change
