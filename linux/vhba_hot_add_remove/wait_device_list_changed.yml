# Copyright 2021-2024 VMware, Inc.
# SPDX-License-Identifier: BSD-2-Clause
---
# Wait for a device state is present or absent
# Parameters:
#   wait_device_state: The state of device: 'present' for new added device, and
#     'absent' for removed device.
#   wait_device_count: The expected devices count after device is present or absent.
#   wait_device_name: The devices name which should be absent.
#     Required when wait_device_state is absent.
#
- name: "Check wait_device_state is correct"
  ansible.builtin.assert:
    that:
      - wait_device_state is defined
      - wait_device_state | lower in ['present', 'absent']
    fail_msg: "Invalid wait_device_state value '{{ wait_device_state | default('undefined') }}', the expected value is 'present' or 'absent'"

- name: "Check wait_device_name is set for absent device"
  ansible.builtin.assert:
    that:
      - wait_device_name is defined
      - wait_device_name
    fail_msg: "wait_device_name is missing for waiting device absent"
  when: wait_device_state | lower == 'absent'

- name: "Initialize the command to get device list"
  ansible.builtin.set_fact:
    get_device_list_cmd: |-
      {%- if guest_os_family == 'FreeBSD' %}lsblk -d | grep -i '^[a-z]' | grep -v SIZE | grep -v cd0
      {%- else %}lsblk -o NAME,TYPE,SIZE,FSTYPE -b --nodeps | grep disk
      {%- endif %} | awk '{print $1}'

- name: "List all disks in guest OS"
  ansible.builtin.shell: "{{ get_device_list_cmd }}"
  delegate_to: "{{ vm_guest_ip }}"
  changed_when: false
  register: list_disks_result

- name: "Set fact for device count changed"
  ansible.builtin.set_fact:
    guest_device_count_changed: "{{ list_disks_result.stdout_lines | default([]) | length == wait_device_count | int }}"

- name: "Wait for device count changed"
  when: not guest_device_count_changed
  block:
    - name: "Handle {{ new_disk_ctrl_type }} known issues on {{ vm_guest_os_distribution }}"
      include_tasks: "handle_{{ new_disk_ctrl_type }}_known_issue.yml"
      when: new_disk_ctrl_type in ['lsilogic', 'lsilogicsas', 'nvme', 'sata']

    - name: "Wait for device to be {{ wait_device_state | lower }} on {{ vm_guest_os_distribution }}"
      ansible.builtin.shell: "{{ get_device_list_cmd }}"
      delegate_to: "{{ vm_guest_ip }}"
      changed_when: false
      register: lsblk_result
      until:
        - lsblk_result.stdout_lines is defined
        - lsblk_result.stdout_lines | length == wait_device_count | int
      delay: 5
      retries: 10
      ignore_errors: true
      ignore_unreachable: true

    - name: "Guest OS unreachable"
      ansible.builtin.fail:
        msg: "{{ lsblk_result }}"
      when:
        - lsblk_result is defined
        - lsblk_result.unreachable is defined
        - lsblk_result.unreachable
