# Copyright 2022-2023 VMware, Inc.
# SPDX-License-Identifier: BSD-2-Clause
---
# Deploy a new Windows VM and install guest OS automatically
# from ISO image
#
# Initialize VM virtual hardware config variables
- name: "Initialize variables for new VM settings"
  ansible.builtin.set_fact:
    boot_disk_controller: "{{ boot_disk_controller if (boot_disk_controller is defined and boot_disk_controller) else 'lsilogicsas' }}"
    secureboot_enabled: "{{ secureboot_enabled if (secureboot_enabled is defined and secureboot_enabled) else false }}"
    network_adapter_type: "{{ 'e1000e' if (windows_has_inbox_driver is undefined or not windows_has_inbox_driver) else network_adapter_type }}"
    firmware: "{{ firmware if (firmware is defined and firmware) else 'efi' }}"
    boot_disk_size_gb: "{{ [64, boot_disk_size_gb | default(64) | int] | max }}"

- name: "Update test case name for deploying VM from ISO image"
  ansible.builtin.set_fact:
    current_testcase_name: "deploy_vm_{{ firmware }}_{{ boot_disk_controller }}_{{ network_adapter_type }}"

- name: "Check configured VM CPU number and cores per socket number"
  include_tasks: check_cpu_socket.yml

- name: "Get configured ISO file list"
  include_tasks: ../../common/get_iso_file_list.yml

- name: "Generate unattend install ISO file"
  include_tasks: create_unattend_install_iso.yml
  when: unattend_install_conf is defined and unattend_install_conf
- name: "Not Generate unattend install ISO file"
  ansible.builtin.debug:
    msg: "[WARNING] Parameter 'unattend_install_conf' is not configured in vars/test.yml."
  when: unattend_install_conf is undefined or not unattend_install_conf

- name: "Compose VM CDROMs with ISO file list"
  include_tasks: ../../common/compose_vm_cdroms.yml

- name: "Create new VM"
  include_tasks: ../../common/vm_create.yml
  when: boot_disk_controller != 'ide'

- name: "Create new VM with IDE boot disk controller"
  include_tasks: ../../common/vm_create_with_ide_disk.yml
  when: boot_disk_controller == 'ide'

- name: "Get new VM info"
  include_tasks: ../../common/vm_get_vm_info.yml

- name: "Set fact of vm_exists to True"
  ansible.builtin.set_fact:
    vm_exists: true

# When firmware is EFI, configure force EFI setup once
- name: "Handle VM with EFI firmware"
  block:
    - name: "Set features on 64bit VM"
      block:
        - name: "Add virtual TPM device"
          include_tasks: ../../common/vm_add_vtpm_device.yml
          when: virtual_tpm is defined and virtual_tpm | bool
        - name: "Enable secure boot"
          include_tasks: ../../common/vm_set_boot_options.yml
          vars:
            secure_boot_enabled_set: "{{ secureboot_enabled | default(false) }}"
            enter_bios_setup: true
        - name: "Enable VM VBS"
          include_tasks: ../utils/win_enable_vbs_vm.yml
          vars:
            win_enable_vbs: true
          when: enable_vbs is defined and enable_vbs | bool
      when: guest_id is defined and "'64' in guest_id"
    - name: "Power on VM"
      include_tasks: ../../common/vm_set_power_state.yml
      vars:
        vm_power_state_set: "powered-on"
    - name: "Send key strokes to VM console"
      include_tasks: ../../common/vm_guest_send_key.yml
      vars:
        keys_send:
          - DOWNARROW
          - DOWNARROW
          - ENTER
          - ENTER
  when: firmware is defined and firmware | lower == "efi"

- name: "Power on VM"
  include_tasks: ../../common/vm_set_power_state.yml
  vars:
    vm_power_state_set: "powered-on"
  when: firmware is defined and firmware | lower == "bios"

- name: "Wait 3 minutes while OS install"
  ansible.builtin.pause:
    minutes: 3

- name: "Check Image APPROVED in vmware.log when VM secureboot is enabled"
  include_tasks: ../../common/vm_wait_log_msg.yml
  vars:
    vm_wait_log_name: "vmware.log"
    vm_wait_log_msg: "SECUREBOOT: Image APPROVED"
    vm_wait_log_retries: 10
    vm_wait_log_ignore_errors: false
    vm_wait_log_hide_output: false
  when:
    - firmware is defined and firmware | lower == 'efi'
    - secureboot_enabled is defined and secureboot_enabled

- name: "Wait for VM network adapter is connected"
  include_tasks: ../../common/vm_wait_network_connected.yml

- name: "Get VM's primary network adapter MAC address after poweron VM"
  include_tasks: ../../common/vm_wait_primary_nic_mac.yml
  when: vm_primary_nic_mac is undefined or not vm_primary_nic_mac  

- name: "Get VM IP address"
  include_tasks: ../../common/vm_get_ip.yml
  vars:
    vm_get_ip_timeout: 3600

- name: "Check WinRM is connectable"
  include_tasks: ../utils/win_check_winrm.yml
  vars:
    win_check_winrm_timeout: 1800
- name: "Wait another 1 minute after OS becomes connectable"
  ansible.builtin.pause:
    minutes: 1
- name: "Add Windows host to in-memory inventory"
  include_tasks: ../utils/add_windows_host.yml

- name: "Enable VBS"
  block:
    - name: "Get guest OS system info"
      include_tasks: ../utils/get_windows_system_info.yml
    - name: "Enable VBS in guest OS"
      include_tasks: ../utils/win_enable_vbs_guest.yml
    - name: "Get VBS status in guest OS"
      include_tasks: ../utils/win_get_vbs_guest.yml
    - name: "Check VBS and HVCI are running"
      ansible.builtin.assert:
        that:
          - win_vbs_status_guest | int == 2
          - "'2' in win_vbs_running_service"
        fail_msg: "VBS is not running '{{ win_vbs_status_guest }}', or HVCI is not running '{{ win_vbs_running_service }}'."
  when: enable_vbs is defined and enable_vbs | bool

- name: "Detach ISO image from VM CDROMs"
  include_tasks: detach_cdrom_iso.yml
