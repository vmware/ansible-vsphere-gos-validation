# Copyright 2023 VMware, Inc.
# SPDX-License-Identifier: BSD-2-Clause
---
- name: "Initialize the variables"
  ansible.builtin.set_fact:
    vm_nested_virt_status: false
    vm_has_restarted: false
    win_uac_reg: "HKLM:\\SOFTWARE\\Microsoft\\Windows\\CurrentVersion\\policies\\system"

# Disable the User Account Control(UAC), need restart the OS.
- name: "Disable UAC"
  include_tasks: ../utils/win_execute_cmd.yml
  vars:
    win_powershell_cmd: "New-ItemProperty -Path {{ win_uac_reg }} -Name EnableLUA -PropertyType DWord -Value 0 -Force"

# Get CPU Hardware virtualization status
- name: "Get VM Hardware virtualization status"
  include_tasks: ../../common/vm_get_config.yml
  vars:
    property_list: ['config.nestedHVEnabled']

- name: "Set fact of VM CPU Hardware virtualization status"
  ansible.builtin.set_fact:
    vm_nested_virt_status: "{{ vm_config.config.nestedHVEnabled }}"
  when:
    - vm_config.config is defined
    - vm_config.config.nestedHVEnabled is defined

- name: "Display VM CPU Hardware virtualization status"
  ansible.builtin.debug:
    msg: "VM CPU Hardware virtualization status: {{ vm_nested_virt_status }}"

- name: "Enable CPU Hardware virtualization"
  block:
    - name: "Shutdown VM"
      include_tasks: ../utils/win_shutdown_restart.yml
      vars:
        set_win_power_state: "shutdown"

    - name: "Eanble CPU Hardware virtualization for the VM"
      include_tasks: ../../common/vm_set_nested_virtual.yml
      vars:
        vm_nested_virt: true

    - name: "Poweron the VM"
      include_tasks: ../../common/vm_set_power_state.yml
      vars:
        vm_power_state_set: 'powered-on'

    - name: "Set the fact of OS restart status"
      ansible.builtin.set_fact:
        vm_has_restarted: true
  when: not vm_nested_virt_status | bool

- name: "Restart the guest OS"
  include_tasks: ../utils/win_shutdown_restart.yml
  vars:
    set_win_power_state: "restart"
  when: not vm_has_restarted

- name: "Enable and start Microsoft Store Install Service"
  include_tasks: ../utils/win_execute_cmd.yml
  vars:
    win_powershell_cmd: "Set-Service -Name InstallService -StartupType Automatic; Start-Service InstallService"

# Create temp directory on Guest OS to store the WSL output message
- name: "Set fact of file path and distribution name"
  ansible.builtin.set_fact:
    wsl_file_path_win: "C:\\temp"
    wsl_distribution_name: "Ubuntu"

- name: "Check if folder {{ wsl_file_path_win }} exists on guest OS"
  include_tasks: ../utils/win_is_folder.yml
  vars:
    win_is_folder_path: "{{ wsl_file_path_win }}"

- name: "Create folder {{ wsl_file_path_win }} on guest OS"
  include_tasks: ../utils/win_execute_cmd.yml
  vars:
    win_powershell_cmd: "mkdir {{ wsl_file_path_win }}"
  when: not win_is_folder_result