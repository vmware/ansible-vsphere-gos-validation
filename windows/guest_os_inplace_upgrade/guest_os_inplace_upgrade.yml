# Copyright 2022-2024 VMware, Inc.
# SPDX-License-Identifier: BSD-2-Clause
---
# This test case is used for testing guest OS in-place upgrade.
# After guest OS upgrade, a new 'BaseSnapshot' will be taken
# and later test cases will be running based on this new 'BaseSnapshot'.
#
- name: guest_os_inplace_upgrade
  hosts: localhost
  gather_facts: false
  tasks:
    - name: "Test case block"
      block:
        # We only test VMware Tools installed scenario before OS upgrading
        - name: "Execute test setup tasks"
          include_tasks: ../setup/test_setup.yml
          vars:
            create_current_test_folder: true
            skip_test_no_vmtools: true

        - name: "Check configured OS installation ISO image existence"
          include_tasks: ../../common/esxi_check_delete_datastore_file.yml
          vars:
            file_in_datastore: "{{ os_installation_iso_upgrade.split(']')[0].strip('[]') }}"
            file_in_datastore_path: "{{ os_installation_iso_upgrade.split(']')[1].strip(' ') }}"
            file_in_datastore_ops: "file"
            file_in_datastore_ops_timeout: 600
            file_in_datastore_failed_ignore: true
          when:
            - os_installation_iso_upgrade is defined
            - os_installation_iso_upgrade

        # Parameter os_installation_iso_upgrade is required
        - name: "Check upgrade to OS installation ISO Image"
          block:
            - name: "Set failure message"
              ansible.builtin.set_fact:
                failure_msg: "Skip test case due to required parameter 'os_installation_iso_upgrade' is not set or empty: '{{ os_installation_iso_upgrade | default('') }}'."
              when: >
                (os_installation_iso_upgrade is undefined) or
                (os_installation_iso_upgrade == "")
            - name: "Set failure message"
              ansible.builtin.set_fact:
                failure_msg: "Skip test case due to parameter 'os_installation_iso_upgrade' set file path does not exist: '{{ file_in_datastore_result | default('Fail') }}'."
              when: >
                (file_in_datastore_result is undefined) or
                (file_in_datastore_result == 'Fail')
            - name: "Test case is blocked"
              include_tasks: ../../common/skip_test_case.yml
              vars:
                skip_msg: "{{ failure_msg }}'"
                skip_reason: "Blocked"
          when: >
            (os_installation_iso_upgrade is undefined or os_installation_iso_upgrade == "") or
            (file_in_datastore_result is undefined or file_in_datastore_result == 'Fail')

        - name: "Set fact of the guest OS distribution before upgrade"
          ansible.builtin.set_fact:
            win_distr_before_upgrade: "{{ guest_os_ansible_distribution }}"
        - name: "Get PVSCSI and VMXNET3 driver info before OS upgrade"
          include_tasks: ../wintools_uninstall_verify/prepare_pvscsi_vmxnet3_device.yml
        - name: "Handle known issue"
          include_tasks: handle_known_issue.yml
        - name: "Mount upgrade to ISO image"
          include_tasks: mount_upgrade_to_iso.yml
        - name: "Do in-place upgrade in guest OS"
          include_tasks: execute_upgrade_gos.yml
        - name: "Check OS upgrade"
          include_tasks: check_after_gos_upgrade.yml
        - name: "Reset base snapshot"
          include_tasks: ../../common/reset_base_snapshot.yml
          vars:
            remove_old_base_snapshot: true
      rescue:
        - name: "Execute tasks when test failed"
          include_tasks: ../../common/test_rescue.yml
          vars:
            extract_screenshot_text: true
            exit_testing_when_fail: true
      always:
        - name: "Get upgrade setuperr.log file"
          include_tasks: ../utils/win_get_file.yml
          vars:
            win_get_file_src_path: "C:\\upgrade_log\\Panther\\setuperr.log"
            win_get_file_dst_path: "{{ current_test_log_folder }}"
